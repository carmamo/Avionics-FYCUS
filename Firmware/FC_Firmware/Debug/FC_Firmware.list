
FC_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a00  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08004b90  08004b90  00014b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cd8  08004cd8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004cd8  08004cd8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004cd8  08004cd8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cd8  08004cd8  00014cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cdc  08004cdc  00014cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004ce0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a48  20000074  08004d54  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001abc  08004d54  00021abc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001603f  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e94  00000000  00000000  000360e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  00038f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011d0  00000000  00000000  0003a290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022bb2  00000000  00000000  0003b460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014173  00000000  00000000  0005e012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4329  00000000  00000000  00072185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001464ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005278  00000000  00000000  00146500  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004b78 	.word	0x08004b78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08004b78 	.word	0x08004b78

080001d0 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
	__WFI();
 80001d4:	bf30      	wfi
}
 80001d6:	bf00      	nop
 80001d8:	46bd      	mov	sp, r7
 80001da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001de:	4770      	bx	lr

080001e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e4:	f000 fa0b 	bl	80005fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e8:	f000 f832 	bl	8000250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ec:	f000 f882 	bl	80002f4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001f0:	f001 fe48 	bl	8001e84 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of RedLed */
  RedLedHandle = osThreadNew(PrvRedLED, NULL, &RedLed_attributes);
 80001f4:	4a0d      	ldr	r2, [pc, #52]	; (800022c <main+0x4c>)
 80001f6:	2100      	movs	r1, #0
 80001f8:	480d      	ldr	r0, [pc, #52]	; (8000230 <main+0x50>)
 80001fa:	f001 fe8d 	bl	8001f18 <osThreadNew>
 80001fe:	4603      	mov	r3, r0
 8000200:	4a0c      	ldr	r2, [pc, #48]	; (8000234 <main+0x54>)
 8000202:	6013      	str	r3, [r2, #0]

  /* creation of GreenLed */
  GreenLedHandle = osThreadNew(PrvGreenLED, NULL, &GreenLed_attributes);
 8000204:	4a0c      	ldr	r2, [pc, #48]	; (8000238 <main+0x58>)
 8000206:	2100      	movs	r1, #0
 8000208:	480c      	ldr	r0, [pc, #48]	; (800023c <main+0x5c>)
 800020a:	f001 fe85 	bl	8001f18 <osThreadNew>
 800020e:	4603      	mov	r3, r0
 8000210:	4a0b      	ldr	r2, [pc, #44]	; (8000240 <main+0x60>)
 8000212:	6013      	str	r3, [r2, #0]

  /* creation of BlueLed */
  BlueLedHandle = osThreadNew(PrvBlueLED, NULL, &BlueLed_attributes);
 8000214:	4a0b      	ldr	r2, [pc, #44]	; (8000244 <main+0x64>)
 8000216:	2100      	movs	r1, #0
 8000218:	480b      	ldr	r0, [pc, #44]	; (8000248 <main+0x68>)
 800021a:	f001 fe7d 	bl	8001f18 <osThreadNew>
 800021e:	4603      	mov	r3, r0
 8000220:	4a0a      	ldr	r2, [pc, #40]	; (800024c <main+0x6c>)
 8000222:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000224:	f001 fe52 	bl	8001ecc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000228:	e7fe      	b.n	8000228 <main+0x48>
 800022a:	bf00      	nop
 800022c:	08004bc4 	.word	0x08004bc4
 8000230:	0800038d 	.word	0x0800038d
 8000234:	20000090 	.word	0x20000090
 8000238:	08004be8 	.word	0x08004be8
 800023c:	080003ad 	.word	0x080003ad
 8000240:	20000094 	.word	0x20000094
 8000244:	08004c0c 	.word	0x08004c0c
 8000248:	080003cd 	.word	0x080003cd
 800024c:	20000098 	.word	0x20000098

08000250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b096      	sub	sp, #88	; 0x58
 8000254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000256:	f107 0314 	add.w	r3, r7, #20
 800025a:	2244      	movs	r2, #68	; 0x44
 800025c:	2100      	movs	r1, #0
 800025e:	4618      	mov	r0, r3
 8000260:	f004 fbc0 	bl	80049e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000264:	463b      	mov	r3, r7
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
 800026a:	605a      	str	r2, [r3, #4]
 800026c:	609a      	str	r2, [r3, #8]
 800026e:	60da      	str	r2, [r3, #12]
 8000270:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000272:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000276:	f000 fc97 	bl	8000ba8 <HAL_PWREx_ControlVoltageScaling>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000280:	f000 f8c6 	bl	8000410 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000284:	2310      	movs	r3, #16
 8000286:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000288:	2301      	movs	r3, #1
 800028a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800028c:	2300      	movs	r3, #0
 800028e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000290:	2360      	movs	r3, #96	; 0x60
 8000292:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000294:	2302      	movs	r3, #2
 8000296:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000298:	2301      	movs	r3, #1
 800029a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800029c:	2301      	movs	r3, #1
 800029e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80002a0:	231e      	movs	r3, #30
 80002a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80002a4:	2307      	movs	r3, #7
 80002a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002a8:	2302      	movs	r3, #2
 80002aa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002ac:	2302      	movs	r3, #2
 80002ae:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b0:	f107 0314 	add.w	r3, r7, #20
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 fccd 	bl	8000c54 <HAL_RCC_OscConfig>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80002c0:	f000 f8a6 	bl	8000410 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c4:	230f      	movs	r3, #15
 80002c6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c8:	2303      	movs	r3, #3
 80002ca:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002cc:	2300      	movs	r3, #0
 80002ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d4:	2300      	movs	r3, #0
 80002d6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80002d8:	463b      	mov	r3, r7
 80002da:	2103      	movs	r1, #3
 80002dc:	4618      	mov	r0, r3
 80002de:	f001 f8cd 	bl	800147c <HAL_RCC_ClockConfig>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d001      	beq.n	80002ec <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80002e8:	f000 f892 	bl	8000410 <Error_Handler>
  }
}
 80002ec:	bf00      	nop
 80002ee:	3758      	adds	r7, #88	; 0x58
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b088      	sub	sp, #32
 80002f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002fa:	f107 030c 	add.w	r3, r7, #12
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
 8000302:	605a      	str	r2, [r3, #4]
 8000304:	609a      	str	r2, [r3, #8]
 8000306:	60da      	str	r2, [r3, #12]
 8000308:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800030a:	4b1e      	ldr	r3, [pc, #120]	; (8000384 <MX_GPIO_Init+0x90>)
 800030c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800030e:	4a1d      	ldr	r2, [pc, #116]	; (8000384 <MX_GPIO_Init+0x90>)
 8000310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000314:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000316:	4b1b      	ldr	r3, [pc, #108]	; (8000384 <MX_GPIO_Init+0x90>)
 8000318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800031a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800031e:	60bb      	str	r3, [r7, #8]
 8000320:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000322:	4b18      	ldr	r3, [pc, #96]	; (8000384 <MX_GPIO_Init+0x90>)
 8000324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000326:	4a17      	ldr	r2, [pc, #92]	; (8000384 <MX_GPIO_Init+0x90>)
 8000328:	f043 0302 	orr.w	r3, r3, #2
 800032c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800032e:	4b15      	ldr	r3, [pc, #84]	; (8000384 <MX_GPIO_Init+0x90>)
 8000330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000332:	f003 0302 	and.w	r3, r3, #2
 8000336:	607b      	str	r3, [r7, #4]
 8000338:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800033a:	4b12      	ldr	r3, [pc, #72]	; (8000384 <MX_GPIO_Init+0x90>)
 800033c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800033e:	4a11      	ldr	r2, [pc, #68]	; (8000384 <MX_GPIO_Init+0x90>)
 8000340:	f043 0301 	orr.w	r3, r3, #1
 8000344:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000346:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <MX_GPIO_Init+0x90>)
 8000348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800034a:	f003 0301 	and.w	r3, r3, #1
 800034e:	603b      	str	r3, [r7, #0]
 8000350:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, B_LED_Pin|G_LED_Pin|R_LED_Pin, GPIO_PIN_RESET);
 8000352:	2200      	movs	r2, #0
 8000354:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000358:	480b      	ldr	r0, [pc, #44]	; (8000388 <MX_GPIO_Init+0x94>)
 800035a:	f000 fbe5 	bl	8000b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B_LED_Pin G_LED_Pin R_LED_Pin */
  GPIO_InitStruct.Pin = B_LED_Pin|G_LED_Pin|R_LED_Pin;
 800035e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000362:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000364:	2301      	movs	r3, #1
 8000366:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000368:	2300      	movs	r3, #0
 800036a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800036c:	2300      	movs	r3, #0
 800036e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000370:	f107 030c 	add.w	r3, r7, #12
 8000374:	4619      	mov	r1, r3
 8000376:	4804      	ldr	r0, [pc, #16]	; (8000388 <MX_GPIO_Init+0x94>)
 8000378:	f000 fa5c 	bl	8000834 <HAL_GPIO_Init>

}
 800037c:	bf00      	nop
 800037e:	3720      	adds	r7, #32
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	40021000 	.word	0x40021000
 8000388:	48000400 	.word	0x48000400

0800038c <PrvRedLED>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PrvRedLED */
void PrvRedLED(void *argument)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_TogglePin(R_LED_GPIO_Port, R_LED_Pin);
 8000394:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000398:	4803      	ldr	r0, [pc, #12]	; (80003a8 <PrvRedLED+0x1c>)
 800039a:	f000 fbdd 	bl	8000b58 <HAL_GPIO_TogglePin>
		osDelay(500);
 800039e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003a2:	f001 fe4b 	bl	800203c <osDelay>
		HAL_GPIO_TogglePin(R_LED_GPIO_Port, R_LED_Pin);
 80003a6:	e7f5      	b.n	8000394 <PrvRedLED+0x8>
 80003a8:	48000400 	.word	0x48000400

080003ac <PrvGreenLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_PrvGreenLED */
void PrvGreenLED(void *argument)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PrvGreenLED */
	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_TogglePin(G_LED_GPIO_Port, G_LED_Pin);
 80003b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003b8:	4803      	ldr	r0, [pc, #12]	; (80003c8 <PrvGreenLED+0x1c>)
 80003ba:	f000 fbcd 	bl	8000b58 <HAL_GPIO_TogglePin>
		osDelay(125);
 80003be:	207d      	movs	r0, #125	; 0x7d
 80003c0:	f001 fe3c 	bl	800203c <osDelay>
		HAL_GPIO_TogglePin(G_LED_GPIO_Port, G_LED_Pin);
 80003c4:	e7f6      	b.n	80003b4 <PrvGreenLED+0x8>
 80003c6:	bf00      	nop
 80003c8:	48000400 	.word	0x48000400

080003cc <PrvBlueLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_PrvBlueLED */
void PrvBlueLED(void *argument)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PrvBlueLED */
	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_TogglePin(B_LED_GPIO_Port, B_LED_Pin);
 80003d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003d8:	4803      	ldr	r0, [pc, #12]	; (80003e8 <PrvBlueLED+0x1c>)
 80003da:	f000 fbbd 	bl	8000b58 <HAL_GPIO_TogglePin>
		osDelay(250);
 80003de:	20fa      	movs	r0, #250	; 0xfa
 80003e0:	f001 fe2c 	bl	800203c <osDelay>
		HAL_GPIO_TogglePin(B_LED_GPIO_Port, B_LED_Pin);
 80003e4:	e7f6      	b.n	80003d4 <PrvBlueLED+0x8>
 80003e6:	bf00      	nop
 80003e8:	48000400 	.word	0x48000400

080003ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a04      	ldr	r2, [pc, #16]	; (800040c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d101      	bne.n	8000402 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80003fe:	f000 f917 	bl	8000630 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000402:	bf00      	nop
 8000404:	3708      	adds	r7, #8
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	40012c00 	.word	0x40012c00

08000410 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000414:	b672      	cpsid	i
}
 8000416:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000418:	e7fe      	b.n	8000418 <Error_Handler+0x8>
	...

0800041c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000422:	4b11      	ldr	r3, [pc, #68]	; (8000468 <HAL_MspInit+0x4c>)
 8000424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000426:	4a10      	ldr	r2, [pc, #64]	; (8000468 <HAL_MspInit+0x4c>)
 8000428:	f043 0301 	orr.w	r3, r3, #1
 800042c:	6613      	str	r3, [r2, #96]	; 0x60
 800042e:	4b0e      	ldr	r3, [pc, #56]	; (8000468 <HAL_MspInit+0x4c>)
 8000430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000432:	f003 0301 	and.w	r3, r3, #1
 8000436:	607b      	str	r3, [r7, #4]
 8000438:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800043a:	4b0b      	ldr	r3, [pc, #44]	; (8000468 <HAL_MspInit+0x4c>)
 800043c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800043e:	4a0a      	ldr	r2, [pc, #40]	; (8000468 <HAL_MspInit+0x4c>)
 8000440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000444:	6593      	str	r3, [r2, #88]	; 0x58
 8000446:	4b08      	ldr	r3, [pc, #32]	; (8000468 <HAL_MspInit+0x4c>)
 8000448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800044a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800044e:	603b      	str	r3, [r7, #0]
 8000450:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000452:	2200      	movs	r2, #0
 8000454:	210f      	movs	r1, #15
 8000456:	f06f 0001 	mvn.w	r0, #1
 800045a:	f000 f9c1 	bl	80007e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800045e:	bf00      	nop
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	40021000 	.word	0x40021000

0800046c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b08c      	sub	sp, #48	; 0x30
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000474:	2300      	movs	r3, #0
 8000476:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800047a:	4b2e      	ldr	r3, [pc, #184]	; (8000534 <HAL_InitTick+0xc8>)
 800047c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800047e:	4a2d      	ldr	r2, [pc, #180]	; (8000534 <HAL_InitTick+0xc8>)
 8000480:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000484:	6613      	str	r3, [r2, #96]	; 0x60
 8000486:	4b2b      	ldr	r3, [pc, #172]	; (8000534 <HAL_InitTick+0xc8>)
 8000488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800048a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800048e:	60bb      	str	r3, [r7, #8]
 8000490:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000492:	f107 020c 	add.w	r2, r7, #12
 8000496:	f107 0310 	add.w	r3, r7, #16
 800049a:	4611      	mov	r1, r2
 800049c:	4618      	mov	r0, r3
 800049e:	f001 f99b 	bl	80017d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80004a2:	f001 f983 	bl	80017ac <HAL_RCC_GetPCLK2Freq>
 80004a6:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80004a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004aa:	4a23      	ldr	r2, [pc, #140]	; (8000538 <HAL_InitTick+0xcc>)
 80004ac:	fba2 2303 	umull	r2, r3, r2, r3
 80004b0:	0c9b      	lsrs	r3, r3, #18
 80004b2:	3b01      	subs	r3, #1
 80004b4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80004b6:	4b21      	ldr	r3, [pc, #132]	; (800053c <HAL_InitTick+0xd0>)
 80004b8:	4a21      	ldr	r2, [pc, #132]	; (8000540 <HAL_InitTick+0xd4>)
 80004ba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80004bc:	4b1f      	ldr	r3, [pc, #124]	; (800053c <HAL_InitTick+0xd0>)
 80004be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80004c2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80004c4:	4a1d      	ldr	r2, [pc, #116]	; (800053c <HAL_InitTick+0xd0>)
 80004c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004c8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80004ca:	4b1c      	ldr	r3, [pc, #112]	; (800053c <HAL_InitTick+0xd0>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004d0:	4b1a      	ldr	r3, [pc, #104]	; (800053c <HAL_InitTick+0xd0>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004d6:	4b19      	ldr	r3, [pc, #100]	; (800053c <HAL_InitTick+0xd0>)
 80004d8:	2200      	movs	r2, #0
 80004da:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80004dc:	4817      	ldr	r0, [pc, #92]	; (800053c <HAL_InitTick+0xd0>)
 80004de:	f001 fa0d 	bl	80018fc <HAL_TIM_Base_Init>
 80004e2:	4603      	mov	r3, r0
 80004e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80004e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d11b      	bne.n	8000528 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80004f0:	4812      	ldr	r0, [pc, #72]	; (800053c <HAL_InitTick+0xd0>)
 80004f2:	f001 fa65 	bl	80019c0 <HAL_TIM_Base_Start_IT>
 80004f6:	4603      	mov	r3, r0
 80004f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80004fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000500:	2b00      	cmp	r3, #0
 8000502:	d111      	bne.n	8000528 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000504:	2019      	movs	r0, #25
 8000506:	f000 f987 	bl	8000818 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	2b0f      	cmp	r3, #15
 800050e:	d808      	bhi.n	8000522 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000510:	2200      	movs	r2, #0
 8000512:	6879      	ldr	r1, [r7, #4]
 8000514:	2019      	movs	r0, #25
 8000516:	f000 f963 	bl	80007e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800051a:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <HAL_InitTick+0xd8>)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	6013      	str	r3, [r2, #0]
 8000520:	e002      	b.n	8000528 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8000522:	2301      	movs	r3, #1
 8000524:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000528:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800052c:	4618      	mov	r0, r3
 800052e:	3730      	adds	r7, #48	; 0x30
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	40021000 	.word	0x40021000
 8000538:	431bde83 	.word	0x431bde83
 800053c:	2000009c 	.word	0x2000009c
 8000540:	40012c00 	.word	0x40012c00
 8000544:	20000004 	.word	0x20000004

08000548 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800054c:	e7fe      	b.n	800054c <NMI_Handler+0x4>

0800054e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800054e:	b480      	push	{r7}
 8000550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000552:	e7fe      	b.n	8000552 <HardFault_Handler+0x4>

08000554 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000558:	e7fe      	b.n	8000558 <MemManage_Handler+0x4>

0800055a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800055a:	b480      	push	{r7}
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800055e:	e7fe      	b.n	800055e <BusFault_Handler+0x4>

08000560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000564:	e7fe      	b.n	8000564 <UsageFault_Handler+0x4>

08000566 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000566:	b480      	push	{r7}
 8000568:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800056a:	bf00      	nop
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr

08000574 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000578:	4802      	ldr	r0, [pc, #8]	; (8000584 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800057a:	f001 fa75 	bl	8001a68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	2000009c 	.word	0x2000009c

08000588 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <SystemInit+0x20>)
 800058e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000592:	4a05      	ldr	r2, [pc, #20]	; (80005a8 <SystemInit+0x20>)
 8000594:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000598:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	e000ed00 	.word	0xe000ed00

080005ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80005ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005b0:	f7ff ffea 	bl	8000588 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b4:	480c      	ldr	r0, [pc, #48]	; (80005e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80005b6:	490d      	ldr	r1, [pc, #52]	; (80005ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80005b8:	4a0d      	ldr	r2, [pc, #52]	; (80005f0 <LoopForever+0xe>)
  movs r3, #0
 80005ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005bc:	e002      	b.n	80005c4 <LoopCopyDataInit>

080005be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005c2:	3304      	adds	r3, #4

080005c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005c8:	d3f9      	bcc.n	80005be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ca:	4a0a      	ldr	r2, [pc, #40]	; (80005f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005cc:	4c0a      	ldr	r4, [pc, #40]	; (80005f8 <LoopForever+0x16>)
  movs r3, #0
 80005ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d0:	e001      	b.n	80005d6 <LoopFillZerobss>

080005d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d4:	3204      	adds	r2, #4

080005d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005d8:	d3fb      	bcc.n	80005d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005da:	f004 f9cf 	bl	800497c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005de:	f7ff fdff 	bl	80001e0 <main>

080005e2 <LoopForever>:

LoopForever:
    b LoopForever
 80005e2:	e7fe      	b.n	80005e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005e4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80005e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005ec:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80005f0:	08004ce0 	.word	0x08004ce0
  ldr r2, =_sbss
 80005f4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80005f8:	20001abc 	.word	0x20001abc

080005fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005fc:	e7fe      	b.n	80005fc <ADC1_IRQHandler>

080005fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	b082      	sub	sp, #8
 8000602:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000604:	2300      	movs	r3, #0
 8000606:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000608:	2003      	movs	r0, #3
 800060a:	f000 f8de 	bl	80007ca <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800060e:	200f      	movs	r0, #15
 8000610:	f7ff ff2c 	bl	800046c <HAL_InitTick>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d002      	beq.n	8000620 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800061a:	2301      	movs	r3, #1
 800061c:	71fb      	strb	r3, [r7, #7]
 800061e:	e001      	b.n	8000624 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000620:	f7ff fefc 	bl	800041c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000624:	79fb      	ldrb	r3, [r7, #7]
}
 8000626:	4618      	mov	r0, r3
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
	...

08000630 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <HAL_IncTick+0x20>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	461a      	mov	r2, r3
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <HAL_IncTick+0x24>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4413      	add	r3, r2
 8000640:	4a04      	ldr	r2, [pc, #16]	; (8000654 <HAL_IncTick+0x24>)
 8000642:	6013      	str	r3, [r2, #0]
}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	20000008 	.word	0x20000008
 8000654:	200000e8 	.word	0x200000e8

08000658 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  return uwTick;
 800065c:	4b03      	ldr	r3, [pc, #12]	; (800066c <HAL_GetTick+0x14>)
 800065e:	681b      	ldr	r3, [r3, #0]
}
 8000660:	4618      	mov	r0, r3
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	200000e8 	.word	0x200000e8

08000670 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f003 0307 	and.w	r3, r3, #7
 800067e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000682:	68db      	ldr	r3, [r3, #12]
 8000684:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000686:	68ba      	ldr	r2, [r7, #8]
 8000688:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800068c:	4013      	ands	r3, r2
 800068e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000698:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800069c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006a2:	4a04      	ldr	r2, [pc, #16]	; (80006b4 <__NVIC_SetPriorityGrouping+0x44>)
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	60d3      	str	r3, [r2, #12]
}
 80006a8:	bf00      	nop
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	e000ed00 	.word	0xe000ed00

080006b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006bc:	4b04      	ldr	r3, [pc, #16]	; (80006d0 <__NVIC_GetPriorityGrouping+0x18>)
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	0a1b      	lsrs	r3, r3, #8
 80006c2:	f003 0307 	and.w	r3, r3, #7
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00

080006d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	db0b      	blt.n	80006fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	f003 021f 	and.w	r2, r3, #31
 80006ec:	4907      	ldr	r1, [pc, #28]	; (800070c <__NVIC_EnableIRQ+0x38>)
 80006ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f2:	095b      	lsrs	r3, r3, #5
 80006f4:	2001      	movs	r0, #1
 80006f6:	fa00 f202 	lsl.w	r2, r0, r2
 80006fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006fe:	bf00      	nop
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	e000e100 	.word	0xe000e100

08000710 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	6039      	str	r1, [r7, #0]
 800071a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800071c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000720:	2b00      	cmp	r3, #0
 8000722:	db0a      	blt.n	800073a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	b2da      	uxtb	r2, r3
 8000728:	490c      	ldr	r1, [pc, #48]	; (800075c <__NVIC_SetPriority+0x4c>)
 800072a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072e:	0112      	lsls	r2, r2, #4
 8000730:	b2d2      	uxtb	r2, r2
 8000732:	440b      	add	r3, r1
 8000734:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000738:	e00a      	b.n	8000750 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	b2da      	uxtb	r2, r3
 800073e:	4908      	ldr	r1, [pc, #32]	; (8000760 <__NVIC_SetPriority+0x50>)
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	f003 030f 	and.w	r3, r3, #15
 8000746:	3b04      	subs	r3, #4
 8000748:	0112      	lsls	r2, r2, #4
 800074a:	b2d2      	uxtb	r2, r2
 800074c:	440b      	add	r3, r1
 800074e:	761a      	strb	r2, [r3, #24]
}
 8000750:	bf00      	nop
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	e000e100 	.word	0xe000e100
 8000760:	e000ed00 	.word	0xe000ed00

08000764 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000764:	b480      	push	{r7}
 8000766:	b089      	sub	sp, #36	; 0x24
 8000768:	af00      	add	r7, sp, #0
 800076a:	60f8      	str	r0, [r7, #12]
 800076c:	60b9      	str	r1, [r7, #8]
 800076e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	f003 0307 	and.w	r3, r3, #7
 8000776:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000778:	69fb      	ldr	r3, [r7, #28]
 800077a:	f1c3 0307 	rsb	r3, r3, #7
 800077e:	2b04      	cmp	r3, #4
 8000780:	bf28      	it	cs
 8000782:	2304      	movcs	r3, #4
 8000784:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000786:	69fb      	ldr	r3, [r7, #28]
 8000788:	3304      	adds	r3, #4
 800078a:	2b06      	cmp	r3, #6
 800078c:	d902      	bls.n	8000794 <NVIC_EncodePriority+0x30>
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	3b03      	subs	r3, #3
 8000792:	e000      	b.n	8000796 <NVIC_EncodePriority+0x32>
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000798:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800079c:	69bb      	ldr	r3, [r7, #24]
 800079e:	fa02 f303 	lsl.w	r3, r2, r3
 80007a2:	43da      	mvns	r2, r3
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	401a      	ands	r2, r3
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	fa01 f303 	lsl.w	r3, r1, r3
 80007b6:	43d9      	mvns	r1, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007bc:	4313      	orrs	r3, r2
         );
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3724      	adds	r7, #36	; 0x24
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr

080007ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b082      	sub	sp, #8
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f7ff ff4c 	bl	8000670 <__NVIC_SetPriorityGrouping>
}
 80007d8:	bf00      	nop
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	60b9      	str	r1, [r7, #8]
 80007ea:	607a      	str	r2, [r7, #4]
 80007ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007f2:	f7ff ff61 	bl	80006b8 <__NVIC_GetPriorityGrouping>
 80007f6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007f8:	687a      	ldr	r2, [r7, #4]
 80007fa:	68b9      	ldr	r1, [r7, #8]
 80007fc:	6978      	ldr	r0, [r7, #20]
 80007fe:	f7ff ffb1 	bl	8000764 <NVIC_EncodePriority>
 8000802:	4602      	mov	r2, r0
 8000804:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000808:	4611      	mov	r1, r2
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff ff80 	bl	8000710 <__NVIC_SetPriority>
}
 8000810:	bf00      	nop
 8000812:	3718      	adds	r7, #24
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff ff54 	bl	80006d4 <__NVIC_EnableIRQ>
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000834:	b480      	push	{r7}
 8000836:	b087      	sub	sp, #28
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800083e:	2300      	movs	r3, #0
 8000840:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000842:	e154      	b.n	8000aee <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	2101      	movs	r1, #1
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	fa01 f303 	lsl.w	r3, r1, r3
 8000850:	4013      	ands	r3, r2
 8000852:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	2b00      	cmp	r3, #0
 8000858:	f000 8146 	beq.w	8000ae8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	f003 0303 	and.w	r3, r3, #3
 8000864:	2b01      	cmp	r3, #1
 8000866:	d005      	beq.n	8000874 <HAL_GPIO_Init+0x40>
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	f003 0303 	and.w	r3, r3, #3
 8000870:	2b02      	cmp	r3, #2
 8000872:	d130      	bne.n	80008d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	689b      	ldr	r3, [r3, #8]
 8000878:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	2203      	movs	r2, #3
 8000880:	fa02 f303 	lsl.w	r3, r2, r3
 8000884:	43db      	mvns	r3, r3
 8000886:	693a      	ldr	r2, [r7, #16]
 8000888:	4013      	ands	r3, r2
 800088a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	68da      	ldr	r2, [r3, #12]
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	fa02 f303 	lsl.w	r3, r2, r3
 8000898:	693a      	ldr	r2, [r7, #16]
 800089a:	4313      	orrs	r3, r2
 800089c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	693a      	ldr	r2, [r7, #16]
 80008a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008aa:	2201      	movs	r2, #1
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	fa02 f303 	lsl.w	r3, r2, r3
 80008b2:	43db      	mvns	r3, r3
 80008b4:	693a      	ldr	r2, [r7, #16]
 80008b6:	4013      	ands	r3, r2
 80008b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	091b      	lsrs	r3, r3, #4
 80008c0:	f003 0201 	and.w	r2, r3, #1
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ca:	693a      	ldr	r2, [r7, #16]
 80008cc:	4313      	orrs	r3, r2
 80008ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	693a      	ldr	r2, [r7, #16]
 80008d4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	f003 0303 	and.w	r3, r3, #3
 80008de:	2b03      	cmp	r3, #3
 80008e0:	d017      	beq.n	8000912 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	68db      	ldr	r3, [r3, #12]
 80008e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	2203      	movs	r2, #3
 80008ee:	fa02 f303 	lsl.w	r3, r2, r3
 80008f2:	43db      	mvns	r3, r3
 80008f4:	693a      	ldr	r2, [r7, #16]
 80008f6:	4013      	ands	r3, r2
 80008f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	689a      	ldr	r2, [r3, #8]
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	fa02 f303 	lsl.w	r3, r2, r3
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	4313      	orrs	r3, r2
 800090a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	693a      	ldr	r2, [r7, #16]
 8000910:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	f003 0303 	and.w	r3, r3, #3
 800091a:	2b02      	cmp	r3, #2
 800091c:	d123      	bne.n	8000966 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	08da      	lsrs	r2, r3, #3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	3208      	adds	r2, #8
 8000926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800092a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	f003 0307 	and.w	r3, r3, #7
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	220f      	movs	r2, #15
 8000936:	fa02 f303 	lsl.w	r3, r2, r3
 800093a:	43db      	mvns	r3, r3
 800093c:	693a      	ldr	r2, [r7, #16]
 800093e:	4013      	ands	r3, r2
 8000940:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	691a      	ldr	r2, [r3, #16]
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	f003 0307 	and.w	r3, r3, #7
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	fa02 f303 	lsl.w	r3, r2, r3
 8000952:	693a      	ldr	r2, [r7, #16]
 8000954:	4313      	orrs	r3, r2
 8000956:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	08da      	lsrs	r2, r3, #3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	3208      	adds	r2, #8
 8000960:	6939      	ldr	r1, [r7, #16]
 8000962:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	2203      	movs	r2, #3
 8000972:	fa02 f303 	lsl.w	r3, r2, r3
 8000976:	43db      	mvns	r3, r3
 8000978:	693a      	ldr	r2, [r7, #16]
 800097a:	4013      	ands	r3, r2
 800097c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	f003 0203 	and.w	r2, r3, #3
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	fa02 f303 	lsl.w	r3, r2, r3
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	4313      	orrs	r3, r2
 8000992:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	693a      	ldr	r2, [r7, #16]
 8000998:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	f000 80a0 	beq.w	8000ae8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a8:	4b58      	ldr	r3, [pc, #352]	; (8000b0c <HAL_GPIO_Init+0x2d8>)
 80009aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ac:	4a57      	ldr	r2, [pc, #348]	; (8000b0c <HAL_GPIO_Init+0x2d8>)
 80009ae:	f043 0301 	orr.w	r3, r3, #1
 80009b2:	6613      	str	r3, [r2, #96]	; 0x60
 80009b4:	4b55      	ldr	r3, [pc, #340]	; (8000b0c <HAL_GPIO_Init+0x2d8>)
 80009b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009b8:	f003 0301 	and.w	r3, r3, #1
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009c0:	4a53      	ldr	r2, [pc, #332]	; (8000b10 <HAL_GPIO_Init+0x2dc>)
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	089b      	lsrs	r3, r3, #2
 80009c6:	3302      	adds	r3, #2
 80009c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	f003 0303 	and.w	r3, r3, #3
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	220f      	movs	r2, #15
 80009d8:	fa02 f303 	lsl.w	r3, r2, r3
 80009dc:	43db      	mvns	r3, r3
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	4013      	ands	r3, r2
 80009e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80009ea:	d019      	beq.n	8000a20 <HAL_GPIO_Init+0x1ec>
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4a49      	ldr	r2, [pc, #292]	; (8000b14 <HAL_GPIO_Init+0x2e0>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d013      	beq.n	8000a1c <HAL_GPIO_Init+0x1e8>
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a48      	ldr	r2, [pc, #288]	; (8000b18 <HAL_GPIO_Init+0x2e4>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d00d      	beq.n	8000a18 <HAL_GPIO_Init+0x1e4>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4a47      	ldr	r2, [pc, #284]	; (8000b1c <HAL_GPIO_Init+0x2e8>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d007      	beq.n	8000a14 <HAL_GPIO_Init+0x1e0>
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4a46      	ldr	r2, [pc, #280]	; (8000b20 <HAL_GPIO_Init+0x2ec>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d101      	bne.n	8000a10 <HAL_GPIO_Init+0x1dc>
 8000a0c:	2304      	movs	r3, #4
 8000a0e:	e008      	b.n	8000a22 <HAL_GPIO_Init+0x1ee>
 8000a10:	2307      	movs	r3, #7
 8000a12:	e006      	b.n	8000a22 <HAL_GPIO_Init+0x1ee>
 8000a14:	2303      	movs	r3, #3
 8000a16:	e004      	b.n	8000a22 <HAL_GPIO_Init+0x1ee>
 8000a18:	2302      	movs	r3, #2
 8000a1a:	e002      	b.n	8000a22 <HAL_GPIO_Init+0x1ee>
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	e000      	b.n	8000a22 <HAL_GPIO_Init+0x1ee>
 8000a20:	2300      	movs	r3, #0
 8000a22:	697a      	ldr	r2, [r7, #20]
 8000a24:	f002 0203 	and.w	r2, r2, #3
 8000a28:	0092      	lsls	r2, r2, #2
 8000a2a:	4093      	lsls	r3, r2
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a32:	4937      	ldr	r1, [pc, #220]	; (8000b10 <HAL_GPIO_Init+0x2dc>)
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	089b      	lsrs	r3, r3, #2
 8000a38:	3302      	adds	r3, #2
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a40:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <HAL_GPIO_Init+0x2f0>)
 8000a42:	689b      	ldr	r3, [r3, #8]
 8000a44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	43db      	mvns	r3, r3
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d003      	beq.n	8000a64 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000a5c:	693a      	ldr	r2, [r7, #16]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a64:	4a2f      	ldr	r2, [pc, #188]	; (8000b24 <HAL_GPIO_Init+0x2f0>)
 8000a66:	693b      	ldr	r3, [r7, #16]
 8000a68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000a6a:	4b2e      	ldr	r3, [pc, #184]	; (8000b24 <HAL_GPIO_Init+0x2f0>)
 8000a6c:	68db      	ldr	r3, [r3, #12]
 8000a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	43db      	mvns	r3, r3
 8000a74:	693a      	ldr	r2, [r7, #16]
 8000a76:	4013      	ands	r3, r2
 8000a78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d003      	beq.n	8000a8e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a8e:	4a25      	ldr	r2, [pc, #148]	; (8000b24 <HAL_GPIO_Init+0x2f0>)
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000a94:	4b23      	ldr	r3, [pc, #140]	; (8000b24 <HAL_GPIO_Init+0x2f0>)
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	43db      	mvns	r3, r3
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d003      	beq.n	8000ab8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000ab0:	693a      	ldr	r2, [r7, #16]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ab8:	4a1a      	ldr	r2, [pc, #104]	; (8000b24 <HAL_GPIO_Init+0x2f0>)
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000abe:	4b19      	ldr	r3, [pc, #100]	; (8000b24 <HAL_GPIO_Init+0x2f0>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	43db      	mvns	r3, r3
 8000ac8:	693a      	ldr	r2, [r7, #16]
 8000aca:	4013      	ands	r3, r2
 8000acc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d003      	beq.n	8000ae2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ae2:	4a10      	ldr	r2, [pc, #64]	; (8000b24 <HAL_GPIO_Init+0x2f0>)
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	3301      	adds	r3, #1
 8000aec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	fa22 f303 	lsr.w	r3, r2, r3
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	f47f aea3 	bne.w	8000844 <HAL_GPIO_Init+0x10>
  }
}
 8000afe:	bf00      	nop
 8000b00:	bf00      	nop
 8000b02:	371c      	adds	r7, #28
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	40010000 	.word	0x40010000
 8000b14:	48000400 	.word	0x48000400
 8000b18:	48000800 	.word	0x48000800
 8000b1c:	48000c00 	.word	0x48000c00
 8000b20:	48001000 	.word	0x48001000
 8000b24:	40010400 	.word	0x40010400

08000b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	460b      	mov	r3, r1
 8000b32:	807b      	strh	r3, [r7, #2]
 8000b34:	4613      	mov	r3, r2
 8000b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b38:	787b      	ldrb	r3, [r7, #1]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d003      	beq.n	8000b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b3e:	887a      	ldrh	r2, [r7, #2]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b44:	e002      	b.n	8000b4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b46:	887a      	ldrh	r2, [r7, #2]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	460b      	mov	r3, r1
 8000b62:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	695b      	ldr	r3, [r3, #20]
 8000b68:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b6a:	887a      	ldrh	r2, [r7, #2]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	041a      	lsls	r2, r3, #16
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	43d9      	mvns	r1, r3
 8000b76:	887b      	ldrh	r3, [r7, #2]
 8000b78:	400b      	ands	r3, r1
 8000b7a:	431a      	orrs	r2, r3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	619a      	str	r2, [r3, #24]
}
 8000b80:	bf00      	nop
 8000b82:	3714      	adds	r7, #20
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000b90:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <HAL_PWREx_GetVoltageRange+0x18>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	40007000 	.word	0x40007000

08000ba8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bb6:	d130      	bne.n	8000c1a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bb8:	4b23      	ldr	r3, [pc, #140]	; (8000c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000bc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bc4:	d038      	beq.n	8000c38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bc6:	4b20      	ldr	r3, [pc, #128]	; (8000c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000bce:	4a1e      	ldr	r2, [pc, #120]	; (8000c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bd4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000bd6:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2232      	movs	r2, #50	; 0x32
 8000bdc:	fb02 f303 	mul.w	r3, r2, r3
 8000be0:	4a1b      	ldr	r2, [pc, #108]	; (8000c50 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000be2:	fba2 2303 	umull	r2, r3, r2, r3
 8000be6:	0c9b      	lsrs	r3, r3, #18
 8000be8:	3301      	adds	r3, #1
 8000bea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bec:	e002      	b.n	8000bf4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	3b01      	subs	r3, #1
 8000bf2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bf4:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bf6:	695b      	ldr	r3, [r3, #20]
 8000bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c00:	d102      	bne.n	8000c08 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d1f2      	bne.n	8000bee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c08:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c0a:	695b      	ldr	r3, [r3, #20]
 8000c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c14:	d110      	bne.n	8000c38 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000c16:	2303      	movs	r3, #3
 8000c18:	e00f      	b.n	8000c3a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c26:	d007      	beq.n	8000c38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c28:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c30:	4a05      	ldr	r2, [pc, #20]	; (8000c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c36:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3714      	adds	r7, #20
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	40007000 	.word	0x40007000
 8000c4c:	20000000 	.word	0x20000000
 8000c50:	431bde83 	.word	0x431bde83

08000c54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b088      	sub	sp, #32
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d102      	bne.n	8000c68 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	f000 bc02 	b.w	800146c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c68:	4b96      	ldr	r3, [pc, #600]	; (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	f003 030c 	and.w	r3, r3, #12
 8000c70:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c72:	4b94      	ldr	r3, [pc, #592]	; (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000c74:	68db      	ldr	r3, [r3, #12]
 8000c76:	f003 0303 	and.w	r3, r3, #3
 8000c7a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f003 0310 	and.w	r3, r3, #16
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	f000 80e4 	beq.w	8000e52 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d007      	beq.n	8000ca0 <HAL_RCC_OscConfig+0x4c>
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	2b0c      	cmp	r3, #12
 8000c94:	f040 808b 	bne.w	8000dae <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	f040 8087 	bne.w	8000dae <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ca0:	4b88      	ldr	r3, [pc, #544]	; (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f003 0302 	and.w	r3, r3, #2
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d005      	beq.n	8000cb8 <HAL_RCC_OscConfig+0x64>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d101      	bne.n	8000cb8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e3d9      	b.n	800146c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6a1a      	ldr	r2, [r3, #32]
 8000cbc:	4b81      	ldr	r3, [pc, #516]	; (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f003 0308 	and.w	r3, r3, #8
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d004      	beq.n	8000cd2 <HAL_RCC_OscConfig+0x7e>
 8000cc8:	4b7e      	ldr	r3, [pc, #504]	; (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000cd0:	e005      	b.n	8000cde <HAL_RCC_OscConfig+0x8a>
 8000cd2:	4b7c      	ldr	r3, [pc, #496]	; (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000cd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000cd8:	091b      	lsrs	r3, r3, #4
 8000cda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d223      	bcs.n	8000d2a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6a1b      	ldr	r3, [r3, #32]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f000 fda8 	bl	800183c <RCC_SetFlashLatencyFromMSIRange>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e3ba      	b.n	800146c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000cf6:	4b73      	ldr	r3, [pc, #460]	; (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a72      	ldr	r2, [pc, #456]	; (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000cfc:	f043 0308 	orr.w	r3, r3, #8
 8000d00:	6013      	str	r3, [r2, #0]
 8000d02:	4b70      	ldr	r3, [pc, #448]	; (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6a1b      	ldr	r3, [r3, #32]
 8000d0e:	496d      	ldr	r1, [pc, #436]	; (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000d10:	4313      	orrs	r3, r2
 8000d12:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d14:	4b6b      	ldr	r3, [pc, #428]	; (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	69db      	ldr	r3, [r3, #28]
 8000d20:	021b      	lsls	r3, r3, #8
 8000d22:	4968      	ldr	r1, [pc, #416]	; (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000d24:	4313      	orrs	r3, r2
 8000d26:	604b      	str	r3, [r1, #4]
 8000d28:	e025      	b.n	8000d76 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d2a:	4b66      	ldr	r3, [pc, #408]	; (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a65      	ldr	r2, [pc, #404]	; (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000d30:	f043 0308 	orr.w	r3, r3, #8
 8000d34:	6013      	str	r3, [r2, #0]
 8000d36:	4b63      	ldr	r3, [pc, #396]	; (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6a1b      	ldr	r3, [r3, #32]
 8000d42:	4960      	ldr	r1, [pc, #384]	; (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000d44:	4313      	orrs	r3, r2
 8000d46:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d48:	4b5e      	ldr	r3, [pc, #376]	; (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	69db      	ldr	r3, [r3, #28]
 8000d54:	021b      	lsls	r3, r3, #8
 8000d56:	495b      	ldr	r1, [pc, #364]	; (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d109      	bne.n	8000d76 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6a1b      	ldr	r3, [r3, #32]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 fd68 	bl	800183c <RCC_SetFlashLatencyFromMSIRange>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e37a      	b.n	800146c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000d76:	f000 fc81 	bl	800167c <HAL_RCC_GetSysClockFreq>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	4b51      	ldr	r3, [pc, #324]	; (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	091b      	lsrs	r3, r3, #4
 8000d82:	f003 030f 	and.w	r3, r3, #15
 8000d86:	4950      	ldr	r1, [pc, #320]	; (8000ec8 <HAL_RCC_OscConfig+0x274>)
 8000d88:	5ccb      	ldrb	r3, [r1, r3]
 8000d8a:	f003 031f 	and.w	r3, r3, #31
 8000d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8000d92:	4a4e      	ldr	r2, [pc, #312]	; (8000ecc <HAL_RCC_OscConfig+0x278>)
 8000d94:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000d96:	4b4e      	ldr	r3, [pc, #312]	; (8000ed0 <HAL_RCC_OscConfig+0x27c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff fb66 	bl	800046c <HAL_InitTick>
 8000da0:	4603      	mov	r3, r0
 8000da2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000da4:	7bfb      	ldrb	r3, [r7, #15]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d052      	beq.n	8000e50 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000daa:	7bfb      	ldrb	r3, [r7, #15]
 8000dac:	e35e      	b.n	800146c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	699b      	ldr	r3, [r3, #24]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d032      	beq.n	8000e1c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000db6:	4b43      	ldr	r3, [pc, #268]	; (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a42      	ldr	r2, [pc, #264]	; (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000dc2:	f7ff fc49 	bl	8000658 <HAL_GetTick>
 8000dc6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000dc8:	e008      	b.n	8000ddc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000dca:	f7ff fc45 	bl	8000658 <HAL_GetTick>
 8000dce:	4602      	mov	r2, r0
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	1ad3      	subs	r3, r2, r3
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d901      	bls.n	8000ddc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	e347      	b.n	800146c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ddc:	4b39      	ldr	r3, [pc, #228]	; (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f003 0302 	and.w	r3, r3, #2
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d0f0      	beq.n	8000dca <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000de8:	4b36      	ldr	r3, [pc, #216]	; (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a35      	ldr	r2, [pc, #212]	; (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000dee:	f043 0308 	orr.w	r3, r3, #8
 8000df2:	6013      	str	r3, [r2, #0]
 8000df4:	4b33      	ldr	r3, [pc, #204]	; (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6a1b      	ldr	r3, [r3, #32]
 8000e00:	4930      	ldr	r1, [pc, #192]	; (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000e02:	4313      	orrs	r3, r2
 8000e04:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e06:	4b2f      	ldr	r3, [pc, #188]	; (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	69db      	ldr	r3, [r3, #28]
 8000e12:	021b      	lsls	r3, r3, #8
 8000e14:	492b      	ldr	r1, [pc, #172]	; (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000e16:	4313      	orrs	r3, r2
 8000e18:	604b      	str	r3, [r1, #4]
 8000e1a:	e01a      	b.n	8000e52 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000e1c:	4b29      	ldr	r3, [pc, #164]	; (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a28      	ldr	r2, [pc, #160]	; (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000e22:	f023 0301 	bic.w	r3, r3, #1
 8000e26:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e28:	f7ff fc16 	bl	8000658 <HAL_GetTick>
 8000e2c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e2e:	e008      	b.n	8000e42 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e30:	f7ff fc12 	bl	8000658 <HAL_GetTick>
 8000e34:	4602      	mov	r2, r0
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d901      	bls.n	8000e42 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	e314      	b.n	800146c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e42:	4b20      	ldr	r3, [pc, #128]	; (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d1f0      	bne.n	8000e30 <HAL_RCC_OscConfig+0x1dc>
 8000e4e:	e000      	b.n	8000e52 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e50:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d073      	beq.n	8000f46 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	2b08      	cmp	r3, #8
 8000e62:	d005      	beq.n	8000e70 <HAL_RCC_OscConfig+0x21c>
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	2b0c      	cmp	r3, #12
 8000e68:	d10e      	bne.n	8000e88 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	2b03      	cmp	r3, #3
 8000e6e:	d10b      	bne.n	8000e88 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e70:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d063      	beq.n	8000f44 <HAL_RCC_OscConfig+0x2f0>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d15f      	bne.n	8000f44 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000e84:	2301      	movs	r3, #1
 8000e86:	e2f1      	b.n	800146c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e90:	d106      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x24c>
 8000e92:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a0b      	ldr	r2, [pc, #44]	; (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e9c:	6013      	str	r3, [r2, #0]
 8000e9e:	e025      	b.n	8000eec <HAL_RCC_OscConfig+0x298>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ea8:	d114      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x280>
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a05      	ldr	r2, [pc, #20]	; (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000eb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eb4:	6013      	str	r3, [r2, #0]
 8000eb6:	4b03      	ldr	r3, [pc, #12]	; (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a02      	ldr	r2, [pc, #8]	; (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ec0:	6013      	str	r3, [r2, #0]
 8000ec2:	e013      	b.n	8000eec <HAL_RCC_OscConfig+0x298>
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	08004c30 	.word	0x08004c30
 8000ecc:	20000000 	.word	0x20000000
 8000ed0:	20000004 	.word	0x20000004
 8000ed4:	4ba0      	ldr	r3, [pc, #640]	; (8001158 <HAL_RCC_OscConfig+0x504>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a9f      	ldr	r2, [pc, #636]	; (8001158 <HAL_RCC_OscConfig+0x504>)
 8000eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ede:	6013      	str	r3, [r2, #0]
 8000ee0:	4b9d      	ldr	r3, [pc, #628]	; (8001158 <HAL_RCC_OscConfig+0x504>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a9c      	ldr	r2, [pc, #624]	; (8001158 <HAL_RCC_OscConfig+0x504>)
 8000ee6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d013      	beq.n	8000f1c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ef4:	f7ff fbb0 	bl	8000658 <HAL_GetTick>
 8000ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000efa:	e008      	b.n	8000f0e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000efc:	f7ff fbac 	bl	8000658 <HAL_GetTick>
 8000f00:	4602      	mov	r2, r0
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	2b64      	cmp	r3, #100	; 0x64
 8000f08:	d901      	bls.n	8000f0e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e2ae      	b.n	800146c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f0e:	4b92      	ldr	r3, [pc, #584]	; (8001158 <HAL_RCC_OscConfig+0x504>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d0f0      	beq.n	8000efc <HAL_RCC_OscConfig+0x2a8>
 8000f1a:	e014      	b.n	8000f46 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f1c:	f7ff fb9c 	bl	8000658 <HAL_GetTick>
 8000f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f22:	e008      	b.n	8000f36 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f24:	f7ff fb98 	bl	8000658 <HAL_GetTick>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	2b64      	cmp	r3, #100	; 0x64
 8000f30:	d901      	bls.n	8000f36 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000f32:	2303      	movs	r3, #3
 8000f34:	e29a      	b.n	800146c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f36:	4b88      	ldr	r3, [pc, #544]	; (8001158 <HAL_RCC_OscConfig+0x504>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d1f0      	bne.n	8000f24 <HAL_RCC_OscConfig+0x2d0>
 8000f42:	e000      	b.n	8000f46 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d060      	beq.n	8001014 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	2b04      	cmp	r3, #4
 8000f56:	d005      	beq.n	8000f64 <HAL_RCC_OscConfig+0x310>
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	2b0c      	cmp	r3, #12
 8000f5c:	d119      	bne.n	8000f92 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d116      	bne.n	8000f92 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f64:	4b7c      	ldr	r3, [pc, #496]	; (8001158 <HAL_RCC_OscConfig+0x504>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d005      	beq.n	8000f7c <HAL_RCC_OscConfig+0x328>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d101      	bne.n	8000f7c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e277      	b.n	800146c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f7c:	4b76      	ldr	r3, [pc, #472]	; (8001158 <HAL_RCC_OscConfig+0x504>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	691b      	ldr	r3, [r3, #16]
 8000f88:	061b      	lsls	r3, r3, #24
 8000f8a:	4973      	ldr	r1, [pc, #460]	; (8001158 <HAL_RCC_OscConfig+0x504>)
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f90:	e040      	b.n	8001014 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	68db      	ldr	r3, [r3, #12]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d023      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f9a:	4b6f      	ldr	r3, [pc, #444]	; (8001158 <HAL_RCC_OscConfig+0x504>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a6e      	ldr	r2, [pc, #440]	; (8001158 <HAL_RCC_OscConfig+0x504>)
 8000fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fa6:	f7ff fb57 	bl	8000658 <HAL_GetTick>
 8000faa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fac:	e008      	b.n	8000fc0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fae:	f7ff fb53 	bl	8000658 <HAL_GetTick>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d901      	bls.n	8000fc0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	e255      	b.n	800146c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fc0:	4b65      	ldr	r3, [pc, #404]	; (8001158 <HAL_RCC_OscConfig+0x504>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d0f0      	beq.n	8000fae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fcc:	4b62      	ldr	r3, [pc, #392]	; (8001158 <HAL_RCC_OscConfig+0x504>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	691b      	ldr	r3, [r3, #16]
 8000fd8:	061b      	lsls	r3, r3, #24
 8000fda:	495f      	ldr	r1, [pc, #380]	; (8001158 <HAL_RCC_OscConfig+0x504>)
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	604b      	str	r3, [r1, #4]
 8000fe0:	e018      	b.n	8001014 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fe2:	4b5d      	ldr	r3, [pc, #372]	; (8001158 <HAL_RCC_OscConfig+0x504>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a5c      	ldr	r2, [pc, #368]	; (8001158 <HAL_RCC_OscConfig+0x504>)
 8000fe8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fee:	f7ff fb33 	bl	8000658 <HAL_GetTick>
 8000ff2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ff4:	e008      	b.n	8001008 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ff6:	f7ff fb2f 	bl	8000658 <HAL_GetTick>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	2b02      	cmp	r3, #2
 8001002:	d901      	bls.n	8001008 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001004:	2303      	movs	r3, #3
 8001006:	e231      	b.n	800146c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001008:	4b53      	ldr	r3, [pc, #332]	; (8001158 <HAL_RCC_OscConfig+0x504>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001010:	2b00      	cmp	r3, #0
 8001012:	d1f0      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f003 0308 	and.w	r3, r3, #8
 800101c:	2b00      	cmp	r3, #0
 800101e:	d03c      	beq.n	800109a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	695b      	ldr	r3, [r3, #20]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d01c      	beq.n	8001062 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001028:	4b4b      	ldr	r3, [pc, #300]	; (8001158 <HAL_RCC_OscConfig+0x504>)
 800102a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800102e:	4a4a      	ldr	r2, [pc, #296]	; (8001158 <HAL_RCC_OscConfig+0x504>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001038:	f7ff fb0e 	bl	8000658 <HAL_GetTick>
 800103c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800103e:	e008      	b.n	8001052 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001040:	f7ff fb0a 	bl	8000658 <HAL_GetTick>
 8001044:	4602      	mov	r2, r0
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	2b02      	cmp	r3, #2
 800104c:	d901      	bls.n	8001052 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800104e:	2303      	movs	r3, #3
 8001050:	e20c      	b.n	800146c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001052:	4b41      	ldr	r3, [pc, #260]	; (8001158 <HAL_RCC_OscConfig+0x504>)
 8001054:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d0ef      	beq.n	8001040 <HAL_RCC_OscConfig+0x3ec>
 8001060:	e01b      	b.n	800109a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001062:	4b3d      	ldr	r3, [pc, #244]	; (8001158 <HAL_RCC_OscConfig+0x504>)
 8001064:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001068:	4a3b      	ldr	r2, [pc, #236]	; (8001158 <HAL_RCC_OscConfig+0x504>)
 800106a:	f023 0301 	bic.w	r3, r3, #1
 800106e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001072:	f7ff faf1 	bl	8000658 <HAL_GetTick>
 8001076:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001078:	e008      	b.n	800108c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800107a:	f7ff faed 	bl	8000658 <HAL_GetTick>
 800107e:	4602      	mov	r2, r0
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	2b02      	cmp	r3, #2
 8001086:	d901      	bls.n	800108c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001088:	2303      	movs	r3, #3
 800108a:	e1ef      	b.n	800146c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800108c:	4b32      	ldr	r3, [pc, #200]	; (8001158 <HAL_RCC_OscConfig+0x504>)
 800108e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d1ef      	bne.n	800107a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0304 	and.w	r3, r3, #4
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f000 80a6 	beq.w	80011f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010a8:	2300      	movs	r3, #0
 80010aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80010ac:	4b2a      	ldr	r3, [pc, #168]	; (8001158 <HAL_RCC_OscConfig+0x504>)
 80010ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d10d      	bne.n	80010d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010b8:	4b27      	ldr	r3, [pc, #156]	; (8001158 <HAL_RCC_OscConfig+0x504>)
 80010ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010bc:	4a26      	ldr	r2, [pc, #152]	; (8001158 <HAL_RCC_OscConfig+0x504>)
 80010be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c2:	6593      	str	r3, [r2, #88]	; 0x58
 80010c4:	4b24      	ldr	r3, [pc, #144]	; (8001158 <HAL_RCC_OscConfig+0x504>)
 80010c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010cc:	60bb      	str	r3, [r7, #8]
 80010ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010d0:	2301      	movs	r3, #1
 80010d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010d4:	4b21      	ldr	r3, [pc, #132]	; (800115c <HAL_RCC_OscConfig+0x508>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d118      	bne.n	8001112 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010e0:	4b1e      	ldr	r3, [pc, #120]	; (800115c <HAL_RCC_OscConfig+0x508>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a1d      	ldr	r2, [pc, #116]	; (800115c <HAL_RCC_OscConfig+0x508>)
 80010e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010ec:	f7ff fab4 	bl	8000658 <HAL_GetTick>
 80010f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010f2:	e008      	b.n	8001106 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010f4:	f7ff fab0 	bl	8000658 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d901      	bls.n	8001106 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e1b2      	b.n	800146c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001106:	4b15      	ldr	r3, [pc, #84]	; (800115c <HAL_RCC_OscConfig+0x508>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800110e:	2b00      	cmp	r3, #0
 8001110:	d0f0      	beq.n	80010f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d108      	bne.n	800112c <HAL_RCC_OscConfig+0x4d8>
 800111a:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <HAL_RCC_OscConfig+0x504>)
 800111c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001120:	4a0d      	ldr	r2, [pc, #52]	; (8001158 <HAL_RCC_OscConfig+0x504>)
 8001122:	f043 0301 	orr.w	r3, r3, #1
 8001126:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800112a:	e029      	b.n	8001180 <HAL_RCC_OscConfig+0x52c>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	2b05      	cmp	r3, #5
 8001132:	d115      	bne.n	8001160 <HAL_RCC_OscConfig+0x50c>
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <HAL_RCC_OscConfig+0x504>)
 8001136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800113a:	4a07      	ldr	r2, [pc, #28]	; (8001158 <HAL_RCC_OscConfig+0x504>)
 800113c:	f043 0304 	orr.w	r3, r3, #4
 8001140:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001144:	4b04      	ldr	r3, [pc, #16]	; (8001158 <HAL_RCC_OscConfig+0x504>)
 8001146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800114a:	4a03      	ldr	r2, [pc, #12]	; (8001158 <HAL_RCC_OscConfig+0x504>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001154:	e014      	b.n	8001180 <HAL_RCC_OscConfig+0x52c>
 8001156:	bf00      	nop
 8001158:	40021000 	.word	0x40021000
 800115c:	40007000 	.word	0x40007000
 8001160:	4b9a      	ldr	r3, [pc, #616]	; (80013cc <HAL_RCC_OscConfig+0x778>)
 8001162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001166:	4a99      	ldr	r2, [pc, #612]	; (80013cc <HAL_RCC_OscConfig+0x778>)
 8001168:	f023 0301 	bic.w	r3, r3, #1
 800116c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001170:	4b96      	ldr	r3, [pc, #600]	; (80013cc <HAL_RCC_OscConfig+0x778>)
 8001172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001176:	4a95      	ldr	r2, [pc, #596]	; (80013cc <HAL_RCC_OscConfig+0x778>)
 8001178:	f023 0304 	bic.w	r3, r3, #4
 800117c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d016      	beq.n	80011b6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001188:	f7ff fa66 	bl	8000658 <HAL_GetTick>
 800118c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800118e:	e00a      	b.n	80011a6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001190:	f7ff fa62 	bl	8000658 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	f241 3288 	movw	r2, #5000	; 0x1388
 800119e:	4293      	cmp	r3, r2
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e162      	b.n	800146c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011a6:	4b89      	ldr	r3, [pc, #548]	; (80013cc <HAL_RCC_OscConfig+0x778>)
 80011a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d0ed      	beq.n	8001190 <HAL_RCC_OscConfig+0x53c>
 80011b4:	e015      	b.n	80011e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011b6:	f7ff fa4f 	bl	8000658 <HAL_GetTick>
 80011ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011bc:	e00a      	b.n	80011d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011be:	f7ff fa4b 	bl	8000658 <HAL_GetTick>
 80011c2:	4602      	mov	r2, r0
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d901      	bls.n	80011d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e14b      	b.n	800146c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011d4:	4b7d      	ldr	r3, [pc, #500]	; (80013cc <HAL_RCC_OscConfig+0x778>)
 80011d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d1ed      	bne.n	80011be <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80011e2:	7ffb      	ldrb	r3, [r7, #31]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d105      	bne.n	80011f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011e8:	4b78      	ldr	r3, [pc, #480]	; (80013cc <HAL_RCC_OscConfig+0x778>)
 80011ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ec:	4a77      	ldr	r2, [pc, #476]	; (80013cc <HAL_RCC_OscConfig+0x778>)
 80011ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011f2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0320 	and.w	r3, r3, #32
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d03c      	beq.n	800127a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001204:	2b00      	cmp	r3, #0
 8001206:	d01c      	beq.n	8001242 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001208:	4b70      	ldr	r3, [pc, #448]	; (80013cc <HAL_RCC_OscConfig+0x778>)
 800120a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800120e:	4a6f      	ldr	r2, [pc, #444]	; (80013cc <HAL_RCC_OscConfig+0x778>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001218:	f7ff fa1e 	bl	8000658 <HAL_GetTick>
 800121c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800121e:	e008      	b.n	8001232 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001220:	f7ff fa1a 	bl	8000658 <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b02      	cmp	r3, #2
 800122c:	d901      	bls.n	8001232 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e11c      	b.n	800146c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001232:	4b66      	ldr	r3, [pc, #408]	; (80013cc <HAL_RCC_OscConfig+0x778>)
 8001234:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d0ef      	beq.n	8001220 <HAL_RCC_OscConfig+0x5cc>
 8001240:	e01b      	b.n	800127a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001242:	4b62      	ldr	r3, [pc, #392]	; (80013cc <HAL_RCC_OscConfig+0x778>)
 8001244:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001248:	4a60      	ldr	r2, [pc, #384]	; (80013cc <HAL_RCC_OscConfig+0x778>)
 800124a:	f023 0301 	bic.w	r3, r3, #1
 800124e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001252:	f7ff fa01 	bl	8000658 <HAL_GetTick>
 8001256:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001258:	e008      	b.n	800126c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800125a:	f7ff f9fd 	bl	8000658 <HAL_GetTick>
 800125e:	4602      	mov	r2, r0
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d901      	bls.n	800126c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001268:	2303      	movs	r3, #3
 800126a:	e0ff      	b.n	800146c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800126c:	4b57      	ldr	r3, [pc, #348]	; (80013cc <HAL_RCC_OscConfig+0x778>)
 800126e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d1ef      	bne.n	800125a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800127e:	2b00      	cmp	r3, #0
 8001280:	f000 80f3 	beq.w	800146a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001288:	2b02      	cmp	r3, #2
 800128a:	f040 80c9 	bne.w	8001420 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800128e:	4b4f      	ldr	r3, [pc, #316]	; (80013cc <HAL_RCC_OscConfig+0x778>)
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	f003 0203 	and.w	r2, r3, #3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800129e:	429a      	cmp	r2, r3
 80012a0:	d12c      	bne.n	80012fc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ac:	3b01      	subs	r3, #1
 80012ae:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d123      	bne.n	80012fc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012be:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d11b      	bne.n	80012fc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ce:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d113      	bne.n	80012fc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012de:	085b      	lsrs	r3, r3, #1
 80012e0:	3b01      	subs	r3, #1
 80012e2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d109      	bne.n	80012fc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	085b      	lsrs	r3, r3, #1
 80012f4:	3b01      	subs	r3, #1
 80012f6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d06b      	beq.n	80013d4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	2b0c      	cmp	r3, #12
 8001300:	d062      	beq.n	80013c8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001302:	4b32      	ldr	r3, [pc, #200]	; (80013cc <HAL_RCC_OscConfig+0x778>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e0ac      	b.n	800146c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001312:	4b2e      	ldr	r3, [pc, #184]	; (80013cc <HAL_RCC_OscConfig+0x778>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a2d      	ldr	r2, [pc, #180]	; (80013cc <HAL_RCC_OscConfig+0x778>)
 8001318:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800131c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800131e:	f7ff f99b 	bl	8000658 <HAL_GetTick>
 8001322:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001324:	e008      	b.n	8001338 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001326:	f7ff f997 	bl	8000658 <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e099      	b.n	800146c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001338:	4b24      	ldr	r3, [pc, #144]	; (80013cc <HAL_RCC_OscConfig+0x778>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1f0      	bne.n	8001326 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001344:	4b21      	ldr	r3, [pc, #132]	; (80013cc <HAL_RCC_OscConfig+0x778>)
 8001346:	68da      	ldr	r2, [r3, #12]
 8001348:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <HAL_RCC_OscConfig+0x77c>)
 800134a:	4013      	ands	r3, r2
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001354:	3a01      	subs	r2, #1
 8001356:	0112      	lsls	r2, r2, #4
 8001358:	4311      	orrs	r1, r2
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800135e:	0212      	lsls	r2, r2, #8
 8001360:	4311      	orrs	r1, r2
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001366:	0852      	lsrs	r2, r2, #1
 8001368:	3a01      	subs	r2, #1
 800136a:	0552      	lsls	r2, r2, #21
 800136c:	4311      	orrs	r1, r2
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001372:	0852      	lsrs	r2, r2, #1
 8001374:	3a01      	subs	r2, #1
 8001376:	0652      	lsls	r2, r2, #25
 8001378:	4311      	orrs	r1, r2
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800137e:	06d2      	lsls	r2, r2, #27
 8001380:	430a      	orrs	r2, r1
 8001382:	4912      	ldr	r1, [pc, #72]	; (80013cc <HAL_RCC_OscConfig+0x778>)
 8001384:	4313      	orrs	r3, r2
 8001386:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001388:	4b10      	ldr	r3, [pc, #64]	; (80013cc <HAL_RCC_OscConfig+0x778>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a0f      	ldr	r2, [pc, #60]	; (80013cc <HAL_RCC_OscConfig+0x778>)
 800138e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001392:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001394:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <HAL_RCC_OscConfig+0x778>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	4a0c      	ldr	r2, [pc, #48]	; (80013cc <HAL_RCC_OscConfig+0x778>)
 800139a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800139e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80013a0:	f7ff f95a 	bl	8000658 <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013a8:	f7ff f956 	bl	8000658 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e058      	b.n	800146c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013ba:	4b04      	ldr	r3, [pc, #16]	; (80013cc <HAL_RCC_OscConfig+0x778>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d0f0      	beq.n	80013a8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013c6:	e050      	b.n	800146a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e04f      	b.n	800146c <HAL_RCC_OscConfig+0x818>
 80013cc:	40021000 	.word	0x40021000
 80013d0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013d4:	4b27      	ldr	r3, [pc, #156]	; (8001474 <HAL_RCC_OscConfig+0x820>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d144      	bne.n	800146a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80013e0:	4b24      	ldr	r3, [pc, #144]	; (8001474 <HAL_RCC_OscConfig+0x820>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a23      	ldr	r2, [pc, #140]	; (8001474 <HAL_RCC_OscConfig+0x820>)
 80013e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013ec:	4b21      	ldr	r3, [pc, #132]	; (8001474 <HAL_RCC_OscConfig+0x820>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	4a20      	ldr	r2, [pc, #128]	; (8001474 <HAL_RCC_OscConfig+0x820>)
 80013f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80013f8:	f7ff f92e 	bl	8000658 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001400:	f7ff f92a 	bl	8000658 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e02c      	b.n	800146c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001412:	4b18      	ldr	r3, [pc, #96]	; (8001474 <HAL_RCC_OscConfig+0x820>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d0f0      	beq.n	8001400 <HAL_RCC_OscConfig+0x7ac>
 800141e:	e024      	b.n	800146a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	2b0c      	cmp	r3, #12
 8001424:	d01f      	beq.n	8001466 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001426:	4b13      	ldr	r3, [pc, #76]	; (8001474 <HAL_RCC_OscConfig+0x820>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a12      	ldr	r2, [pc, #72]	; (8001474 <HAL_RCC_OscConfig+0x820>)
 800142c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001430:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001432:	f7ff f911 	bl	8000658 <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800143a:	f7ff f90d 	bl	8000658 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e00f      	b.n	800146c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800144c:	4b09      	ldr	r3, [pc, #36]	; (8001474 <HAL_RCC_OscConfig+0x820>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d1f0      	bne.n	800143a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <HAL_RCC_OscConfig+0x820>)
 800145a:	68da      	ldr	r2, [r3, #12]
 800145c:	4905      	ldr	r1, [pc, #20]	; (8001474 <HAL_RCC_OscConfig+0x820>)
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_RCC_OscConfig+0x824>)
 8001460:	4013      	ands	r3, r2
 8001462:	60cb      	str	r3, [r1, #12]
 8001464:	e001      	b.n	800146a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e000      	b.n	800146c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	3720      	adds	r7, #32
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40021000 	.word	0x40021000
 8001478:	feeefffc 	.word	0xfeeefffc

0800147c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e0e7      	b.n	8001660 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001490:	4b75      	ldr	r3, [pc, #468]	; (8001668 <HAL_RCC_ClockConfig+0x1ec>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0307 	and.w	r3, r3, #7
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	429a      	cmp	r2, r3
 800149c:	d910      	bls.n	80014c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800149e:	4b72      	ldr	r3, [pc, #456]	; (8001668 <HAL_RCC_ClockConfig+0x1ec>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f023 0207 	bic.w	r2, r3, #7
 80014a6:	4970      	ldr	r1, [pc, #448]	; (8001668 <HAL_RCC_ClockConfig+0x1ec>)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ae:	4b6e      	ldr	r3, [pc, #440]	; (8001668 <HAL_RCC_ClockConfig+0x1ec>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d001      	beq.n	80014c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e0cf      	b.n	8001660 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d010      	beq.n	80014ee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	4b66      	ldr	r3, [pc, #408]	; (800166c <HAL_RCC_ClockConfig+0x1f0>)
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014d8:	429a      	cmp	r2, r3
 80014da:	d908      	bls.n	80014ee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014dc:	4b63      	ldr	r3, [pc, #396]	; (800166c <HAL_RCC_ClockConfig+0x1f0>)
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	4960      	ldr	r1, [pc, #384]	; (800166c <HAL_RCC_ClockConfig+0x1f0>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d04c      	beq.n	8001594 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	2b03      	cmp	r3, #3
 8001500:	d107      	bne.n	8001512 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001502:	4b5a      	ldr	r3, [pc, #360]	; (800166c <HAL_RCC_ClockConfig+0x1f0>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d121      	bne.n	8001552 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e0a6      	b.n	8001660 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b02      	cmp	r3, #2
 8001518:	d107      	bne.n	800152a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800151a:	4b54      	ldr	r3, [pc, #336]	; (800166c <HAL_RCC_ClockConfig+0x1f0>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d115      	bne.n	8001552 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e09a      	b.n	8001660 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d107      	bne.n	8001542 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001532:	4b4e      	ldr	r3, [pc, #312]	; (800166c <HAL_RCC_ClockConfig+0x1f0>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d109      	bne.n	8001552 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e08e      	b.n	8001660 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001542:	4b4a      	ldr	r3, [pc, #296]	; (800166c <HAL_RCC_ClockConfig+0x1f0>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e086      	b.n	8001660 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001552:	4b46      	ldr	r3, [pc, #280]	; (800166c <HAL_RCC_ClockConfig+0x1f0>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f023 0203 	bic.w	r2, r3, #3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	4943      	ldr	r1, [pc, #268]	; (800166c <HAL_RCC_ClockConfig+0x1f0>)
 8001560:	4313      	orrs	r3, r2
 8001562:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001564:	f7ff f878 	bl	8000658 <HAL_GetTick>
 8001568:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800156a:	e00a      	b.n	8001582 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800156c:	f7ff f874 	bl	8000658 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	f241 3288 	movw	r2, #5000	; 0x1388
 800157a:	4293      	cmp	r3, r2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e06e      	b.n	8001660 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001582:	4b3a      	ldr	r3, [pc, #232]	; (800166c <HAL_RCC_ClockConfig+0x1f0>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f003 020c 	and.w	r2, r3, #12
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	429a      	cmp	r2, r3
 8001592:	d1eb      	bne.n	800156c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d010      	beq.n	80015c2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689a      	ldr	r2, [r3, #8]
 80015a4:	4b31      	ldr	r3, [pc, #196]	; (800166c <HAL_RCC_ClockConfig+0x1f0>)
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d208      	bcs.n	80015c2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015b0:	4b2e      	ldr	r3, [pc, #184]	; (800166c <HAL_RCC_ClockConfig+0x1f0>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	492b      	ldr	r1, [pc, #172]	; (800166c <HAL_RCC_ClockConfig+0x1f0>)
 80015be:	4313      	orrs	r3, r2
 80015c0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015c2:	4b29      	ldr	r3, [pc, #164]	; (8001668 <HAL_RCC_ClockConfig+0x1ec>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d210      	bcs.n	80015f2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015d0:	4b25      	ldr	r3, [pc, #148]	; (8001668 <HAL_RCC_ClockConfig+0x1ec>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f023 0207 	bic.w	r2, r3, #7
 80015d8:	4923      	ldr	r1, [pc, #140]	; (8001668 <HAL_RCC_ClockConfig+0x1ec>)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	4313      	orrs	r3, r2
 80015de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015e0:	4b21      	ldr	r3, [pc, #132]	; (8001668 <HAL_RCC_ClockConfig+0x1ec>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0307 	and.w	r3, r3, #7
 80015e8:	683a      	ldr	r2, [r7, #0]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d001      	beq.n	80015f2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e036      	b.n	8001660 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0304 	and.w	r3, r3, #4
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d008      	beq.n	8001610 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015fe:	4b1b      	ldr	r3, [pc, #108]	; (800166c <HAL_RCC_ClockConfig+0x1f0>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	4918      	ldr	r1, [pc, #96]	; (800166c <HAL_RCC_ClockConfig+0x1f0>)
 800160c:	4313      	orrs	r3, r2
 800160e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0308 	and.w	r3, r3, #8
 8001618:	2b00      	cmp	r3, #0
 800161a:	d009      	beq.n	8001630 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800161c:	4b13      	ldr	r3, [pc, #76]	; (800166c <HAL_RCC_ClockConfig+0x1f0>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	4910      	ldr	r1, [pc, #64]	; (800166c <HAL_RCC_ClockConfig+0x1f0>)
 800162c:	4313      	orrs	r3, r2
 800162e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001630:	f000 f824 	bl	800167c <HAL_RCC_GetSysClockFreq>
 8001634:	4602      	mov	r2, r0
 8001636:	4b0d      	ldr	r3, [pc, #52]	; (800166c <HAL_RCC_ClockConfig+0x1f0>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	091b      	lsrs	r3, r3, #4
 800163c:	f003 030f 	and.w	r3, r3, #15
 8001640:	490b      	ldr	r1, [pc, #44]	; (8001670 <HAL_RCC_ClockConfig+0x1f4>)
 8001642:	5ccb      	ldrb	r3, [r1, r3]
 8001644:	f003 031f 	and.w	r3, r3, #31
 8001648:	fa22 f303 	lsr.w	r3, r2, r3
 800164c:	4a09      	ldr	r2, [pc, #36]	; (8001674 <HAL_RCC_ClockConfig+0x1f8>)
 800164e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001650:	4b09      	ldr	r3, [pc, #36]	; (8001678 <HAL_RCC_ClockConfig+0x1fc>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe ff09 	bl	800046c <HAL_InitTick>
 800165a:	4603      	mov	r3, r0
 800165c:	72fb      	strb	r3, [r7, #11]

  return status;
 800165e:	7afb      	ldrb	r3, [r7, #11]
}
 8001660:	4618      	mov	r0, r3
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40022000 	.word	0x40022000
 800166c:	40021000 	.word	0x40021000
 8001670:	08004c30 	.word	0x08004c30
 8001674:	20000000 	.word	0x20000000
 8001678:	20000004 	.word	0x20000004

0800167c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800167c:	b480      	push	{r7}
 800167e:	b089      	sub	sp, #36	; 0x24
 8001680:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001682:	2300      	movs	r3, #0
 8001684:	61fb      	str	r3, [r7, #28]
 8001686:	2300      	movs	r3, #0
 8001688:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800168a:	4b3e      	ldr	r3, [pc, #248]	; (8001784 <HAL_RCC_GetSysClockFreq+0x108>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 030c 	and.w	r3, r3, #12
 8001692:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001694:	4b3b      	ldr	r3, [pc, #236]	; (8001784 <HAL_RCC_GetSysClockFreq+0x108>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d005      	beq.n	80016b0 <HAL_RCC_GetSysClockFreq+0x34>
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	2b0c      	cmp	r3, #12
 80016a8:	d121      	bne.n	80016ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d11e      	bne.n	80016ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80016b0:	4b34      	ldr	r3, [pc, #208]	; (8001784 <HAL_RCC_GetSysClockFreq+0x108>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0308 	and.w	r3, r3, #8
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d107      	bne.n	80016cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80016bc:	4b31      	ldr	r3, [pc, #196]	; (8001784 <HAL_RCC_GetSysClockFreq+0x108>)
 80016be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016c2:	0a1b      	lsrs	r3, r3, #8
 80016c4:	f003 030f 	and.w	r3, r3, #15
 80016c8:	61fb      	str	r3, [r7, #28]
 80016ca:	e005      	b.n	80016d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80016cc:	4b2d      	ldr	r3, [pc, #180]	; (8001784 <HAL_RCC_GetSysClockFreq+0x108>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	091b      	lsrs	r3, r3, #4
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80016d8:	4a2b      	ldr	r2, [pc, #172]	; (8001788 <HAL_RCC_GetSysClockFreq+0x10c>)
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d10d      	bne.n	8001704 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016ec:	e00a      	b.n	8001704 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	2b04      	cmp	r3, #4
 80016f2:	d102      	bne.n	80016fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80016f4:	4b25      	ldr	r3, [pc, #148]	; (800178c <HAL_RCC_GetSysClockFreq+0x110>)
 80016f6:	61bb      	str	r3, [r7, #24]
 80016f8:	e004      	b.n	8001704 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	2b08      	cmp	r3, #8
 80016fe:	d101      	bne.n	8001704 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001700:	4b23      	ldr	r3, [pc, #140]	; (8001790 <HAL_RCC_GetSysClockFreq+0x114>)
 8001702:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	2b0c      	cmp	r3, #12
 8001708:	d134      	bne.n	8001774 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800170a:	4b1e      	ldr	r3, [pc, #120]	; (8001784 <HAL_RCC_GetSysClockFreq+0x108>)
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	f003 0303 	and.w	r3, r3, #3
 8001712:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	2b02      	cmp	r3, #2
 8001718:	d003      	beq.n	8001722 <HAL_RCC_GetSysClockFreq+0xa6>
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	2b03      	cmp	r3, #3
 800171e:	d003      	beq.n	8001728 <HAL_RCC_GetSysClockFreq+0xac>
 8001720:	e005      	b.n	800172e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001722:	4b1a      	ldr	r3, [pc, #104]	; (800178c <HAL_RCC_GetSysClockFreq+0x110>)
 8001724:	617b      	str	r3, [r7, #20]
      break;
 8001726:	e005      	b.n	8001734 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001728:	4b19      	ldr	r3, [pc, #100]	; (8001790 <HAL_RCC_GetSysClockFreq+0x114>)
 800172a:	617b      	str	r3, [r7, #20]
      break;
 800172c:	e002      	b.n	8001734 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	617b      	str	r3, [r7, #20]
      break;
 8001732:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001734:	4b13      	ldr	r3, [pc, #76]	; (8001784 <HAL_RCC_GetSysClockFreq+0x108>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	091b      	lsrs	r3, r3, #4
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	3301      	adds	r3, #1
 8001740:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001742:	4b10      	ldr	r3, [pc, #64]	; (8001784 <HAL_RCC_GetSysClockFreq+0x108>)
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	0a1b      	lsrs	r3, r3, #8
 8001748:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800174c:	697a      	ldr	r2, [r7, #20]
 800174e:	fb03 f202 	mul.w	r2, r3, r2
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	fbb2 f3f3 	udiv	r3, r2, r3
 8001758:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800175a:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <HAL_RCC_GetSysClockFreq+0x108>)
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	0e5b      	lsrs	r3, r3, #25
 8001760:	f003 0303 	and.w	r3, r3, #3
 8001764:	3301      	adds	r3, #1
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001772:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001774:	69bb      	ldr	r3, [r7, #24]
}
 8001776:	4618      	mov	r0, r3
 8001778:	3724      	adds	r7, #36	; 0x24
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	40021000 	.word	0x40021000
 8001788:	08004c48 	.word	0x08004c48
 800178c:	00f42400 	.word	0x00f42400
 8001790:	007a1200 	.word	0x007a1200

08001794 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001798:	4b03      	ldr	r3, [pc, #12]	; (80017a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800179a:	681b      	ldr	r3, [r3, #0]
}
 800179c:	4618      	mov	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	20000000 	.word	0x20000000

080017ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80017b0:	f7ff fff0 	bl	8001794 <HAL_RCC_GetHCLKFreq>
 80017b4:	4602      	mov	r2, r0
 80017b6:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	0adb      	lsrs	r3, r3, #11
 80017bc:	f003 0307 	and.w	r3, r3, #7
 80017c0:	4904      	ldr	r1, [pc, #16]	; (80017d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80017c2:	5ccb      	ldrb	r3, [r1, r3]
 80017c4:	f003 031f 	and.w	r3, r3, #31
 80017c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40021000 	.word	0x40021000
 80017d4:	08004c40 	.word	0x08004c40

080017d8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	220f      	movs	r2, #15
 80017e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80017e8:	4b12      	ldr	r3, [pc, #72]	; (8001834 <HAL_RCC_GetClockConfig+0x5c>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f003 0203 	and.w	r2, r3, #3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80017f4:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <HAL_RCC_GetClockConfig+0x5c>)
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001800:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <HAL_RCC_GetClockConfig+0x5c>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800180c:	4b09      	ldr	r3, [pc, #36]	; (8001834 <HAL_RCC_GetClockConfig+0x5c>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	08db      	lsrs	r3, r3, #3
 8001812:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800181a:	4b07      	ldr	r3, [pc, #28]	; (8001838 <HAL_RCC_GetClockConfig+0x60>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0207 	and.w	r2, r3, #7
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	601a      	str	r2, [r3, #0]
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	40021000 	.word	0x40021000
 8001838:	40022000 	.word	0x40022000

0800183c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001844:	2300      	movs	r3, #0
 8001846:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001848:	4b2a      	ldr	r3, [pc, #168]	; (80018f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800184a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d003      	beq.n	800185c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001854:	f7ff f99a 	bl	8000b8c <HAL_PWREx_GetVoltageRange>
 8001858:	6178      	str	r0, [r7, #20]
 800185a:	e014      	b.n	8001886 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800185c:	4b25      	ldr	r3, [pc, #148]	; (80018f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800185e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001860:	4a24      	ldr	r2, [pc, #144]	; (80018f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001866:	6593      	str	r3, [r2, #88]	; 0x58
 8001868:	4b22      	ldr	r3, [pc, #136]	; (80018f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800186a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001874:	f7ff f98a 	bl	8000b8c <HAL_PWREx_GetVoltageRange>
 8001878:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800187a:	4b1e      	ldr	r3, [pc, #120]	; (80018f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800187c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187e:	4a1d      	ldr	r2, [pc, #116]	; (80018f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001880:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001884:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800188c:	d10b      	bne.n	80018a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b80      	cmp	r3, #128	; 0x80
 8001892:	d919      	bls.n	80018c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2ba0      	cmp	r3, #160	; 0xa0
 8001898:	d902      	bls.n	80018a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800189a:	2302      	movs	r3, #2
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	e013      	b.n	80018c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80018a0:	2301      	movs	r3, #1
 80018a2:	613b      	str	r3, [r7, #16]
 80018a4:	e010      	b.n	80018c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b80      	cmp	r3, #128	; 0x80
 80018aa:	d902      	bls.n	80018b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80018ac:	2303      	movs	r3, #3
 80018ae:	613b      	str	r3, [r7, #16]
 80018b0:	e00a      	b.n	80018c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2b80      	cmp	r3, #128	; 0x80
 80018b6:	d102      	bne.n	80018be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80018b8:	2302      	movs	r3, #2
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	e004      	b.n	80018c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b70      	cmp	r3, #112	; 0x70
 80018c2:	d101      	bne.n	80018c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80018c4:	2301      	movs	r3, #1
 80018c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80018c8:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f023 0207 	bic.w	r2, r3, #7
 80018d0:	4909      	ldr	r1, [pc, #36]	; (80018f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80018d8:	4b07      	ldr	r3, [pc, #28]	; (80018f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0307 	and.w	r3, r3, #7
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d001      	beq.n	80018ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e000      	b.n	80018ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40021000 	.word	0x40021000
 80018f8:	40022000 	.word	0x40022000

080018fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e049      	b.n	80019a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d106      	bne.n	8001928 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 f841 	bl	80019aa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2202      	movs	r2, #2
 800192c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3304      	adds	r3, #4
 8001938:	4619      	mov	r1, r3
 800193a:	4610      	mov	r0, r2
 800193c:	f000 f9dc 	bl	8001cf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2201      	movs	r2, #1
 800199c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
	...

080019c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d001      	beq.n	80019d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e03b      	b.n	8001a50 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2202      	movs	r2, #2
 80019dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	68da      	ldr	r2, [r3, #12]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f042 0201 	orr.w	r2, r2, #1
 80019ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a19      	ldr	r2, [pc, #100]	; (8001a5c <HAL_TIM_Base_Start_IT+0x9c>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d009      	beq.n	8001a0e <HAL_TIM_Base_Start_IT+0x4e>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a02:	d004      	beq.n	8001a0e <HAL_TIM_Base_Start_IT+0x4e>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a15      	ldr	r2, [pc, #84]	; (8001a60 <HAL_TIM_Base_Start_IT+0xa0>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d115      	bne.n	8001a3a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <HAL_TIM_Base_Start_IT+0xa4>)
 8001a16:	4013      	ands	r3, r2
 8001a18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2b06      	cmp	r3, #6
 8001a1e:	d015      	beq.n	8001a4c <HAL_TIM_Base_Start_IT+0x8c>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a26:	d011      	beq.n	8001a4c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f042 0201 	orr.w	r2, r2, #1
 8001a36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a38:	e008      	b.n	8001a4c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f042 0201 	orr.w	r2, r2, #1
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	e000      	b.n	8001a4e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a4c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	40012c00 	.word	0x40012c00
 8001a60:	40014000 	.word	0x40014000
 8001a64:	00010007 	.word	0x00010007

08001a68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d122      	bne.n	8001ac4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d11b      	bne.n	8001ac4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f06f 0202 	mvn.w	r2, #2
 8001a94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	f003 0303 	and.w	r3, r3, #3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d003      	beq.n	8001ab2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f905 	bl	8001cba <HAL_TIM_IC_CaptureCallback>
 8001ab0:	e005      	b.n	8001abe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 f8f7 	bl	8001ca6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 f908 	bl	8001cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	f003 0304 	and.w	r3, r3, #4
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	d122      	bne.n	8001b18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	f003 0304 	and.w	r3, r3, #4
 8001adc:	2b04      	cmp	r3, #4
 8001ade:	d11b      	bne.n	8001b18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f06f 0204 	mvn.w	r2, #4
 8001ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2202      	movs	r2, #2
 8001aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d003      	beq.n	8001b06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 f8db 	bl	8001cba <HAL_TIM_IC_CaptureCallback>
 8001b04:	e005      	b.n	8001b12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 f8cd 	bl	8001ca6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f000 f8de 	bl	8001cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	f003 0308 	and.w	r3, r3, #8
 8001b22:	2b08      	cmp	r3, #8
 8001b24:	d122      	bne.n	8001b6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	f003 0308 	and.w	r3, r3, #8
 8001b30:	2b08      	cmp	r3, #8
 8001b32:	d11b      	bne.n	8001b6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f06f 0208 	mvn.w	r2, #8
 8001b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2204      	movs	r2, #4
 8001b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	f003 0303 	and.w	r3, r3, #3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 f8b1 	bl	8001cba <HAL_TIM_IC_CaptureCallback>
 8001b58:	e005      	b.n	8001b66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 f8a3 	bl	8001ca6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 f8b4 	bl	8001cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	f003 0310 	and.w	r3, r3, #16
 8001b76:	2b10      	cmp	r3, #16
 8001b78:	d122      	bne.n	8001bc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	f003 0310 	and.w	r3, r3, #16
 8001b84:	2b10      	cmp	r3, #16
 8001b86:	d11b      	bne.n	8001bc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f06f 0210 	mvn.w	r2, #16
 8001b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2208      	movs	r2, #8
 8001b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 f887 	bl	8001cba <HAL_TIM_IC_CaptureCallback>
 8001bac:	e005      	b.n	8001bba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f879 	bl	8001ca6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 f88a 	bl	8001cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d10e      	bne.n	8001bec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d107      	bne.n	8001bec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f06f 0201 	mvn.w	r2, #1
 8001be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7fe fc00 	bl	80003ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf6:	2b80      	cmp	r3, #128	; 0x80
 8001bf8:	d10e      	bne.n	8001c18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c04:	2b80      	cmp	r3, #128	; 0x80
 8001c06:	d107      	bne.n	8001c18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f8de 	bl	8001dd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c26:	d10e      	bne.n	8001c46 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c32:	2b80      	cmp	r3, #128	; 0x80
 8001c34:	d107      	bne.n	8001c46 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001c3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f000 f8d1 	bl	8001de8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c50:	2b40      	cmp	r3, #64	; 0x40
 8001c52:	d10e      	bne.n	8001c72 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c5e:	2b40      	cmp	r3, #64	; 0x40
 8001c60:	d107      	bne.n	8001c72 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f000 f838 	bl	8001ce2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	f003 0320 	and.w	r3, r3, #32
 8001c7c:	2b20      	cmp	r3, #32
 8001c7e:	d10e      	bne.n	8001c9e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	f003 0320 	and.w	r3, r3, #32
 8001c8a:	2b20      	cmp	r3, #32
 8001c8c:	d107      	bne.n	8001c9e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f06f 0220 	mvn.w	r2, #32
 8001c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 f891 	bl	8001dc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
	...

08001cf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a2a      	ldr	r2, [pc, #168]	; (8001db4 <TIM_Base_SetConfig+0xbc>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d003      	beq.n	8001d18 <TIM_Base_SetConfig+0x20>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d16:	d108      	bne.n	8001d2a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a21      	ldr	r2, [pc, #132]	; (8001db4 <TIM_Base_SetConfig+0xbc>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d00b      	beq.n	8001d4a <TIM_Base_SetConfig+0x52>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d38:	d007      	beq.n	8001d4a <TIM_Base_SetConfig+0x52>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a1e      	ldr	r2, [pc, #120]	; (8001db8 <TIM_Base_SetConfig+0xc0>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d003      	beq.n	8001d4a <TIM_Base_SetConfig+0x52>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a1d      	ldr	r2, [pc, #116]	; (8001dbc <TIM_Base_SetConfig+0xc4>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d108      	bne.n	8001d5c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4a0c      	ldr	r2, [pc, #48]	; (8001db4 <TIM_Base_SetConfig+0xbc>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d007      	beq.n	8001d98 <TIM_Base_SetConfig+0xa0>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4a0b      	ldr	r2, [pc, #44]	; (8001db8 <TIM_Base_SetConfig+0xc0>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d003      	beq.n	8001d98 <TIM_Base_SetConfig+0xa0>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a0a      	ldr	r2, [pc, #40]	; (8001dbc <TIM_Base_SetConfig+0xc4>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d103      	bne.n	8001da0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	691a      	ldr	r2, [r3, #16]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	615a      	str	r2, [r3, #20]
}
 8001da6:	bf00      	nop
 8001da8:	3714      	adds	r7, #20
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	40012c00 	.word	0x40012c00
 8001db8:	40014000 	.word	0x40014000
 8001dbc:	40014400 	.word	0x40014400

08001dc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <__NVIC_SetPriority>:
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	6039      	str	r1, [r7, #0]
 8001e06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	db0a      	blt.n	8001e26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	490c      	ldr	r1, [pc, #48]	; (8001e48 <__NVIC_SetPriority+0x4c>)
 8001e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1a:	0112      	lsls	r2, r2, #4
 8001e1c:	b2d2      	uxtb	r2, r2
 8001e1e:	440b      	add	r3, r1
 8001e20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e24:	e00a      	b.n	8001e3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	4908      	ldr	r1, [pc, #32]	; (8001e4c <__NVIC_SetPriority+0x50>)
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	f003 030f 	and.w	r3, r3, #15
 8001e32:	3b04      	subs	r3, #4
 8001e34:	0112      	lsls	r2, r2, #4
 8001e36:	b2d2      	uxtb	r2, r2
 8001e38:	440b      	add	r3, r1
 8001e3a:	761a      	strb	r2, [r3, #24]
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	e000e100 	.word	0xe000e100
 8001e4c:	e000ed00 	.word	0xe000ed00

08001e50 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001e54:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <SysTick_Handler+0x1c>)
 8001e56:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001e58:	f001 fd2a 	bl	80038b0 <xTaskGetSchedulerState>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d001      	beq.n	8001e66 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001e62:	f002 fb11 	bl	8004488 <xPortSysTickHandler>
  }
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	e000e010 	.word	0xe000e010

08001e70 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001e74:	2100      	movs	r1, #0
 8001e76:	f06f 0004 	mvn.w	r0, #4
 8001e7a:	f7ff ffbf 	bl	8001dfc <__NVIC_SetPriority>
#endif
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
	...

08001e84 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e8a:	f3ef 8305 	mrs	r3, IPSR
 8001e8e:	603b      	str	r3, [r7, #0]
  return(result);
 8001e90:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001e96:	f06f 0305 	mvn.w	r3, #5
 8001e9a:	607b      	str	r3, [r7, #4]
 8001e9c:	e00c      	b.n	8001eb8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001e9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <osKernelInitialize+0x44>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d105      	bne.n	8001eb2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001ea6:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <osKernelInitialize+0x44>)
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001eac:	2300      	movs	r3, #0
 8001eae:	607b      	str	r3, [r7, #4]
 8001eb0:	e002      	b.n	8001eb8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001eb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001eb6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001eb8:	687b      	ldr	r3, [r7, #4]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	200000ec 	.word	0x200000ec

08001ecc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ed2:	f3ef 8305 	mrs	r3, IPSR
 8001ed6:	603b      	str	r3, [r7, #0]
  return(result);
 8001ed8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8001ede:	f06f 0305 	mvn.w	r3, #5
 8001ee2:	607b      	str	r3, [r7, #4]
 8001ee4:	e010      	b.n	8001f08 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001ee6:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <osKernelStart+0x48>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d109      	bne.n	8001f02 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001eee:	f7ff ffbf 	bl	8001e70 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001ef2:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <osKernelStart+0x48>)
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001ef8:	f001 f87c 	bl	8002ff4 <vTaskStartScheduler>
      stat = osOK;
 8001efc:	2300      	movs	r3, #0
 8001efe:	607b      	str	r3, [r7, #4]
 8001f00:	e002      	b.n	8001f08 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001f02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f06:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001f08:	687b      	ldr	r3, [r7, #4]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	200000ec 	.word	0x200000ec

08001f18 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b08e      	sub	sp, #56	; 0x38
 8001f1c:	af04      	add	r7, sp, #16
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f28:	f3ef 8305 	mrs	r3, IPSR
 8001f2c:	617b      	str	r3, [r7, #20]
  return(result);
 8001f2e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d17e      	bne.n	8002032 <osThreadNew+0x11a>
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d07b      	beq.n	8002032 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001f3a:	2380      	movs	r3, #128	; 0x80
 8001f3c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001f3e:	2318      	movs	r3, #24
 8001f40:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8001f46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f4a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d045      	beq.n	8001fde <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d002      	beq.n	8001f60 <osThreadNew+0x48>
        name = attr->name;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d002      	beq.n	8001f6e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d008      	beq.n	8001f86 <osThreadNew+0x6e>
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	2b38      	cmp	r3, #56	; 0x38
 8001f78:	d805      	bhi.n	8001f86 <osThreadNew+0x6e>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <osThreadNew+0x72>
        return (NULL);
 8001f86:	2300      	movs	r3, #0
 8001f88:	e054      	b.n	8002034 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	089b      	lsrs	r3, r3, #2
 8001f98:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00e      	beq.n	8001fc0 <osThreadNew+0xa8>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	2bbb      	cmp	r3, #187	; 0xbb
 8001fa8:	d90a      	bls.n	8001fc0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d006      	beq.n	8001fc0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d002      	beq.n	8001fc0 <osThreadNew+0xa8>
        mem = 1;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	61bb      	str	r3, [r7, #24]
 8001fbe:	e010      	b.n	8001fe2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d10c      	bne.n	8001fe2 <osThreadNew+0xca>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d108      	bne.n	8001fe2 <osThreadNew+0xca>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d104      	bne.n	8001fe2 <osThreadNew+0xca>
          mem = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	61bb      	str	r3, [r7, #24]
 8001fdc:	e001      	b.n	8001fe2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d110      	bne.n	800200a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001ff0:	9202      	str	r2, [sp, #8]
 8001ff2:	9301      	str	r3, [sp, #4]
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	6a3a      	ldr	r2, [r7, #32]
 8001ffc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	f000 fe0c 	bl	8002c1c <xTaskCreateStatic>
 8002004:	4603      	mov	r3, r0
 8002006:	613b      	str	r3, [r7, #16]
 8002008:	e013      	b.n	8002032 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d110      	bne.n	8002032 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002010:	6a3b      	ldr	r3, [r7, #32]
 8002012:	b29a      	uxth	r2, r3
 8002014:	f107 0310 	add.w	r3, r7, #16
 8002018:	9301      	str	r3, [sp, #4]
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	9300      	str	r3, [sp, #0]
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002022:	68f8      	ldr	r0, [r7, #12]
 8002024:	f000 fe57 	bl	8002cd6 <xTaskCreate>
 8002028:	4603      	mov	r3, r0
 800202a:	2b01      	cmp	r3, #1
 800202c:	d001      	beq.n	8002032 <osThreadNew+0x11a>
            hTask = NULL;
 800202e:	2300      	movs	r3, #0
 8002030:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002032:	693b      	ldr	r3, [r7, #16]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3728      	adds	r7, #40	; 0x28
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002044:	f3ef 8305 	mrs	r3, IPSR
 8002048:	60bb      	str	r3, [r7, #8]
  return(result);
 800204a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800204c:	2b00      	cmp	r3, #0
 800204e:	d003      	beq.n	8002058 <osDelay+0x1c>
    stat = osErrorISR;
 8002050:	f06f 0305 	mvn.w	r3, #5
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	e007      	b.n	8002068 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002058:	2300      	movs	r3, #0
 800205a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d002      	beq.n	8002068 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 ff92 	bl	8002f8c <vTaskDelay>
    }
  }

  return (stat);
 8002068:	68fb      	ldr	r3, [r7, #12]
}
 800206a:	4618      	mov	r0, r3
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
	...

08002074 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4a07      	ldr	r2, [pc, #28]	; (80020a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8002084:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	4a06      	ldr	r2, [pc, #24]	; (80020a4 <vApplicationGetIdleTaskMemory+0x30>)
 800208a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2280      	movs	r2, #128	; 0x80
 8002090:	601a      	str	r2, [r3, #0]
}
 8002092:	bf00      	nop
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	200000f0 	.word	0x200000f0
 80020a4:	200001ac 	.word	0x200001ac

080020a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4a07      	ldr	r2, [pc, #28]	; (80020d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80020b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	4a06      	ldr	r2, [pc, #24]	; (80020d8 <vApplicationGetTimerTaskMemory+0x30>)
 80020be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020c6:	601a      	str	r2, [r3, #0]
}
 80020c8:	bf00      	nop
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	200003ac 	.word	0x200003ac
 80020d8:	20000468 	.word	0x20000468

080020dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f103 0208 	add.w	r2, r3, #8
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f103 0208 	add.w	r2, r3, #8
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f103 0208 	add.w	r2, r3, #8
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002136:	b480      	push	{r7}
 8002138:	b085      	sub	sp, #20
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
 800213e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	1c5a      	adds	r2, r3, #1
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	601a      	str	r2, [r3, #0]
}
 8002172:	bf00      	nop
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800217e:	b480      	push	{r7}
 8002180:	b085      	sub	sp, #20
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
 8002186:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002194:	d103      	bne.n	800219e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	e00c      	b.n	80021b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	3308      	adds	r3, #8
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	e002      	b.n	80021ac <vListInsert+0x2e>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68ba      	ldr	r2, [r7, #8]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d2f6      	bcs.n	80021a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	1c5a      	adds	r2, r3, #1
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	601a      	str	r2, [r3, #0]
}
 80021e4:	bf00      	nop
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	6892      	ldr	r2, [r2, #8]
 8002206:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	6852      	ldr	r2, [r2, #4]
 8002210:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	429a      	cmp	r2, r3
 800221a:	d103      	bne.n	8002224 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	1e5a      	subs	r2, r3, #1
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d10a      	bne.n	800226e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800225c:	f383 8811 	msr	BASEPRI, r3
 8002260:	f3bf 8f6f 	isb	sy
 8002264:	f3bf 8f4f 	dsb	sy
 8002268:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800226a:	bf00      	nop
 800226c:	e7fe      	b.n	800226c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800226e:	f002 f879 	bl	8004364 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227a:	68f9      	ldr	r1, [r7, #12]
 800227c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800227e:	fb01 f303 	mul.w	r3, r1, r3
 8002282:	441a      	add	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229e:	3b01      	subs	r3, #1
 80022a0:	68f9      	ldr	r1, [r7, #12]
 80022a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022a4:	fb01 f303 	mul.w	r3, r1, r3
 80022a8:	441a      	add	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	22ff      	movs	r2, #255	; 0xff
 80022b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	22ff      	movs	r2, #255	; 0xff
 80022ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d114      	bne.n	80022ee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d01a      	beq.n	8002302 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	3310      	adds	r3, #16
 80022d0:	4618      	mov	r0, r3
 80022d2:	f001 f929 	bl	8003528 <xTaskRemoveFromEventList>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d012      	beq.n	8002302 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80022dc:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <xQueueGenericReset+0xcc>)
 80022de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	f3bf 8f4f 	dsb	sy
 80022e8:	f3bf 8f6f 	isb	sy
 80022ec:	e009      	b.n	8002302 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	3310      	adds	r3, #16
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff fef2 	bl	80020dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	3324      	adds	r3, #36	; 0x24
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff feed 	bl	80020dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002302:	f002 f85f 	bl	80043c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002306:	2301      	movs	r3, #1
}
 8002308:	4618      	mov	r0, r3
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	e000ed04 	.word	0xe000ed04

08002314 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002314:	b580      	push	{r7, lr}
 8002316:	b08e      	sub	sp, #56	; 0x38
 8002318:	af02      	add	r7, sp, #8
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
 8002320:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d10a      	bne.n	800233e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800232c:	f383 8811 	msr	BASEPRI, r3
 8002330:	f3bf 8f6f 	isb	sy
 8002334:	f3bf 8f4f 	dsb	sy
 8002338:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800233a:	bf00      	nop
 800233c:	e7fe      	b.n	800233c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10a      	bne.n	800235a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002348:	f383 8811 	msr	BASEPRI, r3
 800234c:	f3bf 8f6f 	isb	sy
 8002350:	f3bf 8f4f 	dsb	sy
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002356:	bf00      	nop
 8002358:	e7fe      	b.n	8002358 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d002      	beq.n	8002366 <xQueueGenericCreateStatic+0x52>
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <xQueueGenericCreateStatic+0x56>
 8002366:	2301      	movs	r3, #1
 8002368:	e000      	b.n	800236c <xQueueGenericCreateStatic+0x58>
 800236a:	2300      	movs	r3, #0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10a      	bne.n	8002386 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002374:	f383 8811 	msr	BASEPRI, r3
 8002378:	f3bf 8f6f 	isb	sy
 800237c:	f3bf 8f4f 	dsb	sy
 8002380:	623b      	str	r3, [r7, #32]
}
 8002382:	bf00      	nop
 8002384:	e7fe      	b.n	8002384 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d102      	bne.n	8002392 <xQueueGenericCreateStatic+0x7e>
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <xQueueGenericCreateStatic+0x82>
 8002392:	2301      	movs	r3, #1
 8002394:	e000      	b.n	8002398 <xQueueGenericCreateStatic+0x84>
 8002396:	2300      	movs	r3, #0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d10a      	bne.n	80023b2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800239c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a0:	f383 8811 	msr	BASEPRI, r3
 80023a4:	f3bf 8f6f 	isb	sy
 80023a8:	f3bf 8f4f 	dsb	sy
 80023ac:	61fb      	str	r3, [r7, #28]
}
 80023ae:	bf00      	nop
 80023b0:	e7fe      	b.n	80023b0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80023b2:	2350      	movs	r3, #80	; 0x50
 80023b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	2b50      	cmp	r3, #80	; 0x50
 80023ba:	d00a      	beq.n	80023d2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80023bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c0:	f383 8811 	msr	BASEPRI, r3
 80023c4:	f3bf 8f6f 	isb	sy
 80023c8:	f3bf 8f4f 	dsb	sy
 80023cc:	61bb      	str	r3, [r7, #24]
}
 80023ce:	bf00      	nop
 80023d0:	e7fe      	b.n	80023d0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80023d2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80023d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00d      	beq.n	80023fa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80023de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80023e6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80023ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	4613      	mov	r3, r2
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	68b9      	ldr	r1, [r7, #8]
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f000 f805 	bl	8002404 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80023fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3730      	adds	r7, #48	; 0x30
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
 8002410:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d103      	bne.n	8002420 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	e002      	b.n	8002426 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002432:	2101      	movs	r1, #1
 8002434:	69b8      	ldr	r0, [r7, #24]
 8002436:	f7ff ff05 	bl	8002244 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	78fa      	ldrb	r2, [r7, #3]
 800243e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002442:	bf00      	nop
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
	...

0800244c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b08e      	sub	sp, #56	; 0x38
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
 8002458:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800245a:	2300      	movs	r3, #0
 800245c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10a      	bne.n	800247e <xQueueGenericSend+0x32>
	__asm volatile
 8002468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800246c:	f383 8811 	msr	BASEPRI, r3
 8002470:	f3bf 8f6f 	isb	sy
 8002474:	f3bf 8f4f 	dsb	sy
 8002478:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800247a:	bf00      	nop
 800247c:	e7fe      	b.n	800247c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d103      	bne.n	800248c <xQueueGenericSend+0x40>
 8002484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002488:	2b00      	cmp	r3, #0
 800248a:	d101      	bne.n	8002490 <xQueueGenericSend+0x44>
 800248c:	2301      	movs	r3, #1
 800248e:	e000      	b.n	8002492 <xQueueGenericSend+0x46>
 8002490:	2300      	movs	r3, #0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10a      	bne.n	80024ac <xQueueGenericSend+0x60>
	__asm volatile
 8002496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800249a:	f383 8811 	msr	BASEPRI, r3
 800249e:	f3bf 8f6f 	isb	sy
 80024a2:	f3bf 8f4f 	dsb	sy
 80024a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80024a8:	bf00      	nop
 80024aa:	e7fe      	b.n	80024aa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d103      	bne.n	80024ba <xQueueGenericSend+0x6e>
 80024b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d101      	bne.n	80024be <xQueueGenericSend+0x72>
 80024ba:	2301      	movs	r3, #1
 80024bc:	e000      	b.n	80024c0 <xQueueGenericSend+0x74>
 80024be:	2300      	movs	r3, #0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d10a      	bne.n	80024da <xQueueGenericSend+0x8e>
	__asm volatile
 80024c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c8:	f383 8811 	msr	BASEPRI, r3
 80024cc:	f3bf 8f6f 	isb	sy
 80024d0:	f3bf 8f4f 	dsb	sy
 80024d4:	623b      	str	r3, [r7, #32]
}
 80024d6:	bf00      	nop
 80024d8:	e7fe      	b.n	80024d8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024da:	f001 f9e9 	bl	80038b0 <xTaskGetSchedulerState>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d102      	bne.n	80024ea <xQueueGenericSend+0x9e>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <xQueueGenericSend+0xa2>
 80024ea:	2301      	movs	r3, #1
 80024ec:	e000      	b.n	80024f0 <xQueueGenericSend+0xa4>
 80024ee:	2300      	movs	r3, #0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10a      	bne.n	800250a <xQueueGenericSend+0xbe>
	__asm volatile
 80024f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f8:	f383 8811 	msr	BASEPRI, r3
 80024fc:	f3bf 8f6f 	isb	sy
 8002500:	f3bf 8f4f 	dsb	sy
 8002504:	61fb      	str	r3, [r7, #28]
}
 8002506:	bf00      	nop
 8002508:	e7fe      	b.n	8002508 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800250a:	f001 ff2b 	bl	8004364 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800250e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002510:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002516:	429a      	cmp	r2, r3
 8002518:	d302      	bcc.n	8002520 <xQueueGenericSend+0xd4>
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	2b02      	cmp	r3, #2
 800251e:	d129      	bne.n	8002574 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	68b9      	ldr	r1, [r7, #8]
 8002524:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002526:	f000 fa0b 	bl	8002940 <prvCopyDataToQueue>
 800252a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800252c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002530:	2b00      	cmp	r3, #0
 8002532:	d010      	beq.n	8002556 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002536:	3324      	adds	r3, #36	; 0x24
 8002538:	4618      	mov	r0, r3
 800253a:	f000 fff5 	bl	8003528 <xTaskRemoveFromEventList>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d013      	beq.n	800256c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002544:	4b3f      	ldr	r3, [pc, #252]	; (8002644 <xQueueGenericSend+0x1f8>)
 8002546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	f3bf 8f4f 	dsb	sy
 8002550:	f3bf 8f6f 	isb	sy
 8002554:	e00a      	b.n	800256c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002558:	2b00      	cmp	r3, #0
 800255a:	d007      	beq.n	800256c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800255c:	4b39      	ldr	r3, [pc, #228]	; (8002644 <xQueueGenericSend+0x1f8>)
 800255e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	f3bf 8f4f 	dsb	sy
 8002568:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800256c:	f001 ff2a 	bl	80043c4 <vPortExitCritical>
				return pdPASS;
 8002570:	2301      	movs	r3, #1
 8002572:	e063      	b.n	800263c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d103      	bne.n	8002582 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800257a:	f001 ff23 	bl	80043c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800257e:	2300      	movs	r3, #0
 8002580:	e05c      	b.n	800263c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002584:	2b00      	cmp	r3, #0
 8002586:	d106      	bne.n	8002596 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002588:	f107 0314 	add.w	r3, r7, #20
 800258c:	4618      	mov	r0, r3
 800258e:	f001 f82f 	bl	80035f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002592:	2301      	movs	r3, #1
 8002594:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002596:	f001 ff15 	bl	80043c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800259a:	f000 fd9b 	bl	80030d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800259e:	f001 fee1 	bl	8004364 <vPortEnterCritical>
 80025a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025a8:	b25b      	sxtb	r3, r3
 80025aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025ae:	d103      	bne.n	80025b8 <xQueueGenericSend+0x16c>
 80025b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025be:	b25b      	sxtb	r3, r3
 80025c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025c4:	d103      	bne.n	80025ce <xQueueGenericSend+0x182>
 80025c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025ce:	f001 fef9 	bl	80043c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80025d2:	1d3a      	adds	r2, r7, #4
 80025d4:	f107 0314 	add.w	r3, r7, #20
 80025d8:	4611      	mov	r1, r2
 80025da:	4618      	mov	r0, r3
 80025dc:	f001 f81e 	bl	800361c <xTaskCheckForTimeOut>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d124      	bne.n	8002630 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80025e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025e8:	f000 faa2 	bl	8002b30 <prvIsQueueFull>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d018      	beq.n	8002624 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80025f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f4:	3310      	adds	r3, #16
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	4611      	mov	r1, r2
 80025fa:	4618      	mov	r0, r3
 80025fc:	f000 ff44 	bl	8003488 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002600:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002602:	f000 fa2d 	bl	8002a60 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002606:	f000 fd73 	bl	80030f0 <xTaskResumeAll>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	f47f af7c 	bne.w	800250a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002612:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <xQueueGenericSend+0x1f8>)
 8002614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	f3bf 8f4f 	dsb	sy
 800261e:	f3bf 8f6f 	isb	sy
 8002622:	e772      	b.n	800250a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002624:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002626:	f000 fa1b 	bl	8002a60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800262a:	f000 fd61 	bl	80030f0 <xTaskResumeAll>
 800262e:	e76c      	b.n	800250a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002630:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002632:	f000 fa15 	bl	8002a60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002636:	f000 fd5b 	bl	80030f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800263a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800263c:	4618      	mov	r0, r3
 800263e:	3738      	adds	r7, #56	; 0x38
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	e000ed04 	.word	0xe000ed04

08002648 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b090      	sub	sp, #64	; 0x40
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
 8002654:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800265a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800265c:	2b00      	cmp	r3, #0
 800265e:	d10a      	bne.n	8002676 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002664:	f383 8811 	msr	BASEPRI, r3
 8002668:	f3bf 8f6f 	isb	sy
 800266c:	f3bf 8f4f 	dsb	sy
 8002670:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002672:	bf00      	nop
 8002674:	e7fe      	b.n	8002674 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d103      	bne.n	8002684 <xQueueGenericSendFromISR+0x3c>
 800267c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800267e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002680:	2b00      	cmp	r3, #0
 8002682:	d101      	bne.n	8002688 <xQueueGenericSendFromISR+0x40>
 8002684:	2301      	movs	r3, #1
 8002686:	e000      	b.n	800268a <xQueueGenericSendFromISR+0x42>
 8002688:	2300      	movs	r3, #0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d10a      	bne.n	80026a4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800268e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002692:	f383 8811 	msr	BASEPRI, r3
 8002696:	f3bf 8f6f 	isb	sy
 800269a:	f3bf 8f4f 	dsb	sy
 800269e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80026a0:	bf00      	nop
 80026a2:	e7fe      	b.n	80026a2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d103      	bne.n	80026b2 <xQueueGenericSendFromISR+0x6a>
 80026aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d101      	bne.n	80026b6 <xQueueGenericSendFromISR+0x6e>
 80026b2:	2301      	movs	r3, #1
 80026b4:	e000      	b.n	80026b8 <xQueueGenericSendFromISR+0x70>
 80026b6:	2300      	movs	r3, #0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d10a      	bne.n	80026d2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80026bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c0:	f383 8811 	msr	BASEPRI, r3
 80026c4:	f3bf 8f6f 	isb	sy
 80026c8:	f3bf 8f4f 	dsb	sy
 80026cc:	623b      	str	r3, [r7, #32]
}
 80026ce:	bf00      	nop
 80026d0:	e7fe      	b.n	80026d0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80026d2:	f001 ff29 	bl	8004528 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80026d6:	f3ef 8211 	mrs	r2, BASEPRI
 80026da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026de:	f383 8811 	msr	BASEPRI, r3
 80026e2:	f3bf 8f6f 	isb	sy
 80026e6:	f3bf 8f4f 	dsb	sy
 80026ea:	61fa      	str	r2, [r7, #28]
 80026ec:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80026ee:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80026f0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80026f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d302      	bcc.n	8002704 <xQueueGenericSendFromISR+0xbc>
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	2b02      	cmp	r3, #2
 8002702:	d12f      	bne.n	8002764 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002706:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800270a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800270e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002712:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	68b9      	ldr	r1, [r7, #8]
 8002718:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800271a:	f000 f911 	bl	8002940 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800271e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002722:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002726:	d112      	bne.n	800274e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	2b00      	cmp	r3, #0
 800272e:	d016      	beq.n	800275e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002732:	3324      	adds	r3, #36	; 0x24
 8002734:	4618      	mov	r0, r3
 8002736:	f000 fef7 	bl	8003528 <xTaskRemoveFromEventList>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00e      	beq.n	800275e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00b      	beq.n	800275e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	e007      	b.n	800275e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800274e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002752:	3301      	adds	r3, #1
 8002754:	b2db      	uxtb	r3, r3
 8002756:	b25a      	sxtb	r2, r3
 8002758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800275a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800275e:	2301      	movs	r3, #1
 8002760:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002762:	e001      	b.n	8002768 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002764:	2300      	movs	r3, #0
 8002766:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800276a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002772:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002776:	4618      	mov	r0, r3
 8002778:	3740      	adds	r7, #64	; 0x40
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
	...

08002780 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b08c      	sub	sp, #48	; 0x30
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800278c:	2300      	movs	r3, #0
 800278e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10a      	bne.n	80027b0 <xQueueReceive+0x30>
	__asm volatile
 800279a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800279e:	f383 8811 	msr	BASEPRI, r3
 80027a2:	f3bf 8f6f 	isb	sy
 80027a6:	f3bf 8f4f 	dsb	sy
 80027aa:	623b      	str	r3, [r7, #32]
}
 80027ac:	bf00      	nop
 80027ae:	e7fe      	b.n	80027ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d103      	bne.n	80027be <xQueueReceive+0x3e>
 80027b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <xQueueReceive+0x42>
 80027be:	2301      	movs	r3, #1
 80027c0:	e000      	b.n	80027c4 <xQueueReceive+0x44>
 80027c2:	2300      	movs	r3, #0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10a      	bne.n	80027de <xQueueReceive+0x5e>
	__asm volatile
 80027c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027cc:	f383 8811 	msr	BASEPRI, r3
 80027d0:	f3bf 8f6f 	isb	sy
 80027d4:	f3bf 8f4f 	dsb	sy
 80027d8:	61fb      	str	r3, [r7, #28]
}
 80027da:	bf00      	nop
 80027dc:	e7fe      	b.n	80027dc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027de:	f001 f867 	bl	80038b0 <xTaskGetSchedulerState>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d102      	bne.n	80027ee <xQueueReceive+0x6e>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <xQueueReceive+0x72>
 80027ee:	2301      	movs	r3, #1
 80027f0:	e000      	b.n	80027f4 <xQueueReceive+0x74>
 80027f2:	2300      	movs	r3, #0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10a      	bne.n	800280e <xQueueReceive+0x8e>
	__asm volatile
 80027f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027fc:	f383 8811 	msr	BASEPRI, r3
 8002800:	f3bf 8f6f 	isb	sy
 8002804:	f3bf 8f4f 	dsb	sy
 8002808:	61bb      	str	r3, [r7, #24]
}
 800280a:	bf00      	nop
 800280c:	e7fe      	b.n	800280c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800280e:	f001 fda9 	bl	8004364 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002816:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281a:	2b00      	cmp	r3, #0
 800281c:	d01f      	beq.n	800285e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800281e:	68b9      	ldr	r1, [r7, #8]
 8002820:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002822:	f000 f8f7 	bl	8002a14 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002828:	1e5a      	subs	r2, r3, #1
 800282a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800282e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00f      	beq.n	8002856 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002838:	3310      	adds	r3, #16
 800283a:	4618      	mov	r0, r3
 800283c:	f000 fe74 	bl	8003528 <xTaskRemoveFromEventList>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d007      	beq.n	8002856 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002846:	4b3d      	ldr	r3, [pc, #244]	; (800293c <xQueueReceive+0x1bc>)
 8002848:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	f3bf 8f4f 	dsb	sy
 8002852:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002856:	f001 fdb5 	bl	80043c4 <vPortExitCritical>
				return pdPASS;
 800285a:	2301      	movs	r3, #1
 800285c:	e069      	b.n	8002932 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d103      	bne.n	800286c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002864:	f001 fdae 	bl	80043c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002868:	2300      	movs	r3, #0
 800286a:	e062      	b.n	8002932 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800286c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800286e:	2b00      	cmp	r3, #0
 8002870:	d106      	bne.n	8002880 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002872:	f107 0310 	add.w	r3, r7, #16
 8002876:	4618      	mov	r0, r3
 8002878:	f000 feba 	bl	80035f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800287c:	2301      	movs	r3, #1
 800287e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002880:	f001 fda0 	bl	80043c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002884:	f000 fc26 	bl	80030d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002888:	f001 fd6c 	bl	8004364 <vPortEnterCritical>
 800288c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002892:	b25b      	sxtb	r3, r3
 8002894:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002898:	d103      	bne.n	80028a2 <xQueueReceive+0x122>
 800289a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028a8:	b25b      	sxtb	r3, r3
 80028aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028ae:	d103      	bne.n	80028b8 <xQueueReceive+0x138>
 80028b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028b8:	f001 fd84 	bl	80043c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028bc:	1d3a      	adds	r2, r7, #4
 80028be:	f107 0310 	add.w	r3, r7, #16
 80028c2:	4611      	mov	r1, r2
 80028c4:	4618      	mov	r0, r3
 80028c6:	f000 fea9 	bl	800361c <xTaskCheckForTimeOut>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d123      	bne.n	8002918 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028d2:	f000 f917 	bl	8002b04 <prvIsQueueEmpty>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d017      	beq.n	800290c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80028dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028de:	3324      	adds	r3, #36	; 0x24
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	4611      	mov	r1, r2
 80028e4:	4618      	mov	r0, r3
 80028e6:	f000 fdcf 	bl	8003488 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80028ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028ec:	f000 f8b8 	bl	8002a60 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80028f0:	f000 fbfe 	bl	80030f0 <xTaskResumeAll>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d189      	bne.n	800280e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80028fa:	4b10      	ldr	r3, [pc, #64]	; (800293c <xQueueReceive+0x1bc>)
 80028fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	f3bf 8f4f 	dsb	sy
 8002906:	f3bf 8f6f 	isb	sy
 800290a:	e780      	b.n	800280e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800290c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800290e:	f000 f8a7 	bl	8002a60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002912:	f000 fbed 	bl	80030f0 <xTaskResumeAll>
 8002916:	e77a      	b.n	800280e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002918:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800291a:	f000 f8a1 	bl	8002a60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800291e:	f000 fbe7 	bl	80030f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002922:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002924:	f000 f8ee 	bl	8002b04 <prvIsQueueEmpty>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	f43f af6f 	beq.w	800280e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002930:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002932:	4618      	mov	r0, r3
 8002934:	3730      	adds	r7, #48	; 0x30
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	e000ed04 	.word	0xe000ed04

08002940 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800294c:	2300      	movs	r3, #0
 800294e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002954:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10d      	bne.n	800297a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d14d      	bne.n	8002a02 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	4618      	mov	r0, r3
 800296c:	f000 ffbe 	bl	80038ec <xTaskPriorityDisinherit>
 8002970:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	609a      	str	r2, [r3, #8]
 8002978:	e043      	b.n	8002a02 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d119      	bne.n	80029b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6858      	ldr	r0, [r3, #4]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002988:	461a      	mov	r2, r3
 800298a:	68b9      	ldr	r1, [r7, #8]
 800298c:	f002 f81c 	bl	80049c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002998:	441a      	add	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d32b      	bcc.n	8002a02 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	605a      	str	r2, [r3, #4]
 80029b2:	e026      	b.n	8002a02 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	68d8      	ldr	r0, [r3, #12]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	461a      	mov	r2, r3
 80029be:	68b9      	ldr	r1, [r7, #8]
 80029c0:	f002 f802 	bl	80049c8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	68da      	ldr	r2, [r3, #12]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	425b      	negs	r3, r3
 80029ce:	441a      	add	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	68da      	ldr	r2, [r3, #12]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d207      	bcs.n	80029f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e8:	425b      	negs	r3, r3
 80029ea:	441a      	add	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d105      	bne.n	8002a02 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d002      	beq.n	8002a02 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	3b01      	subs	r3, #1
 8002a00:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1c5a      	adds	r2, r3, #1
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002a0a:	697b      	ldr	r3, [r7, #20]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3718      	adds	r7, #24
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d018      	beq.n	8002a58 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	68da      	ldr	r2, [r3, #12]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	441a      	add	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68da      	ldr	r2, [r3, #12]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d303      	bcc.n	8002a48 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68d9      	ldr	r1, [r3, #12]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	461a      	mov	r2, r3
 8002a52:	6838      	ldr	r0, [r7, #0]
 8002a54:	f001 ffb8 	bl	80049c8 <memcpy>
	}
}
 8002a58:	bf00      	nop
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002a68:	f001 fc7c 	bl	8004364 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a72:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a74:	e011      	b.n	8002a9a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d012      	beq.n	8002aa4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	3324      	adds	r3, #36	; 0x24
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 fd50 	bl	8003528 <xTaskRemoveFromEventList>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002a8e:	f000 fe27 	bl	80036e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002a92:	7bfb      	ldrb	r3, [r7, #15]
 8002a94:	3b01      	subs	r3, #1
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	dce9      	bgt.n	8002a76 <prvUnlockQueue+0x16>
 8002aa2:	e000      	b.n	8002aa6 <prvUnlockQueue+0x46>
					break;
 8002aa4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	22ff      	movs	r2, #255	; 0xff
 8002aaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002aae:	f001 fc89 	bl	80043c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002ab2:	f001 fc57 	bl	8004364 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002abc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002abe:	e011      	b.n	8002ae4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d012      	beq.n	8002aee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3310      	adds	r3, #16
 8002acc:	4618      	mov	r0, r3
 8002ace:	f000 fd2b 	bl	8003528 <xTaskRemoveFromEventList>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002ad8:	f000 fe02 	bl	80036e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002adc:	7bbb      	ldrb	r3, [r7, #14]
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ae4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	dce9      	bgt.n	8002ac0 <prvUnlockQueue+0x60>
 8002aec:	e000      	b.n	8002af0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002aee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	22ff      	movs	r2, #255	; 0xff
 8002af4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002af8:	f001 fc64 	bl	80043c4 <vPortExitCritical>
}
 8002afc:	bf00      	nop
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b0c:	f001 fc2a 	bl	8004364 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d102      	bne.n	8002b1e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	e001      	b.n	8002b22 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b22:	f001 fc4f 	bl	80043c4 <vPortExitCritical>

	return xReturn;
 8002b26:	68fb      	ldr	r3, [r7, #12]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b38:	f001 fc14 	bl	8004364 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d102      	bne.n	8002b4e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	e001      	b.n	8002b52 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b52:	f001 fc37 	bl	80043c4 <vPortExitCritical>

	return xReturn;
 8002b56:	68fb      	ldr	r3, [r7, #12]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	e014      	b.n	8002b9a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002b70:	4a0f      	ldr	r2, [pc, #60]	; (8002bb0 <vQueueAddToRegistry+0x50>)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10b      	bne.n	8002b94 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002b7c:	490c      	ldr	r1, [pc, #48]	; (8002bb0 <vQueueAddToRegistry+0x50>)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002b86:	4a0a      	ldr	r2, [pc, #40]	; (8002bb0 <vQueueAddToRegistry+0x50>)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002b92:	e006      	b.n	8002ba2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	3301      	adds	r3, #1
 8002b98:	60fb      	str	r3, [r7, #12]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2b07      	cmp	r3, #7
 8002b9e:	d9e7      	bls.n	8002b70 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002ba0:	bf00      	nop
 8002ba2:	bf00      	nop
 8002ba4:	3714      	adds	r7, #20
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	20000868 	.word	0x20000868

08002bb4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002bc4:	f001 fbce 	bl	8004364 <vPortEnterCritical>
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bce:	b25b      	sxtb	r3, r3
 8002bd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bd4:	d103      	bne.n	8002bde <vQueueWaitForMessageRestricted+0x2a>
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002be4:	b25b      	sxtb	r3, r3
 8002be6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bea:	d103      	bne.n	8002bf4 <vQueueWaitForMessageRestricted+0x40>
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bf4:	f001 fbe6 	bl	80043c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d106      	bne.n	8002c0e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	3324      	adds	r3, #36	; 0x24
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	68b9      	ldr	r1, [r7, #8]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f000 fc61 	bl	80034d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002c0e:	6978      	ldr	r0, [r7, #20]
 8002c10:	f7ff ff26 	bl	8002a60 <prvUnlockQueue>
	}
 8002c14:	bf00      	nop
 8002c16:	3718      	adds	r7, #24
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b08e      	sub	sp, #56	; 0x38
 8002c20:	af04      	add	r7, sp, #16
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
 8002c28:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10a      	bne.n	8002c46 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c34:	f383 8811 	msr	BASEPRI, r3
 8002c38:	f3bf 8f6f 	isb	sy
 8002c3c:	f3bf 8f4f 	dsb	sy
 8002c40:	623b      	str	r3, [r7, #32]
}
 8002c42:	bf00      	nop
 8002c44:	e7fe      	b.n	8002c44 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10a      	bne.n	8002c62 <xTaskCreateStatic+0x46>
	__asm volatile
 8002c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c50:	f383 8811 	msr	BASEPRI, r3
 8002c54:	f3bf 8f6f 	isb	sy
 8002c58:	f3bf 8f4f 	dsb	sy
 8002c5c:	61fb      	str	r3, [r7, #28]
}
 8002c5e:	bf00      	nop
 8002c60:	e7fe      	b.n	8002c60 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002c62:	23bc      	movs	r3, #188	; 0xbc
 8002c64:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	2bbc      	cmp	r3, #188	; 0xbc
 8002c6a:	d00a      	beq.n	8002c82 <xTaskCreateStatic+0x66>
	__asm volatile
 8002c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c70:	f383 8811 	msr	BASEPRI, r3
 8002c74:	f3bf 8f6f 	isb	sy
 8002c78:	f3bf 8f4f 	dsb	sy
 8002c7c:	61bb      	str	r3, [r7, #24]
}
 8002c7e:	bf00      	nop
 8002c80:	e7fe      	b.n	8002c80 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002c82:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d01e      	beq.n	8002cc8 <xTaskCreateStatic+0xac>
 8002c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d01b      	beq.n	8002cc8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c92:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c98:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	2202      	movs	r2, #2
 8002c9e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	9303      	str	r3, [sp, #12]
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca8:	9302      	str	r3, [sp, #8]
 8002caa:	f107 0314 	add.w	r3, r7, #20
 8002cae:	9301      	str	r3, [sp, #4]
 8002cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	68b9      	ldr	r1, [r7, #8]
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f000 f850 	bl	8002d60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002cc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002cc2:	f000 f8f3 	bl	8002eac <prvAddNewTaskToReadyList>
 8002cc6:	e001      	b.n	8002ccc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002ccc:	697b      	ldr	r3, [r7, #20]
	}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3728      	adds	r7, #40	; 0x28
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b08c      	sub	sp, #48	; 0x30
 8002cda:	af04      	add	r7, sp, #16
 8002cdc:	60f8      	str	r0, [r7, #12]
 8002cde:	60b9      	str	r1, [r7, #8]
 8002ce0:	603b      	str	r3, [r7, #0]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002ce6:	88fb      	ldrh	r3, [r7, #6]
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4618      	mov	r0, r3
 8002cec:	f001 fc5c 	bl	80045a8 <pvPortMalloc>
 8002cf0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00e      	beq.n	8002d16 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002cf8:	20bc      	movs	r0, #188	; 0xbc
 8002cfa:	f001 fc55 	bl	80045a8 <pvPortMalloc>
 8002cfe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	631a      	str	r2, [r3, #48]	; 0x30
 8002d0c:	e005      	b.n	8002d1a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002d0e:	6978      	ldr	r0, [r7, #20]
 8002d10:	f001 fd16 	bl	8004740 <vPortFree>
 8002d14:	e001      	b.n	8002d1a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002d16:	2300      	movs	r3, #0
 8002d18:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d017      	beq.n	8002d50 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002d28:	88fa      	ldrh	r2, [r7, #6]
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	9303      	str	r3, [sp, #12]
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	9302      	str	r3, [sp, #8]
 8002d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d34:	9301      	str	r3, [sp, #4]
 8002d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	68b9      	ldr	r1, [r7, #8]
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 f80e 	bl	8002d60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d44:	69f8      	ldr	r0, [r7, #28]
 8002d46:	f000 f8b1 	bl	8002eac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	61bb      	str	r3, [r7, #24]
 8002d4e:	e002      	b.n	8002d56 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d54:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002d56:	69bb      	ldr	r3, [r7, #24]
	}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3720      	adds	r7, #32
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b088      	sub	sp, #32
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
 8002d6c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d70:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	461a      	mov	r2, r3
 8002d78:	21a5      	movs	r1, #165	; 0xa5
 8002d7a:	f001 fe33 	bl	80049e4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	f023 0307 	bic.w	r3, r3, #7
 8002d96:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	f003 0307 	and.w	r3, r3, #7
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00a      	beq.n	8002db8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da6:	f383 8811 	msr	BASEPRI, r3
 8002daa:	f3bf 8f6f 	isb	sy
 8002dae:	f3bf 8f4f 	dsb	sy
 8002db2:	617b      	str	r3, [r7, #20]
}
 8002db4:	bf00      	nop
 8002db6:	e7fe      	b.n	8002db6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d01f      	beq.n	8002dfe <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61fb      	str	r3, [r7, #28]
 8002dc2:	e012      	b.n	8002dea <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002dc4:	68ba      	ldr	r2, [r7, #8]
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	4413      	add	r3, r2
 8002dca:	7819      	ldrb	r1, [r3, #0]
 8002dcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	3334      	adds	r3, #52	; 0x34
 8002dd4:	460a      	mov	r2, r1
 8002dd6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	4413      	add	r3, r2
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d006      	beq.n	8002df2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	3301      	adds	r3, #1
 8002de8:	61fb      	str	r3, [r7, #28]
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	2b0f      	cmp	r3, #15
 8002dee:	d9e9      	bls.n	8002dc4 <prvInitialiseNewTask+0x64>
 8002df0:	e000      	b.n	8002df4 <prvInitialiseNewTask+0x94>
			{
				break;
 8002df2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002dfc:	e003      	b.n	8002e06 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e08:	2b37      	cmp	r3, #55	; 0x37
 8002e0a:	d901      	bls.n	8002e10 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002e0c:	2337      	movs	r3, #55	; 0x37
 8002e0e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e14:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e1a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1e:	2200      	movs	r2, #0
 8002e20:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e24:	3304      	adds	r3, #4
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff f978 	bl	800211c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2e:	3318      	adds	r3, #24
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff f973 	bl	800211c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e3a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e44:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e4a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5e:	3354      	adds	r3, #84	; 0x54
 8002e60:	2260      	movs	r2, #96	; 0x60
 8002e62:	2100      	movs	r1, #0
 8002e64:	4618      	mov	r0, r3
 8002e66:	f001 fdbd 	bl	80049e4 <memset>
 8002e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6c:	4a0c      	ldr	r2, [pc, #48]	; (8002ea0 <prvInitialiseNewTask+0x140>)
 8002e6e:	659a      	str	r2, [r3, #88]	; 0x58
 8002e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e72:	4a0c      	ldr	r2, [pc, #48]	; (8002ea4 <prvInitialiseNewTask+0x144>)
 8002e74:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e78:	4a0b      	ldr	r2, [pc, #44]	; (8002ea8 <prvInitialiseNewTask+0x148>)
 8002e7a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	68f9      	ldr	r1, [r7, #12]
 8002e80:	69b8      	ldr	r0, [r7, #24]
 8002e82:	f001 f943 	bl	800410c <pxPortInitialiseStack>
 8002e86:	4602      	mov	r2, r0
 8002e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d002      	beq.n	8002e98 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e96:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e98:	bf00      	nop
 8002e9a:	3720      	adds	r7, #32
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	08004c98 	.word	0x08004c98
 8002ea4:	08004cb8 	.word	0x08004cb8
 8002ea8:	08004c78 	.word	0x08004c78

08002eac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002eb4:	f001 fa56 	bl	8004364 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002eb8:	4b2d      	ldr	r3, [pc, #180]	; (8002f70 <prvAddNewTaskToReadyList+0xc4>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	4a2c      	ldr	r2, [pc, #176]	; (8002f70 <prvAddNewTaskToReadyList+0xc4>)
 8002ec0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002ec2:	4b2c      	ldr	r3, [pc, #176]	; (8002f74 <prvAddNewTaskToReadyList+0xc8>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d109      	bne.n	8002ede <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002eca:	4a2a      	ldr	r2, [pc, #168]	; (8002f74 <prvAddNewTaskToReadyList+0xc8>)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002ed0:	4b27      	ldr	r3, [pc, #156]	; (8002f70 <prvAddNewTaskToReadyList+0xc4>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d110      	bne.n	8002efa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002ed8:	f000 fc28 	bl	800372c <prvInitialiseTaskLists>
 8002edc:	e00d      	b.n	8002efa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002ede:	4b26      	ldr	r3, [pc, #152]	; (8002f78 <prvAddNewTaskToReadyList+0xcc>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d109      	bne.n	8002efa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002ee6:	4b23      	ldr	r3, [pc, #140]	; (8002f74 <prvAddNewTaskToReadyList+0xc8>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d802      	bhi.n	8002efa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002ef4:	4a1f      	ldr	r2, [pc, #124]	; (8002f74 <prvAddNewTaskToReadyList+0xc8>)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002efa:	4b20      	ldr	r3, [pc, #128]	; (8002f7c <prvAddNewTaskToReadyList+0xd0>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	3301      	adds	r3, #1
 8002f00:	4a1e      	ldr	r2, [pc, #120]	; (8002f7c <prvAddNewTaskToReadyList+0xd0>)
 8002f02:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002f04:	4b1d      	ldr	r3, [pc, #116]	; (8002f7c <prvAddNewTaskToReadyList+0xd0>)
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f10:	4b1b      	ldr	r3, [pc, #108]	; (8002f80 <prvAddNewTaskToReadyList+0xd4>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d903      	bls.n	8002f20 <prvAddNewTaskToReadyList+0x74>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1c:	4a18      	ldr	r2, [pc, #96]	; (8002f80 <prvAddNewTaskToReadyList+0xd4>)
 8002f1e:	6013      	str	r3, [r2, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f24:	4613      	mov	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4413      	add	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4a15      	ldr	r2, [pc, #84]	; (8002f84 <prvAddNewTaskToReadyList+0xd8>)
 8002f2e:	441a      	add	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	3304      	adds	r3, #4
 8002f34:	4619      	mov	r1, r3
 8002f36:	4610      	mov	r0, r2
 8002f38:	f7ff f8fd 	bl	8002136 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002f3c:	f001 fa42 	bl	80043c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002f40:	4b0d      	ldr	r3, [pc, #52]	; (8002f78 <prvAddNewTaskToReadyList+0xcc>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00e      	beq.n	8002f66 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f48:	4b0a      	ldr	r3, [pc, #40]	; (8002f74 <prvAddNewTaskToReadyList+0xc8>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d207      	bcs.n	8002f66 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002f56:	4b0c      	ldr	r3, [pc, #48]	; (8002f88 <prvAddNewTaskToReadyList+0xdc>)
 8002f58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	f3bf 8f4f 	dsb	sy
 8002f62:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f66:	bf00      	nop
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	20000d7c 	.word	0x20000d7c
 8002f74:	200008a8 	.word	0x200008a8
 8002f78:	20000d88 	.word	0x20000d88
 8002f7c:	20000d98 	.word	0x20000d98
 8002f80:	20000d84 	.word	0x20000d84
 8002f84:	200008ac 	.word	0x200008ac
 8002f88:	e000ed04 	.word	0xe000ed04

08002f8c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002f94:	2300      	movs	r3, #0
 8002f96:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d017      	beq.n	8002fce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002f9e:	4b13      	ldr	r3, [pc, #76]	; (8002fec <vTaskDelay+0x60>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00a      	beq.n	8002fbc <vTaskDelay+0x30>
	__asm volatile
 8002fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002faa:	f383 8811 	msr	BASEPRI, r3
 8002fae:	f3bf 8f6f 	isb	sy
 8002fb2:	f3bf 8f4f 	dsb	sy
 8002fb6:	60bb      	str	r3, [r7, #8]
}
 8002fb8:	bf00      	nop
 8002fba:	e7fe      	b.n	8002fba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002fbc:	f000 f88a 	bl	80030d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 fd00 	bl	80039c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002fc8:	f000 f892 	bl	80030f0 <xTaskResumeAll>
 8002fcc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d107      	bne.n	8002fe4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002fd4:	4b06      	ldr	r3, [pc, #24]	; (8002ff0 <vTaskDelay+0x64>)
 8002fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	f3bf 8f4f 	dsb	sy
 8002fe0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002fe4:	bf00      	nop
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	20000da4 	.word	0x20000da4
 8002ff0:	e000ed04 	.word	0xe000ed04

08002ff4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b08a      	sub	sp, #40	; 0x28
 8002ff8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002ffe:	2300      	movs	r3, #0
 8003000:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003002:	463a      	mov	r2, r7
 8003004:	1d39      	adds	r1, r7, #4
 8003006:	f107 0308 	add.w	r3, r7, #8
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff f832 	bl	8002074 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003010:	6839      	ldr	r1, [r7, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	9202      	str	r2, [sp, #8]
 8003018:	9301      	str	r3, [sp, #4]
 800301a:	2300      	movs	r3, #0
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	2300      	movs	r3, #0
 8003020:	460a      	mov	r2, r1
 8003022:	4924      	ldr	r1, [pc, #144]	; (80030b4 <vTaskStartScheduler+0xc0>)
 8003024:	4824      	ldr	r0, [pc, #144]	; (80030b8 <vTaskStartScheduler+0xc4>)
 8003026:	f7ff fdf9 	bl	8002c1c <xTaskCreateStatic>
 800302a:	4603      	mov	r3, r0
 800302c:	4a23      	ldr	r2, [pc, #140]	; (80030bc <vTaskStartScheduler+0xc8>)
 800302e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003030:	4b22      	ldr	r3, [pc, #136]	; (80030bc <vTaskStartScheduler+0xc8>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d002      	beq.n	800303e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003038:	2301      	movs	r3, #1
 800303a:	617b      	str	r3, [r7, #20]
 800303c:	e001      	b.n	8003042 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800303e:	2300      	movs	r3, #0
 8003040:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d102      	bne.n	800304e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003048:	f000 fd12 	bl	8003a70 <xTimerCreateTimerTask>
 800304c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d11b      	bne.n	800308c <vTaskStartScheduler+0x98>
	__asm volatile
 8003054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003058:	f383 8811 	msr	BASEPRI, r3
 800305c:	f3bf 8f6f 	isb	sy
 8003060:	f3bf 8f4f 	dsb	sy
 8003064:	613b      	str	r3, [r7, #16]
}
 8003066:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003068:	4b15      	ldr	r3, [pc, #84]	; (80030c0 <vTaskStartScheduler+0xcc>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	3354      	adds	r3, #84	; 0x54
 800306e:	4a15      	ldr	r2, [pc, #84]	; (80030c4 <vTaskStartScheduler+0xd0>)
 8003070:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003072:	4b15      	ldr	r3, [pc, #84]	; (80030c8 <vTaskStartScheduler+0xd4>)
 8003074:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003078:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800307a:	4b14      	ldr	r3, [pc, #80]	; (80030cc <vTaskStartScheduler+0xd8>)
 800307c:	2201      	movs	r2, #1
 800307e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003080:	4b13      	ldr	r3, [pc, #76]	; (80030d0 <vTaskStartScheduler+0xdc>)
 8003082:	2200      	movs	r2, #0
 8003084:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003086:	f001 f8cb 	bl	8004220 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800308a:	e00e      	b.n	80030aa <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003092:	d10a      	bne.n	80030aa <vTaskStartScheduler+0xb6>
	__asm volatile
 8003094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003098:	f383 8811 	msr	BASEPRI, r3
 800309c:	f3bf 8f6f 	isb	sy
 80030a0:	f3bf 8f4f 	dsb	sy
 80030a4:	60fb      	str	r3, [r7, #12]
}
 80030a6:	bf00      	nop
 80030a8:	e7fe      	b.n	80030a8 <vTaskStartScheduler+0xb4>
}
 80030aa:	bf00      	nop
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	08004bac 	.word	0x08004bac
 80030b8:	080036f9 	.word	0x080036f9
 80030bc:	20000da0 	.word	0x20000da0
 80030c0:	200008a8 	.word	0x200008a8
 80030c4:	20000010 	.word	0x20000010
 80030c8:	20000d9c 	.word	0x20000d9c
 80030cc:	20000d88 	.word	0x20000d88
 80030d0:	20000d80 	.word	0x20000d80

080030d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80030d8:	4b04      	ldr	r3, [pc, #16]	; (80030ec <vTaskSuspendAll+0x18>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	3301      	adds	r3, #1
 80030de:	4a03      	ldr	r2, [pc, #12]	; (80030ec <vTaskSuspendAll+0x18>)
 80030e0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80030e2:	bf00      	nop
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	20000da4 	.word	0x20000da4

080030f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80030f6:	2300      	movs	r3, #0
 80030f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80030fa:	2300      	movs	r3, #0
 80030fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80030fe:	4b42      	ldr	r3, [pc, #264]	; (8003208 <xTaskResumeAll+0x118>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10a      	bne.n	800311c <xTaskResumeAll+0x2c>
	__asm volatile
 8003106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800310a:	f383 8811 	msr	BASEPRI, r3
 800310e:	f3bf 8f6f 	isb	sy
 8003112:	f3bf 8f4f 	dsb	sy
 8003116:	603b      	str	r3, [r7, #0]
}
 8003118:	bf00      	nop
 800311a:	e7fe      	b.n	800311a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800311c:	f001 f922 	bl	8004364 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003120:	4b39      	ldr	r3, [pc, #228]	; (8003208 <xTaskResumeAll+0x118>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	3b01      	subs	r3, #1
 8003126:	4a38      	ldr	r2, [pc, #224]	; (8003208 <xTaskResumeAll+0x118>)
 8003128:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800312a:	4b37      	ldr	r3, [pc, #220]	; (8003208 <xTaskResumeAll+0x118>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d162      	bne.n	80031f8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003132:	4b36      	ldr	r3, [pc, #216]	; (800320c <xTaskResumeAll+0x11c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d05e      	beq.n	80031f8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800313a:	e02f      	b.n	800319c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800313c:	4b34      	ldr	r3, [pc, #208]	; (8003210 <xTaskResumeAll+0x120>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	3318      	adds	r3, #24
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff f851 	bl	80021f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	3304      	adds	r3, #4
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff f84c 	bl	80021f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800315c:	4b2d      	ldr	r3, [pc, #180]	; (8003214 <xTaskResumeAll+0x124>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	429a      	cmp	r2, r3
 8003162:	d903      	bls.n	800316c <xTaskResumeAll+0x7c>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003168:	4a2a      	ldr	r2, [pc, #168]	; (8003214 <xTaskResumeAll+0x124>)
 800316a:	6013      	str	r3, [r2, #0]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003170:	4613      	mov	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4413      	add	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4a27      	ldr	r2, [pc, #156]	; (8003218 <xTaskResumeAll+0x128>)
 800317a:	441a      	add	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	3304      	adds	r3, #4
 8003180:	4619      	mov	r1, r3
 8003182:	4610      	mov	r0, r2
 8003184:	f7fe ffd7 	bl	8002136 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800318c:	4b23      	ldr	r3, [pc, #140]	; (800321c <xTaskResumeAll+0x12c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003192:	429a      	cmp	r2, r3
 8003194:	d302      	bcc.n	800319c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003196:	4b22      	ldr	r3, [pc, #136]	; (8003220 <xTaskResumeAll+0x130>)
 8003198:	2201      	movs	r2, #1
 800319a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800319c:	4b1c      	ldr	r3, [pc, #112]	; (8003210 <xTaskResumeAll+0x120>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1cb      	bne.n	800313c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80031aa:	f000 fb61 	bl	8003870 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80031ae:	4b1d      	ldr	r3, [pc, #116]	; (8003224 <xTaskResumeAll+0x134>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d010      	beq.n	80031dc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80031ba:	f000 f847 	bl	800324c <xTaskIncrementTick>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d002      	beq.n	80031ca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80031c4:	4b16      	ldr	r3, [pc, #88]	; (8003220 <xTaskResumeAll+0x130>)
 80031c6:	2201      	movs	r2, #1
 80031c8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	3b01      	subs	r3, #1
 80031ce:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1f1      	bne.n	80031ba <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80031d6:	4b13      	ldr	r3, [pc, #76]	; (8003224 <xTaskResumeAll+0x134>)
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80031dc:	4b10      	ldr	r3, [pc, #64]	; (8003220 <xTaskResumeAll+0x130>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d009      	beq.n	80031f8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80031e4:	2301      	movs	r3, #1
 80031e6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80031e8:	4b0f      	ldr	r3, [pc, #60]	; (8003228 <xTaskResumeAll+0x138>)
 80031ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	f3bf 8f4f 	dsb	sy
 80031f4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80031f8:	f001 f8e4 	bl	80043c4 <vPortExitCritical>

	return xAlreadyYielded;
 80031fc:	68bb      	ldr	r3, [r7, #8]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	20000da4 	.word	0x20000da4
 800320c:	20000d7c 	.word	0x20000d7c
 8003210:	20000d3c 	.word	0x20000d3c
 8003214:	20000d84 	.word	0x20000d84
 8003218:	200008ac 	.word	0x200008ac
 800321c:	200008a8 	.word	0x200008a8
 8003220:	20000d90 	.word	0x20000d90
 8003224:	20000d8c 	.word	0x20000d8c
 8003228:	e000ed04 	.word	0xe000ed04

0800322c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003232:	4b05      	ldr	r3, [pc, #20]	; (8003248 <xTaskGetTickCount+0x1c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003238:	687b      	ldr	r3, [r7, #4]
}
 800323a:	4618      	mov	r0, r3
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	20000d80 	.word	0x20000d80

0800324c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003252:	2300      	movs	r3, #0
 8003254:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003256:	4b4f      	ldr	r3, [pc, #316]	; (8003394 <xTaskIncrementTick+0x148>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	f040 808f 	bne.w	800337e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003260:	4b4d      	ldr	r3, [pc, #308]	; (8003398 <xTaskIncrementTick+0x14c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	3301      	adds	r3, #1
 8003266:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003268:	4a4b      	ldr	r2, [pc, #300]	; (8003398 <xTaskIncrementTick+0x14c>)
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d120      	bne.n	80032b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003274:	4b49      	ldr	r3, [pc, #292]	; (800339c <xTaskIncrementTick+0x150>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00a      	beq.n	8003294 <xTaskIncrementTick+0x48>
	__asm volatile
 800327e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003282:	f383 8811 	msr	BASEPRI, r3
 8003286:	f3bf 8f6f 	isb	sy
 800328a:	f3bf 8f4f 	dsb	sy
 800328e:	603b      	str	r3, [r7, #0]
}
 8003290:	bf00      	nop
 8003292:	e7fe      	b.n	8003292 <xTaskIncrementTick+0x46>
 8003294:	4b41      	ldr	r3, [pc, #260]	; (800339c <xTaskIncrementTick+0x150>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	60fb      	str	r3, [r7, #12]
 800329a:	4b41      	ldr	r3, [pc, #260]	; (80033a0 <xTaskIncrementTick+0x154>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a3f      	ldr	r2, [pc, #252]	; (800339c <xTaskIncrementTick+0x150>)
 80032a0:	6013      	str	r3, [r2, #0]
 80032a2:	4a3f      	ldr	r2, [pc, #252]	; (80033a0 <xTaskIncrementTick+0x154>)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6013      	str	r3, [r2, #0]
 80032a8:	4b3e      	ldr	r3, [pc, #248]	; (80033a4 <xTaskIncrementTick+0x158>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	3301      	adds	r3, #1
 80032ae:	4a3d      	ldr	r2, [pc, #244]	; (80033a4 <xTaskIncrementTick+0x158>)
 80032b0:	6013      	str	r3, [r2, #0]
 80032b2:	f000 fadd 	bl	8003870 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80032b6:	4b3c      	ldr	r3, [pc, #240]	; (80033a8 <xTaskIncrementTick+0x15c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d349      	bcc.n	8003354 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032c0:	4b36      	ldr	r3, [pc, #216]	; (800339c <xTaskIncrementTick+0x150>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d104      	bne.n	80032d4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032ca:	4b37      	ldr	r3, [pc, #220]	; (80033a8 <xTaskIncrementTick+0x15c>)
 80032cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032d0:	601a      	str	r2, [r3, #0]
					break;
 80032d2:	e03f      	b.n	8003354 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032d4:	4b31      	ldr	r3, [pc, #196]	; (800339c <xTaskIncrementTick+0x150>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d203      	bcs.n	80032f4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80032ec:	4a2e      	ldr	r2, [pc, #184]	; (80033a8 <xTaskIncrementTick+0x15c>)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80032f2:	e02f      	b.n	8003354 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	3304      	adds	r3, #4
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7fe ff79 	bl	80021f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003302:	2b00      	cmp	r3, #0
 8003304:	d004      	beq.n	8003310 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	3318      	adds	r3, #24
 800330a:	4618      	mov	r0, r3
 800330c:	f7fe ff70 	bl	80021f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003314:	4b25      	ldr	r3, [pc, #148]	; (80033ac <xTaskIncrementTick+0x160>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	429a      	cmp	r2, r3
 800331a:	d903      	bls.n	8003324 <xTaskIncrementTick+0xd8>
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003320:	4a22      	ldr	r2, [pc, #136]	; (80033ac <xTaskIncrementTick+0x160>)
 8003322:	6013      	str	r3, [r2, #0]
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003328:	4613      	mov	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4a1f      	ldr	r2, [pc, #124]	; (80033b0 <xTaskIncrementTick+0x164>)
 8003332:	441a      	add	r2, r3
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	3304      	adds	r3, #4
 8003338:	4619      	mov	r1, r3
 800333a:	4610      	mov	r0, r2
 800333c:	f7fe fefb 	bl	8002136 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003344:	4b1b      	ldr	r3, [pc, #108]	; (80033b4 <xTaskIncrementTick+0x168>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334a:	429a      	cmp	r2, r3
 800334c:	d3b8      	bcc.n	80032c0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800334e:	2301      	movs	r3, #1
 8003350:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003352:	e7b5      	b.n	80032c0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003354:	4b17      	ldr	r3, [pc, #92]	; (80033b4 <xTaskIncrementTick+0x168>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800335a:	4915      	ldr	r1, [pc, #84]	; (80033b0 <xTaskIncrementTick+0x164>)
 800335c:	4613      	mov	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d901      	bls.n	8003370 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800336c:	2301      	movs	r3, #1
 800336e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003370:	4b11      	ldr	r3, [pc, #68]	; (80033b8 <xTaskIncrementTick+0x16c>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d007      	beq.n	8003388 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003378:	2301      	movs	r3, #1
 800337a:	617b      	str	r3, [r7, #20]
 800337c:	e004      	b.n	8003388 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800337e:	4b0f      	ldr	r3, [pc, #60]	; (80033bc <xTaskIncrementTick+0x170>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	3301      	adds	r3, #1
 8003384:	4a0d      	ldr	r2, [pc, #52]	; (80033bc <xTaskIncrementTick+0x170>)
 8003386:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003388:	697b      	ldr	r3, [r7, #20]
}
 800338a:	4618      	mov	r0, r3
 800338c:	3718      	adds	r7, #24
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	20000da4 	.word	0x20000da4
 8003398:	20000d80 	.word	0x20000d80
 800339c:	20000d34 	.word	0x20000d34
 80033a0:	20000d38 	.word	0x20000d38
 80033a4:	20000d94 	.word	0x20000d94
 80033a8:	20000d9c 	.word	0x20000d9c
 80033ac:	20000d84 	.word	0x20000d84
 80033b0:	200008ac 	.word	0x200008ac
 80033b4:	200008a8 	.word	0x200008a8
 80033b8:	20000d90 	.word	0x20000d90
 80033bc:	20000d8c 	.word	0x20000d8c

080033c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80033c6:	4b2a      	ldr	r3, [pc, #168]	; (8003470 <vTaskSwitchContext+0xb0>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80033ce:	4b29      	ldr	r3, [pc, #164]	; (8003474 <vTaskSwitchContext+0xb4>)
 80033d0:	2201      	movs	r2, #1
 80033d2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80033d4:	e046      	b.n	8003464 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80033d6:	4b27      	ldr	r3, [pc, #156]	; (8003474 <vTaskSwitchContext+0xb4>)
 80033d8:	2200      	movs	r2, #0
 80033da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033dc:	4b26      	ldr	r3, [pc, #152]	; (8003478 <vTaskSwitchContext+0xb8>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	60fb      	str	r3, [r7, #12]
 80033e2:	e010      	b.n	8003406 <vTaskSwitchContext+0x46>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10a      	bne.n	8003400 <vTaskSwitchContext+0x40>
	__asm volatile
 80033ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ee:	f383 8811 	msr	BASEPRI, r3
 80033f2:	f3bf 8f6f 	isb	sy
 80033f6:	f3bf 8f4f 	dsb	sy
 80033fa:	607b      	str	r3, [r7, #4]
}
 80033fc:	bf00      	nop
 80033fe:	e7fe      	b.n	80033fe <vTaskSwitchContext+0x3e>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	3b01      	subs	r3, #1
 8003404:	60fb      	str	r3, [r7, #12]
 8003406:	491d      	ldr	r1, [pc, #116]	; (800347c <vTaskSwitchContext+0xbc>)
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	4613      	mov	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4413      	add	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	440b      	add	r3, r1
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0e4      	beq.n	80033e4 <vTaskSwitchContext+0x24>
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	4613      	mov	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4a15      	ldr	r2, [pc, #84]	; (800347c <vTaskSwitchContext+0xbc>)
 8003426:	4413      	add	r3, r2
 8003428:	60bb      	str	r3, [r7, #8]
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	605a      	str	r2, [r3, #4]
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	3308      	adds	r3, #8
 800343c:	429a      	cmp	r2, r3
 800343e:	d104      	bne.n	800344a <vTaskSwitchContext+0x8a>
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	605a      	str	r2, [r3, #4]
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	4a0b      	ldr	r2, [pc, #44]	; (8003480 <vTaskSwitchContext+0xc0>)
 8003452:	6013      	str	r3, [r2, #0]
 8003454:	4a08      	ldr	r2, [pc, #32]	; (8003478 <vTaskSwitchContext+0xb8>)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800345a:	4b09      	ldr	r3, [pc, #36]	; (8003480 <vTaskSwitchContext+0xc0>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	3354      	adds	r3, #84	; 0x54
 8003460:	4a08      	ldr	r2, [pc, #32]	; (8003484 <vTaskSwitchContext+0xc4>)
 8003462:	6013      	str	r3, [r2, #0]
}
 8003464:	bf00      	nop
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	20000da4 	.word	0x20000da4
 8003474:	20000d90 	.word	0x20000d90
 8003478:	20000d84 	.word	0x20000d84
 800347c:	200008ac 	.word	0x200008ac
 8003480:	200008a8 	.word	0x200008a8
 8003484:	20000010 	.word	0x20000010

08003488 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10a      	bne.n	80034ae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800349c:	f383 8811 	msr	BASEPRI, r3
 80034a0:	f3bf 8f6f 	isb	sy
 80034a4:	f3bf 8f4f 	dsb	sy
 80034a8:	60fb      	str	r3, [r7, #12]
}
 80034aa:	bf00      	nop
 80034ac:	e7fe      	b.n	80034ac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80034ae:	4b07      	ldr	r3, [pc, #28]	; (80034cc <vTaskPlaceOnEventList+0x44>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	3318      	adds	r3, #24
 80034b4:	4619      	mov	r1, r3
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f7fe fe61 	bl	800217e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80034bc:	2101      	movs	r1, #1
 80034be:	6838      	ldr	r0, [r7, #0]
 80034c0:	f000 fa82 	bl	80039c8 <prvAddCurrentTaskToDelayedList>
}
 80034c4:	bf00      	nop
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	200008a8 	.word	0x200008a8

080034d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10a      	bne.n	80034f8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80034e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e6:	f383 8811 	msr	BASEPRI, r3
 80034ea:	f3bf 8f6f 	isb	sy
 80034ee:	f3bf 8f4f 	dsb	sy
 80034f2:	617b      	str	r3, [r7, #20]
}
 80034f4:	bf00      	nop
 80034f6:	e7fe      	b.n	80034f6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80034f8:	4b0a      	ldr	r3, [pc, #40]	; (8003524 <vTaskPlaceOnEventListRestricted+0x54>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	3318      	adds	r3, #24
 80034fe:	4619      	mov	r1, r3
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f7fe fe18 	bl	8002136 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d002      	beq.n	8003512 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800350c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003510:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	68b8      	ldr	r0, [r7, #8]
 8003516:	f000 fa57 	bl	80039c8 <prvAddCurrentTaskToDelayedList>
	}
 800351a:	bf00      	nop
 800351c:	3718      	adds	r7, #24
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	200008a8 	.word	0x200008a8

08003528 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10a      	bne.n	8003554 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800353e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003542:	f383 8811 	msr	BASEPRI, r3
 8003546:	f3bf 8f6f 	isb	sy
 800354a:	f3bf 8f4f 	dsb	sy
 800354e:	60fb      	str	r3, [r7, #12]
}
 8003550:	bf00      	nop
 8003552:	e7fe      	b.n	8003552 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	3318      	adds	r3, #24
 8003558:	4618      	mov	r0, r3
 800355a:	f7fe fe49 	bl	80021f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800355e:	4b1e      	ldr	r3, [pc, #120]	; (80035d8 <xTaskRemoveFromEventList+0xb0>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d11d      	bne.n	80035a2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	3304      	adds	r3, #4
 800356a:	4618      	mov	r0, r3
 800356c:	f7fe fe40 	bl	80021f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003574:	4b19      	ldr	r3, [pc, #100]	; (80035dc <xTaskRemoveFromEventList+0xb4>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	429a      	cmp	r2, r3
 800357a:	d903      	bls.n	8003584 <xTaskRemoveFromEventList+0x5c>
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003580:	4a16      	ldr	r2, [pc, #88]	; (80035dc <xTaskRemoveFromEventList+0xb4>)
 8003582:	6013      	str	r3, [r2, #0]
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003588:	4613      	mov	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4413      	add	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4a13      	ldr	r2, [pc, #76]	; (80035e0 <xTaskRemoveFromEventList+0xb8>)
 8003592:	441a      	add	r2, r3
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	3304      	adds	r3, #4
 8003598:	4619      	mov	r1, r3
 800359a:	4610      	mov	r0, r2
 800359c:	f7fe fdcb 	bl	8002136 <vListInsertEnd>
 80035a0:	e005      	b.n	80035ae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	3318      	adds	r3, #24
 80035a6:	4619      	mov	r1, r3
 80035a8:	480e      	ldr	r0, [pc, #56]	; (80035e4 <xTaskRemoveFromEventList+0xbc>)
 80035aa:	f7fe fdc4 	bl	8002136 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b2:	4b0d      	ldr	r3, [pc, #52]	; (80035e8 <xTaskRemoveFromEventList+0xc0>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d905      	bls.n	80035c8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80035bc:	2301      	movs	r3, #1
 80035be:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80035c0:	4b0a      	ldr	r3, [pc, #40]	; (80035ec <xTaskRemoveFromEventList+0xc4>)
 80035c2:	2201      	movs	r2, #1
 80035c4:	601a      	str	r2, [r3, #0]
 80035c6:	e001      	b.n	80035cc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80035c8:	2300      	movs	r3, #0
 80035ca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80035cc:	697b      	ldr	r3, [r7, #20]
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3718      	adds	r7, #24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	20000da4 	.word	0x20000da4
 80035dc:	20000d84 	.word	0x20000d84
 80035e0:	200008ac 	.word	0x200008ac
 80035e4:	20000d3c 	.word	0x20000d3c
 80035e8:	200008a8 	.word	0x200008a8
 80035ec:	20000d90 	.word	0x20000d90

080035f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80035f8:	4b06      	ldr	r3, [pc, #24]	; (8003614 <vTaskInternalSetTimeOutState+0x24>)
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003600:	4b05      	ldr	r3, [pc, #20]	; (8003618 <vTaskInternalSetTimeOutState+0x28>)
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	605a      	str	r2, [r3, #4]
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	20000d94 	.word	0x20000d94
 8003618:	20000d80 	.word	0x20000d80

0800361c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b088      	sub	sp, #32
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10a      	bne.n	8003642 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800362c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003630:	f383 8811 	msr	BASEPRI, r3
 8003634:	f3bf 8f6f 	isb	sy
 8003638:	f3bf 8f4f 	dsb	sy
 800363c:	613b      	str	r3, [r7, #16]
}
 800363e:	bf00      	nop
 8003640:	e7fe      	b.n	8003640 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10a      	bne.n	800365e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800364c:	f383 8811 	msr	BASEPRI, r3
 8003650:	f3bf 8f6f 	isb	sy
 8003654:	f3bf 8f4f 	dsb	sy
 8003658:	60fb      	str	r3, [r7, #12]
}
 800365a:	bf00      	nop
 800365c:	e7fe      	b.n	800365c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800365e:	f000 fe81 	bl	8004364 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003662:	4b1d      	ldr	r3, [pc, #116]	; (80036d8 <xTaskCheckForTimeOut+0xbc>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800367a:	d102      	bne.n	8003682 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800367c:	2300      	movs	r3, #0
 800367e:	61fb      	str	r3, [r7, #28]
 8003680:	e023      	b.n	80036ca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	4b15      	ldr	r3, [pc, #84]	; (80036dc <xTaskCheckForTimeOut+0xc0>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	429a      	cmp	r2, r3
 800368c:	d007      	beq.n	800369e <xTaskCheckForTimeOut+0x82>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	429a      	cmp	r2, r3
 8003696:	d302      	bcc.n	800369e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003698:	2301      	movs	r3, #1
 800369a:	61fb      	str	r3, [r7, #28]
 800369c:	e015      	b.n	80036ca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d20b      	bcs.n	80036c0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	1ad2      	subs	r2, r2, r3
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f7ff ff9b 	bl	80035f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80036ba:	2300      	movs	r3, #0
 80036bc:	61fb      	str	r3, [r7, #28]
 80036be:	e004      	b.n	80036ca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	2200      	movs	r2, #0
 80036c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80036c6:	2301      	movs	r3, #1
 80036c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80036ca:	f000 fe7b 	bl	80043c4 <vPortExitCritical>

	return xReturn;
 80036ce:	69fb      	ldr	r3, [r7, #28]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3720      	adds	r7, #32
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	20000d80 	.word	0x20000d80
 80036dc:	20000d94 	.word	0x20000d94

080036e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80036e4:	4b03      	ldr	r3, [pc, #12]	; (80036f4 <vTaskMissedYield+0x14>)
 80036e6:	2201      	movs	r2, #1
 80036e8:	601a      	str	r2, [r3, #0]
}
 80036ea:	bf00      	nop
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr
 80036f4:	20000d90 	.word	0x20000d90

080036f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003700:	f000 f854 	bl	80037ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003704:	4b07      	ldr	r3, [pc, #28]	; (8003724 <prvIdleTask+0x2c>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d907      	bls.n	800371c <prvIdleTask+0x24>
			{
				taskYIELD();
 800370c:	4b06      	ldr	r3, [pc, #24]	; (8003728 <prvIdleTask+0x30>)
 800370e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	f3bf 8f4f 	dsb	sy
 8003718:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800371c:	f7fc fd58 	bl	80001d0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8003720:	e7ee      	b.n	8003700 <prvIdleTask+0x8>
 8003722:	bf00      	nop
 8003724:	200008ac 	.word	0x200008ac
 8003728:	e000ed04 	.word	0xe000ed04

0800372c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003732:	2300      	movs	r3, #0
 8003734:	607b      	str	r3, [r7, #4]
 8003736:	e00c      	b.n	8003752 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	4613      	mov	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4413      	add	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4a12      	ldr	r2, [pc, #72]	; (800378c <prvInitialiseTaskLists+0x60>)
 8003744:	4413      	add	r3, r2
 8003746:	4618      	mov	r0, r3
 8003748:	f7fe fcc8 	bl	80020dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	3301      	adds	r3, #1
 8003750:	607b      	str	r3, [r7, #4]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b37      	cmp	r3, #55	; 0x37
 8003756:	d9ef      	bls.n	8003738 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003758:	480d      	ldr	r0, [pc, #52]	; (8003790 <prvInitialiseTaskLists+0x64>)
 800375a:	f7fe fcbf 	bl	80020dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800375e:	480d      	ldr	r0, [pc, #52]	; (8003794 <prvInitialiseTaskLists+0x68>)
 8003760:	f7fe fcbc 	bl	80020dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003764:	480c      	ldr	r0, [pc, #48]	; (8003798 <prvInitialiseTaskLists+0x6c>)
 8003766:	f7fe fcb9 	bl	80020dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800376a:	480c      	ldr	r0, [pc, #48]	; (800379c <prvInitialiseTaskLists+0x70>)
 800376c:	f7fe fcb6 	bl	80020dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003770:	480b      	ldr	r0, [pc, #44]	; (80037a0 <prvInitialiseTaskLists+0x74>)
 8003772:	f7fe fcb3 	bl	80020dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003776:	4b0b      	ldr	r3, [pc, #44]	; (80037a4 <prvInitialiseTaskLists+0x78>)
 8003778:	4a05      	ldr	r2, [pc, #20]	; (8003790 <prvInitialiseTaskLists+0x64>)
 800377a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800377c:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <prvInitialiseTaskLists+0x7c>)
 800377e:	4a05      	ldr	r2, [pc, #20]	; (8003794 <prvInitialiseTaskLists+0x68>)
 8003780:	601a      	str	r2, [r3, #0]
}
 8003782:	bf00      	nop
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	200008ac 	.word	0x200008ac
 8003790:	20000d0c 	.word	0x20000d0c
 8003794:	20000d20 	.word	0x20000d20
 8003798:	20000d3c 	.word	0x20000d3c
 800379c:	20000d50 	.word	0x20000d50
 80037a0:	20000d68 	.word	0x20000d68
 80037a4:	20000d34 	.word	0x20000d34
 80037a8:	20000d38 	.word	0x20000d38

080037ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037b2:	e019      	b.n	80037e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80037b4:	f000 fdd6 	bl	8004364 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037b8:	4b10      	ldr	r3, [pc, #64]	; (80037fc <prvCheckTasksWaitingTermination+0x50>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	3304      	adds	r3, #4
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7fe fd13 	bl	80021f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80037ca:	4b0d      	ldr	r3, [pc, #52]	; (8003800 <prvCheckTasksWaitingTermination+0x54>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	3b01      	subs	r3, #1
 80037d0:	4a0b      	ldr	r2, [pc, #44]	; (8003800 <prvCheckTasksWaitingTermination+0x54>)
 80037d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80037d4:	4b0b      	ldr	r3, [pc, #44]	; (8003804 <prvCheckTasksWaitingTermination+0x58>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	3b01      	subs	r3, #1
 80037da:	4a0a      	ldr	r2, [pc, #40]	; (8003804 <prvCheckTasksWaitingTermination+0x58>)
 80037dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80037de:	f000 fdf1 	bl	80043c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f810 	bl	8003808 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037e8:	4b06      	ldr	r3, [pc, #24]	; (8003804 <prvCheckTasksWaitingTermination+0x58>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1e1      	bne.n	80037b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80037f0:	bf00      	nop
 80037f2:	bf00      	nop
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	20000d50 	.word	0x20000d50
 8003800:	20000d7c 	.word	0x20000d7c
 8003804:	20000d64 	.word	0x20000d64

08003808 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3354      	adds	r3, #84	; 0x54
 8003814:	4618      	mov	r0, r3
 8003816:	f001 f8fb 	bl	8004a10 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003820:	2b00      	cmp	r3, #0
 8003822:	d108      	bne.n	8003836 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003828:	4618      	mov	r0, r3
 800382a:	f000 ff89 	bl	8004740 <vPortFree>
				vPortFree( pxTCB );
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 ff86 	bl	8004740 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003834:	e018      	b.n	8003868 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800383c:	2b01      	cmp	r3, #1
 800383e:	d103      	bne.n	8003848 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 ff7d 	bl	8004740 <vPortFree>
	}
 8003846:	e00f      	b.n	8003868 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800384e:	2b02      	cmp	r3, #2
 8003850:	d00a      	beq.n	8003868 <prvDeleteTCB+0x60>
	__asm volatile
 8003852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003856:	f383 8811 	msr	BASEPRI, r3
 800385a:	f3bf 8f6f 	isb	sy
 800385e:	f3bf 8f4f 	dsb	sy
 8003862:	60fb      	str	r3, [r7, #12]
}
 8003864:	bf00      	nop
 8003866:	e7fe      	b.n	8003866 <prvDeleteTCB+0x5e>
	}
 8003868:	bf00      	nop
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003876:	4b0c      	ldr	r3, [pc, #48]	; (80038a8 <prvResetNextTaskUnblockTime+0x38>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d104      	bne.n	800388a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003880:	4b0a      	ldr	r3, [pc, #40]	; (80038ac <prvResetNextTaskUnblockTime+0x3c>)
 8003882:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003886:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003888:	e008      	b.n	800389c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800388a:	4b07      	ldr	r3, [pc, #28]	; (80038a8 <prvResetNextTaskUnblockTime+0x38>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	4a04      	ldr	r2, [pc, #16]	; (80038ac <prvResetNextTaskUnblockTime+0x3c>)
 800389a:	6013      	str	r3, [r2, #0]
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr
 80038a8:	20000d34 	.word	0x20000d34
 80038ac:	20000d9c 	.word	0x20000d9c

080038b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80038b6:	4b0b      	ldr	r3, [pc, #44]	; (80038e4 <xTaskGetSchedulerState+0x34>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d102      	bne.n	80038c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80038be:	2301      	movs	r3, #1
 80038c0:	607b      	str	r3, [r7, #4]
 80038c2:	e008      	b.n	80038d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038c4:	4b08      	ldr	r3, [pc, #32]	; (80038e8 <xTaskGetSchedulerState+0x38>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d102      	bne.n	80038d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80038cc:	2302      	movs	r3, #2
 80038ce:	607b      	str	r3, [r7, #4]
 80038d0:	e001      	b.n	80038d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80038d2:	2300      	movs	r3, #0
 80038d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80038d6:	687b      	ldr	r3, [r7, #4]
	}
 80038d8:	4618      	mov	r0, r3
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr
 80038e4:	20000d88 	.word	0x20000d88
 80038e8:	20000da4 	.word	0x20000da4

080038ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80038f8:	2300      	movs	r3, #0
 80038fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d056      	beq.n	80039b0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003902:	4b2e      	ldr	r3, [pc, #184]	; (80039bc <xTaskPriorityDisinherit+0xd0>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	429a      	cmp	r2, r3
 800390a:	d00a      	beq.n	8003922 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800390c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003910:	f383 8811 	msr	BASEPRI, r3
 8003914:	f3bf 8f6f 	isb	sy
 8003918:	f3bf 8f4f 	dsb	sy
 800391c:	60fb      	str	r3, [r7, #12]
}
 800391e:	bf00      	nop
 8003920:	e7fe      	b.n	8003920 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10a      	bne.n	8003940 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800392a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392e:	f383 8811 	msr	BASEPRI, r3
 8003932:	f3bf 8f6f 	isb	sy
 8003936:	f3bf 8f4f 	dsb	sy
 800393a:	60bb      	str	r3, [r7, #8]
}
 800393c:	bf00      	nop
 800393e:	e7fe      	b.n	800393e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003944:	1e5a      	subs	r2, r3, #1
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003952:	429a      	cmp	r2, r3
 8003954:	d02c      	beq.n	80039b0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800395a:	2b00      	cmp	r3, #0
 800395c:	d128      	bne.n	80039b0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	3304      	adds	r3, #4
 8003962:	4618      	mov	r0, r3
 8003964:	f7fe fc44 	bl	80021f0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003974:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003980:	4b0f      	ldr	r3, [pc, #60]	; (80039c0 <xTaskPriorityDisinherit+0xd4>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	429a      	cmp	r2, r3
 8003986:	d903      	bls.n	8003990 <xTaskPriorityDisinherit+0xa4>
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398c:	4a0c      	ldr	r2, [pc, #48]	; (80039c0 <xTaskPriorityDisinherit+0xd4>)
 800398e:	6013      	str	r3, [r2, #0]
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003994:	4613      	mov	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	4a09      	ldr	r2, [pc, #36]	; (80039c4 <xTaskPriorityDisinherit+0xd8>)
 800399e:	441a      	add	r2, r3
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	3304      	adds	r3, #4
 80039a4:	4619      	mov	r1, r3
 80039a6:	4610      	mov	r0, r2
 80039a8:	f7fe fbc5 	bl	8002136 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80039ac:	2301      	movs	r3, #1
 80039ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80039b0:	697b      	ldr	r3, [r7, #20]
	}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3718      	adds	r7, #24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	200008a8 	.word	0x200008a8
 80039c0:	20000d84 	.word	0x20000d84
 80039c4:	200008ac 	.word	0x200008ac

080039c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80039d2:	4b21      	ldr	r3, [pc, #132]	; (8003a58 <prvAddCurrentTaskToDelayedList+0x90>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039d8:	4b20      	ldr	r3, [pc, #128]	; (8003a5c <prvAddCurrentTaskToDelayedList+0x94>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	3304      	adds	r3, #4
 80039de:	4618      	mov	r0, r3
 80039e0:	f7fe fc06 	bl	80021f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039ea:	d10a      	bne.n	8003a02 <prvAddCurrentTaskToDelayedList+0x3a>
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d007      	beq.n	8003a02 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039f2:	4b1a      	ldr	r3, [pc, #104]	; (8003a5c <prvAddCurrentTaskToDelayedList+0x94>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	3304      	adds	r3, #4
 80039f8:	4619      	mov	r1, r3
 80039fa:	4819      	ldr	r0, [pc, #100]	; (8003a60 <prvAddCurrentTaskToDelayedList+0x98>)
 80039fc:	f7fe fb9b 	bl	8002136 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003a00:	e026      	b.n	8003a50 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4413      	add	r3, r2
 8003a08:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003a0a:	4b14      	ldr	r3, [pc, #80]	; (8003a5c <prvAddCurrentTaskToDelayedList+0x94>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68ba      	ldr	r2, [r7, #8]
 8003a10:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d209      	bcs.n	8003a2e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a1a:	4b12      	ldr	r3, [pc, #72]	; (8003a64 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	4b0f      	ldr	r3, [pc, #60]	; (8003a5c <prvAddCurrentTaskToDelayedList+0x94>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	3304      	adds	r3, #4
 8003a24:	4619      	mov	r1, r3
 8003a26:	4610      	mov	r0, r2
 8003a28:	f7fe fba9 	bl	800217e <vListInsert>
}
 8003a2c:	e010      	b.n	8003a50 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a2e:	4b0e      	ldr	r3, [pc, #56]	; (8003a68 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	4b0a      	ldr	r3, [pc, #40]	; (8003a5c <prvAddCurrentTaskToDelayedList+0x94>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	3304      	adds	r3, #4
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4610      	mov	r0, r2
 8003a3c:	f7fe fb9f 	bl	800217e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003a40:	4b0a      	ldr	r3, [pc, #40]	; (8003a6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d202      	bcs.n	8003a50 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003a4a:	4a08      	ldr	r2, [pc, #32]	; (8003a6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	6013      	str	r3, [r2, #0]
}
 8003a50:	bf00      	nop
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	20000d80 	.word	0x20000d80
 8003a5c:	200008a8 	.word	0x200008a8
 8003a60:	20000d68 	.word	0x20000d68
 8003a64:	20000d38 	.word	0x20000d38
 8003a68:	20000d34 	.word	0x20000d34
 8003a6c:	20000d9c 	.word	0x20000d9c

08003a70 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b08a      	sub	sp, #40	; 0x28
 8003a74:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003a76:	2300      	movs	r3, #0
 8003a78:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003a7a:	f000 fb07 	bl	800408c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003a7e:	4b1c      	ldr	r3, [pc, #112]	; (8003af0 <xTimerCreateTimerTask+0x80>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d021      	beq.n	8003aca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003a86:	2300      	movs	r3, #0
 8003a88:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003a8e:	1d3a      	adds	r2, r7, #4
 8003a90:	f107 0108 	add.w	r1, r7, #8
 8003a94:	f107 030c 	add.w	r3, r7, #12
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7fe fb05 	bl	80020a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003a9e:	6879      	ldr	r1, [r7, #4]
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	9202      	str	r2, [sp, #8]
 8003aa6:	9301      	str	r3, [sp, #4]
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	9300      	str	r3, [sp, #0]
 8003aac:	2300      	movs	r3, #0
 8003aae:	460a      	mov	r2, r1
 8003ab0:	4910      	ldr	r1, [pc, #64]	; (8003af4 <xTimerCreateTimerTask+0x84>)
 8003ab2:	4811      	ldr	r0, [pc, #68]	; (8003af8 <xTimerCreateTimerTask+0x88>)
 8003ab4:	f7ff f8b2 	bl	8002c1c <xTaskCreateStatic>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	4a10      	ldr	r2, [pc, #64]	; (8003afc <xTimerCreateTimerTask+0x8c>)
 8003abc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003abe:	4b0f      	ldr	r3, [pc, #60]	; (8003afc <xTimerCreateTimerTask+0x8c>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10a      	bne.n	8003ae6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad4:	f383 8811 	msr	BASEPRI, r3
 8003ad8:	f3bf 8f6f 	isb	sy
 8003adc:	f3bf 8f4f 	dsb	sy
 8003ae0:	613b      	str	r3, [r7, #16]
}
 8003ae2:	bf00      	nop
 8003ae4:	e7fe      	b.n	8003ae4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003ae6:	697b      	ldr	r3, [r7, #20]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3718      	adds	r7, #24
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	20000dd8 	.word	0x20000dd8
 8003af4:	08004bb4 	.word	0x08004bb4
 8003af8:	08003c35 	.word	0x08003c35
 8003afc:	20000ddc 	.word	0x20000ddc

08003b00 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b08a      	sub	sp, #40	; 0x28
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
 8003b0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10a      	bne.n	8003b2e <xTimerGenericCommand+0x2e>
	__asm volatile
 8003b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1c:	f383 8811 	msr	BASEPRI, r3
 8003b20:	f3bf 8f6f 	isb	sy
 8003b24:	f3bf 8f4f 	dsb	sy
 8003b28:	623b      	str	r3, [r7, #32]
}
 8003b2a:	bf00      	nop
 8003b2c:	e7fe      	b.n	8003b2c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003b2e:	4b1a      	ldr	r3, [pc, #104]	; (8003b98 <xTimerGenericCommand+0x98>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d02a      	beq.n	8003b8c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	2b05      	cmp	r3, #5
 8003b46:	dc18      	bgt.n	8003b7a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003b48:	f7ff feb2 	bl	80038b0 <xTaskGetSchedulerState>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d109      	bne.n	8003b66 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003b52:	4b11      	ldr	r3, [pc, #68]	; (8003b98 <xTimerGenericCommand+0x98>)
 8003b54:	6818      	ldr	r0, [r3, #0]
 8003b56:	f107 0110 	add.w	r1, r7, #16
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b5e:	f7fe fc75 	bl	800244c <xQueueGenericSend>
 8003b62:	6278      	str	r0, [r7, #36]	; 0x24
 8003b64:	e012      	b.n	8003b8c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003b66:	4b0c      	ldr	r3, [pc, #48]	; (8003b98 <xTimerGenericCommand+0x98>)
 8003b68:	6818      	ldr	r0, [r3, #0]
 8003b6a:	f107 0110 	add.w	r1, r7, #16
 8003b6e:	2300      	movs	r3, #0
 8003b70:	2200      	movs	r2, #0
 8003b72:	f7fe fc6b 	bl	800244c <xQueueGenericSend>
 8003b76:	6278      	str	r0, [r7, #36]	; 0x24
 8003b78:	e008      	b.n	8003b8c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003b7a:	4b07      	ldr	r3, [pc, #28]	; (8003b98 <xTimerGenericCommand+0x98>)
 8003b7c:	6818      	ldr	r0, [r3, #0]
 8003b7e:	f107 0110 	add.w	r1, r7, #16
 8003b82:	2300      	movs	r3, #0
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	f7fe fd5f 	bl	8002648 <xQueueGenericSendFromISR>
 8003b8a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3728      	adds	r7, #40	; 0x28
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	20000dd8 	.word	0x20000dd8

08003b9c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b088      	sub	sp, #32
 8003ba0:	af02      	add	r7, sp, #8
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ba6:	4b22      	ldr	r3, [pc, #136]	; (8003c30 <prvProcessExpiredTimer+0x94>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	3304      	adds	r3, #4
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7fe fb1b 	bl	80021f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d022      	beq.n	8003c0e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	699a      	ldr	r2, [r3, #24]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	18d1      	adds	r1, r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	6978      	ldr	r0, [r7, #20]
 8003bd6:	f000 f8d1 	bl	8003d7c <prvInsertTimerInActiveList>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d01f      	beq.n	8003c20 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003be0:	2300      	movs	r3, #0
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	2300      	movs	r3, #0
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	2100      	movs	r1, #0
 8003bea:	6978      	ldr	r0, [r7, #20]
 8003bec:	f7ff ff88 	bl	8003b00 <xTimerGenericCommand>
 8003bf0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d113      	bne.n	8003c20 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bfc:	f383 8811 	msr	BASEPRI, r3
 8003c00:	f3bf 8f6f 	isb	sy
 8003c04:	f3bf 8f4f 	dsb	sy
 8003c08:	60fb      	str	r3, [r7, #12]
}
 8003c0a:	bf00      	nop
 8003c0c:	e7fe      	b.n	8003c0c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c14:	f023 0301 	bic.w	r3, r3, #1
 8003c18:	b2da      	uxtb	r2, r3
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	6a1b      	ldr	r3, [r3, #32]
 8003c24:	6978      	ldr	r0, [r7, #20]
 8003c26:	4798      	blx	r3
}
 8003c28:	bf00      	nop
 8003c2a:	3718      	adds	r7, #24
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	20000dd0 	.word	0x20000dd0

08003c34 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c3c:	f107 0308 	add.w	r3, r7, #8
 8003c40:	4618      	mov	r0, r3
 8003c42:	f000 f857 	bl	8003cf4 <prvGetNextExpireTime>
 8003c46:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f000 f803 	bl	8003c58 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003c52:	f000 f8d5 	bl	8003e00 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c56:	e7f1      	b.n	8003c3c <prvTimerTask+0x8>

08003c58 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003c62:	f7ff fa37 	bl	80030d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003c66:	f107 0308 	add.w	r3, r7, #8
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f000 f866 	bl	8003d3c <prvSampleTimeNow>
 8003c70:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d130      	bne.n	8003cda <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10a      	bne.n	8003c94 <prvProcessTimerOrBlockTask+0x3c>
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d806      	bhi.n	8003c94 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003c86:	f7ff fa33 	bl	80030f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003c8a:	68f9      	ldr	r1, [r7, #12]
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f7ff ff85 	bl	8003b9c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003c92:	e024      	b.n	8003cde <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d008      	beq.n	8003cac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003c9a:	4b13      	ldr	r3, [pc, #76]	; (8003ce8 <prvProcessTimerOrBlockTask+0x90>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <prvProcessTimerOrBlockTask+0x50>
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e000      	b.n	8003caa <prvProcessTimerOrBlockTask+0x52>
 8003ca8:	2300      	movs	r3, #0
 8003caa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003cac:	4b0f      	ldr	r3, [pc, #60]	; (8003cec <prvProcessTimerOrBlockTask+0x94>)
 8003cae:	6818      	ldr	r0, [r3, #0]
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	683a      	ldr	r2, [r7, #0]
 8003cb8:	4619      	mov	r1, r3
 8003cba:	f7fe ff7b 	bl	8002bb4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003cbe:	f7ff fa17 	bl	80030f0 <xTaskResumeAll>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d10a      	bne.n	8003cde <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003cc8:	4b09      	ldr	r3, [pc, #36]	; (8003cf0 <prvProcessTimerOrBlockTask+0x98>)
 8003cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	f3bf 8f4f 	dsb	sy
 8003cd4:	f3bf 8f6f 	isb	sy
}
 8003cd8:	e001      	b.n	8003cde <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003cda:	f7ff fa09 	bl	80030f0 <xTaskResumeAll>
}
 8003cde:	bf00      	nop
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	20000dd4 	.word	0x20000dd4
 8003cec:	20000dd8 	.word	0x20000dd8
 8003cf0:	e000ed04 	.word	0xe000ed04

08003cf4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003cfc:	4b0e      	ldr	r3, [pc, #56]	; (8003d38 <prvGetNextExpireTime+0x44>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <prvGetNextExpireTime+0x16>
 8003d06:	2201      	movs	r2, #1
 8003d08:	e000      	b.n	8003d0c <prvGetNextExpireTime+0x18>
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d105      	bne.n	8003d24 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d18:	4b07      	ldr	r3, [pc, #28]	; (8003d38 <prvGetNextExpireTime+0x44>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	60fb      	str	r3, [r7, #12]
 8003d22:	e001      	b.n	8003d28 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003d24:	2300      	movs	r3, #0
 8003d26:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003d28:	68fb      	ldr	r3, [r7, #12]
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	20000dd0 	.word	0x20000dd0

08003d3c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003d44:	f7ff fa72 	bl	800322c <xTaskGetTickCount>
 8003d48:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003d4a:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <prvSampleTimeNow+0x3c>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d205      	bcs.n	8003d60 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003d54:	f000 f936 	bl	8003fc4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	601a      	str	r2, [r3, #0]
 8003d5e:	e002      	b.n	8003d66 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003d66:	4a04      	ldr	r2, [pc, #16]	; (8003d78 <prvSampleTimeNow+0x3c>)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	20000de0 	.word	0x20000de0

08003d7c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
 8003d88:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	68ba      	ldr	r2, [r7, #8]
 8003d92:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003d9a:	68ba      	ldr	r2, [r7, #8]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d812      	bhi.n	8003dc8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	1ad2      	subs	r2, r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d302      	bcc.n	8003db6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003db0:	2301      	movs	r3, #1
 8003db2:	617b      	str	r3, [r7, #20]
 8003db4:	e01b      	b.n	8003dee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003db6:	4b10      	ldr	r3, [pc, #64]	; (8003df8 <prvInsertTimerInActiveList+0x7c>)
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	3304      	adds	r3, #4
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	4610      	mov	r0, r2
 8003dc2:	f7fe f9dc 	bl	800217e <vListInsert>
 8003dc6:	e012      	b.n	8003dee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d206      	bcs.n	8003dde <prvInsertTimerInActiveList+0x62>
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d302      	bcc.n	8003dde <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	617b      	str	r3, [r7, #20]
 8003ddc:	e007      	b.n	8003dee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003dde:	4b07      	ldr	r3, [pc, #28]	; (8003dfc <prvInsertTimerInActiveList+0x80>)
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	3304      	adds	r3, #4
 8003de6:	4619      	mov	r1, r3
 8003de8:	4610      	mov	r0, r2
 8003dea:	f7fe f9c8 	bl	800217e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003dee:	697b      	ldr	r3, [r7, #20]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3718      	adds	r7, #24
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	20000dd4 	.word	0x20000dd4
 8003dfc:	20000dd0 	.word	0x20000dd0

08003e00 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b08e      	sub	sp, #56	; 0x38
 8003e04:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e06:	e0ca      	b.n	8003f9e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	da18      	bge.n	8003e40 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003e0e:	1d3b      	adds	r3, r7, #4
 8003e10:	3304      	adds	r3, #4
 8003e12:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10a      	bne.n	8003e30 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1e:	f383 8811 	msr	BASEPRI, r3
 8003e22:	f3bf 8f6f 	isb	sy
 8003e26:	f3bf 8f4f 	dsb	sy
 8003e2a:	61fb      	str	r3, [r7, #28]
}
 8003e2c:	bf00      	nop
 8003e2e:	e7fe      	b.n	8003e2e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e36:	6850      	ldr	r0, [r2, #4]
 8003e38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e3a:	6892      	ldr	r2, [r2, #8]
 8003e3c:	4611      	mov	r1, r2
 8003e3e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f2c0 80aa 	blt.w	8003f9c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d004      	beq.n	8003e5e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e56:	3304      	adds	r3, #4
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7fe f9c9 	bl	80021f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e5e:	463b      	mov	r3, r7
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7ff ff6b 	bl	8003d3c <prvSampleTimeNow>
 8003e66:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b09      	cmp	r3, #9
 8003e6c:	f200 8097 	bhi.w	8003f9e <prvProcessReceivedCommands+0x19e>
 8003e70:	a201      	add	r2, pc, #4	; (adr r2, 8003e78 <prvProcessReceivedCommands+0x78>)
 8003e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e76:	bf00      	nop
 8003e78:	08003ea1 	.word	0x08003ea1
 8003e7c:	08003ea1 	.word	0x08003ea1
 8003e80:	08003ea1 	.word	0x08003ea1
 8003e84:	08003f15 	.word	0x08003f15
 8003e88:	08003f29 	.word	0x08003f29
 8003e8c:	08003f73 	.word	0x08003f73
 8003e90:	08003ea1 	.word	0x08003ea1
 8003e94:	08003ea1 	.word	0x08003ea1
 8003e98:	08003f15 	.word	0x08003f15
 8003e9c:	08003f29 	.word	0x08003f29
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ea6:	f043 0301 	orr.w	r3, r3, #1
 8003eaa:	b2da      	uxtb	r2, r3
 8003eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	18d1      	adds	r1, r2, r3
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ebe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ec0:	f7ff ff5c 	bl	8003d7c <prvInsertTimerInActiveList>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d069      	beq.n	8003f9e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ed0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ed8:	f003 0304 	and.w	r3, r3, #4
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d05e      	beq.n	8003f9e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003ee0:	68ba      	ldr	r2, [r7, #8]
 8003ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	441a      	add	r2, r3
 8003ee8:	2300      	movs	r3, #0
 8003eea:	9300      	str	r3, [sp, #0]
 8003eec:	2300      	movs	r3, #0
 8003eee:	2100      	movs	r1, #0
 8003ef0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ef2:	f7ff fe05 	bl	8003b00 <xTimerGenericCommand>
 8003ef6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003ef8:	6a3b      	ldr	r3, [r7, #32]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d14f      	bne.n	8003f9e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8003efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f02:	f383 8811 	msr	BASEPRI, r3
 8003f06:	f3bf 8f6f 	isb	sy
 8003f0a:	f3bf 8f4f 	dsb	sy
 8003f0e:	61bb      	str	r3, [r7, #24]
}
 8003f10:	bf00      	nop
 8003f12:	e7fe      	b.n	8003f12 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f1a:	f023 0301 	bic.w	r3, r3, #1
 8003f1e:	b2da      	uxtb	r2, r3
 8003f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003f26:	e03a      	b.n	8003f9e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f2e:	f043 0301 	orr.w	r3, r3, #1
 8003f32:	b2da      	uxtb	r2, r3
 8003f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10a      	bne.n	8003f5e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8003f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f4c:	f383 8811 	msr	BASEPRI, r3
 8003f50:	f3bf 8f6f 	isb	sy
 8003f54:	f3bf 8f4f 	dsb	sy
 8003f58:	617b      	str	r3, [r7, #20]
}
 8003f5a:	bf00      	nop
 8003f5c:	e7fe      	b.n	8003f5c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f60:	699a      	ldr	r2, [r3, #24]
 8003f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f64:	18d1      	adds	r1, r2, r3
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f6c:	f7ff ff06 	bl	8003d7c <prvInsertTimerInActiveList>
					break;
 8003f70:	e015      	b.n	8003f9e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d103      	bne.n	8003f88 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8003f80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f82:	f000 fbdd 	bl	8004740 <vPortFree>
 8003f86:	e00a      	b.n	8003f9e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f8e:	f023 0301 	bic.w	r3, r3, #1
 8003f92:	b2da      	uxtb	r2, r3
 8003f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003f9a:	e000      	b.n	8003f9e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003f9c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f9e:	4b08      	ldr	r3, [pc, #32]	; (8003fc0 <prvProcessReceivedCommands+0x1c0>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	1d39      	adds	r1, r7, #4
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7fe fbea 	bl	8002780 <xQueueReceive>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f47f af2a 	bne.w	8003e08 <prvProcessReceivedCommands+0x8>
	}
}
 8003fb4:	bf00      	nop
 8003fb6:	bf00      	nop
 8003fb8:	3730      	adds	r7, #48	; 0x30
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	20000dd8 	.word	0x20000dd8

08003fc4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b088      	sub	sp, #32
 8003fc8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003fca:	e048      	b.n	800405e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003fcc:	4b2d      	ldr	r3, [pc, #180]	; (8004084 <prvSwitchTimerLists+0xc0>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fd6:	4b2b      	ldr	r3, [pc, #172]	; (8004084 <prvSwitchTimerLists+0xc0>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	3304      	adds	r3, #4
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7fe f903 	bl	80021f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d02e      	beq.n	800405e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	4413      	add	r3, r2
 8004008:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800400a:	68ba      	ldr	r2, [r7, #8]
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	429a      	cmp	r2, r3
 8004010:	d90e      	bls.n	8004030 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800401e:	4b19      	ldr	r3, [pc, #100]	; (8004084 <prvSwitchTimerLists+0xc0>)
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	3304      	adds	r3, #4
 8004026:	4619      	mov	r1, r3
 8004028:	4610      	mov	r0, r2
 800402a:	f7fe f8a8 	bl	800217e <vListInsert>
 800402e:	e016      	b.n	800405e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004030:	2300      	movs	r3, #0
 8004032:	9300      	str	r3, [sp, #0]
 8004034:	2300      	movs	r3, #0
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	2100      	movs	r1, #0
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f7ff fd60 	bl	8003b00 <xTimerGenericCommand>
 8004040:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10a      	bne.n	800405e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404c:	f383 8811 	msr	BASEPRI, r3
 8004050:	f3bf 8f6f 	isb	sy
 8004054:	f3bf 8f4f 	dsb	sy
 8004058:	603b      	str	r3, [r7, #0]
}
 800405a:	bf00      	nop
 800405c:	e7fe      	b.n	800405c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800405e:	4b09      	ldr	r3, [pc, #36]	; (8004084 <prvSwitchTimerLists+0xc0>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1b1      	bne.n	8003fcc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004068:	4b06      	ldr	r3, [pc, #24]	; (8004084 <prvSwitchTimerLists+0xc0>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800406e:	4b06      	ldr	r3, [pc, #24]	; (8004088 <prvSwitchTimerLists+0xc4>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a04      	ldr	r2, [pc, #16]	; (8004084 <prvSwitchTimerLists+0xc0>)
 8004074:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004076:	4a04      	ldr	r2, [pc, #16]	; (8004088 <prvSwitchTimerLists+0xc4>)
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	6013      	str	r3, [r2, #0]
}
 800407c:	bf00      	nop
 800407e:	3718      	adds	r7, #24
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	20000dd0 	.word	0x20000dd0
 8004088:	20000dd4 	.word	0x20000dd4

0800408c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004092:	f000 f967 	bl	8004364 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004096:	4b15      	ldr	r3, [pc, #84]	; (80040ec <prvCheckForValidListAndQueue+0x60>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d120      	bne.n	80040e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800409e:	4814      	ldr	r0, [pc, #80]	; (80040f0 <prvCheckForValidListAndQueue+0x64>)
 80040a0:	f7fe f81c 	bl	80020dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80040a4:	4813      	ldr	r0, [pc, #76]	; (80040f4 <prvCheckForValidListAndQueue+0x68>)
 80040a6:	f7fe f819 	bl	80020dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80040aa:	4b13      	ldr	r3, [pc, #76]	; (80040f8 <prvCheckForValidListAndQueue+0x6c>)
 80040ac:	4a10      	ldr	r2, [pc, #64]	; (80040f0 <prvCheckForValidListAndQueue+0x64>)
 80040ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80040b0:	4b12      	ldr	r3, [pc, #72]	; (80040fc <prvCheckForValidListAndQueue+0x70>)
 80040b2:	4a10      	ldr	r2, [pc, #64]	; (80040f4 <prvCheckForValidListAndQueue+0x68>)
 80040b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80040b6:	2300      	movs	r3, #0
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	4b11      	ldr	r3, [pc, #68]	; (8004100 <prvCheckForValidListAndQueue+0x74>)
 80040bc:	4a11      	ldr	r2, [pc, #68]	; (8004104 <prvCheckForValidListAndQueue+0x78>)
 80040be:	2110      	movs	r1, #16
 80040c0:	200a      	movs	r0, #10
 80040c2:	f7fe f927 	bl	8002314 <xQueueGenericCreateStatic>
 80040c6:	4603      	mov	r3, r0
 80040c8:	4a08      	ldr	r2, [pc, #32]	; (80040ec <prvCheckForValidListAndQueue+0x60>)
 80040ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80040cc:	4b07      	ldr	r3, [pc, #28]	; (80040ec <prvCheckForValidListAndQueue+0x60>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d005      	beq.n	80040e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80040d4:	4b05      	ldr	r3, [pc, #20]	; (80040ec <prvCheckForValidListAndQueue+0x60>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	490b      	ldr	r1, [pc, #44]	; (8004108 <prvCheckForValidListAndQueue+0x7c>)
 80040da:	4618      	mov	r0, r3
 80040dc:	f7fe fd40 	bl	8002b60 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80040e0:	f000 f970 	bl	80043c4 <vPortExitCritical>
}
 80040e4:	bf00      	nop
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	20000dd8 	.word	0x20000dd8
 80040f0:	20000da8 	.word	0x20000da8
 80040f4:	20000dbc 	.word	0x20000dbc
 80040f8:	20000dd0 	.word	0x20000dd0
 80040fc:	20000dd4 	.word	0x20000dd4
 8004100:	20000e84 	.word	0x20000e84
 8004104:	20000de4 	.word	0x20000de4
 8004108:	08004bbc 	.word	0x08004bbc

0800410c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	3b04      	subs	r3, #4
 800411c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004124:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	3b04      	subs	r3, #4
 800412a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	f023 0201 	bic.w	r2, r3, #1
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	3b04      	subs	r3, #4
 800413a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800413c:	4a0c      	ldr	r2, [pc, #48]	; (8004170 <pxPortInitialiseStack+0x64>)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	3b14      	subs	r3, #20
 8004146:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	3b04      	subs	r3, #4
 8004152:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f06f 0202 	mvn.w	r2, #2
 800415a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	3b20      	subs	r3, #32
 8004160:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004162:	68fb      	ldr	r3, [r7, #12]
}
 8004164:	4618      	mov	r0, r3
 8004166:	3714      	adds	r7, #20
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr
 8004170:	08004175 	.word	0x08004175

08004174 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800417a:	2300      	movs	r3, #0
 800417c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800417e:	4b12      	ldr	r3, [pc, #72]	; (80041c8 <prvTaskExitError+0x54>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004186:	d00a      	beq.n	800419e <prvTaskExitError+0x2a>
	__asm volatile
 8004188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418c:	f383 8811 	msr	BASEPRI, r3
 8004190:	f3bf 8f6f 	isb	sy
 8004194:	f3bf 8f4f 	dsb	sy
 8004198:	60fb      	str	r3, [r7, #12]
}
 800419a:	bf00      	nop
 800419c:	e7fe      	b.n	800419c <prvTaskExitError+0x28>
	__asm volatile
 800419e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a2:	f383 8811 	msr	BASEPRI, r3
 80041a6:	f3bf 8f6f 	isb	sy
 80041aa:	f3bf 8f4f 	dsb	sy
 80041ae:	60bb      	str	r3, [r7, #8]
}
 80041b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80041b2:	bf00      	nop
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d0fc      	beq.n	80041b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80041ba:	bf00      	nop
 80041bc:	bf00      	nop
 80041be:	3714      	adds	r7, #20
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr
 80041c8:	2000000c 	.word	0x2000000c
 80041cc:	00000000 	.word	0x00000000

080041d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80041d0:	4b07      	ldr	r3, [pc, #28]	; (80041f0 <pxCurrentTCBConst2>)
 80041d2:	6819      	ldr	r1, [r3, #0]
 80041d4:	6808      	ldr	r0, [r1, #0]
 80041d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041da:	f380 8809 	msr	PSP, r0
 80041de:	f3bf 8f6f 	isb	sy
 80041e2:	f04f 0000 	mov.w	r0, #0
 80041e6:	f380 8811 	msr	BASEPRI, r0
 80041ea:	4770      	bx	lr
 80041ec:	f3af 8000 	nop.w

080041f0 <pxCurrentTCBConst2>:
 80041f0:	200008a8 	.word	0x200008a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80041f4:	bf00      	nop
 80041f6:	bf00      	nop

080041f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80041f8:	4808      	ldr	r0, [pc, #32]	; (800421c <prvPortStartFirstTask+0x24>)
 80041fa:	6800      	ldr	r0, [r0, #0]
 80041fc:	6800      	ldr	r0, [r0, #0]
 80041fe:	f380 8808 	msr	MSP, r0
 8004202:	f04f 0000 	mov.w	r0, #0
 8004206:	f380 8814 	msr	CONTROL, r0
 800420a:	b662      	cpsie	i
 800420c:	b661      	cpsie	f
 800420e:	f3bf 8f4f 	dsb	sy
 8004212:	f3bf 8f6f 	isb	sy
 8004216:	df00      	svc	0
 8004218:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800421a:	bf00      	nop
 800421c:	e000ed08 	.word	0xe000ed08

08004220 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004226:	4b46      	ldr	r3, [pc, #280]	; (8004340 <xPortStartScheduler+0x120>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a46      	ldr	r2, [pc, #280]	; (8004344 <xPortStartScheduler+0x124>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d10a      	bne.n	8004246 <xPortStartScheduler+0x26>
	__asm volatile
 8004230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004234:	f383 8811 	msr	BASEPRI, r3
 8004238:	f3bf 8f6f 	isb	sy
 800423c:	f3bf 8f4f 	dsb	sy
 8004240:	613b      	str	r3, [r7, #16]
}
 8004242:	bf00      	nop
 8004244:	e7fe      	b.n	8004244 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004246:	4b3e      	ldr	r3, [pc, #248]	; (8004340 <xPortStartScheduler+0x120>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a3f      	ldr	r2, [pc, #252]	; (8004348 <xPortStartScheduler+0x128>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d10a      	bne.n	8004266 <xPortStartScheduler+0x46>
	__asm volatile
 8004250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004254:	f383 8811 	msr	BASEPRI, r3
 8004258:	f3bf 8f6f 	isb	sy
 800425c:	f3bf 8f4f 	dsb	sy
 8004260:	60fb      	str	r3, [r7, #12]
}
 8004262:	bf00      	nop
 8004264:	e7fe      	b.n	8004264 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004266:	4b39      	ldr	r3, [pc, #228]	; (800434c <xPortStartScheduler+0x12c>)
 8004268:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	b2db      	uxtb	r3, r3
 8004270:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	22ff      	movs	r2, #255	; 0xff
 8004276:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	b2db      	uxtb	r3, r3
 800427e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004280:	78fb      	ldrb	r3, [r7, #3]
 8004282:	b2db      	uxtb	r3, r3
 8004284:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004288:	b2da      	uxtb	r2, r3
 800428a:	4b31      	ldr	r3, [pc, #196]	; (8004350 <xPortStartScheduler+0x130>)
 800428c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800428e:	4b31      	ldr	r3, [pc, #196]	; (8004354 <xPortStartScheduler+0x134>)
 8004290:	2207      	movs	r2, #7
 8004292:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004294:	e009      	b.n	80042aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004296:	4b2f      	ldr	r3, [pc, #188]	; (8004354 <xPortStartScheduler+0x134>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	3b01      	subs	r3, #1
 800429c:	4a2d      	ldr	r2, [pc, #180]	; (8004354 <xPortStartScheduler+0x134>)
 800429e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80042a0:	78fb      	ldrb	r3, [r7, #3]
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042aa:	78fb      	ldrb	r3, [r7, #3]
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b2:	2b80      	cmp	r3, #128	; 0x80
 80042b4:	d0ef      	beq.n	8004296 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80042b6:	4b27      	ldr	r3, [pc, #156]	; (8004354 <xPortStartScheduler+0x134>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f1c3 0307 	rsb	r3, r3, #7
 80042be:	2b04      	cmp	r3, #4
 80042c0:	d00a      	beq.n	80042d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80042c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c6:	f383 8811 	msr	BASEPRI, r3
 80042ca:	f3bf 8f6f 	isb	sy
 80042ce:	f3bf 8f4f 	dsb	sy
 80042d2:	60bb      	str	r3, [r7, #8]
}
 80042d4:	bf00      	nop
 80042d6:	e7fe      	b.n	80042d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80042d8:	4b1e      	ldr	r3, [pc, #120]	; (8004354 <xPortStartScheduler+0x134>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	021b      	lsls	r3, r3, #8
 80042de:	4a1d      	ldr	r2, [pc, #116]	; (8004354 <xPortStartScheduler+0x134>)
 80042e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80042e2:	4b1c      	ldr	r3, [pc, #112]	; (8004354 <xPortStartScheduler+0x134>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80042ea:	4a1a      	ldr	r2, [pc, #104]	; (8004354 <xPortStartScheduler+0x134>)
 80042ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80042f6:	4b18      	ldr	r3, [pc, #96]	; (8004358 <xPortStartScheduler+0x138>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a17      	ldr	r2, [pc, #92]	; (8004358 <xPortStartScheduler+0x138>)
 80042fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004300:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004302:	4b15      	ldr	r3, [pc, #84]	; (8004358 <xPortStartScheduler+0x138>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a14      	ldr	r2, [pc, #80]	; (8004358 <xPortStartScheduler+0x138>)
 8004308:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800430c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800430e:	f000 f8dd 	bl	80044cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004312:	4b12      	ldr	r3, [pc, #72]	; (800435c <xPortStartScheduler+0x13c>)
 8004314:	2200      	movs	r2, #0
 8004316:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004318:	f000 f8fc 	bl	8004514 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800431c:	4b10      	ldr	r3, [pc, #64]	; (8004360 <xPortStartScheduler+0x140>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a0f      	ldr	r2, [pc, #60]	; (8004360 <xPortStartScheduler+0x140>)
 8004322:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004326:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004328:	f7ff ff66 	bl	80041f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800432c:	f7ff f848 	bl	80033c0 <vTaskSwitchContext>
	prvTaskExitError();
 8004330:	f7ff ff20 	bl	8004174 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3718      	adds	r7, #24
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	e000ed00 	.word	0xe000ed00
 8004344:	410fc271 	.word	0x410fc271
 8004348:	410fc270 	.word	0x410fc270
 800434c:	e000e400 	.word	0xe000e400
 8004350:	20000ed4 	.word	0x20000ed4
 8004354:	20000ed8 	.word	0x20000ed8
 8004358:	e000ed20 	.word	0xe000ed20
 800435c:	2000000c 	.word	0x2000000c
 8004360:	e000ef34 	.word	0xe000ef34

08004364 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
	__asm volatile
 800436a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436e:	f383 8811 	msr	BASEPRI, r3
 8004372:	f3bf 8f6f 	isb	sy
 8004376:	f3bf 8f4f 	dsb	sy
 800437a:	607b      	str	r3, [r7, #4]
}
 800437c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800437e:	4b0f      	ldr	r3, [pc, #60]	; (80043bc <vPortEnterCritical+0x58>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	3301      	adds	r3, #1
 8004384:	4a0d      	ldr	r2, [pc, #52]	; (80043bc <vPortEnterCritical+0x58>)
 8004386:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004388:	4b0c      	ldr	r3, [pc, #48]	; (80043bc <vPortEnterCritical+0x58>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d10f      	bne.n	80043b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004390:	4b0b      	ldr	r3, [pc, #44]	; (80043c0 <vPortEnterCritical+0x5c>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00a      	beq.n	80043b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800439a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439e:	f383 8811 	msr	BASEPRI, r3
 80043a2:	f3bf 8f6f 	isb	sy
 80043a6:	f3bf 8f4f 	dsb	sy
 80043aa:	603b      	str	r3, [r7, #0]
}
 80043ac:	bf00      	nop
 80043ae:	e7fe      	b.n	80043ae <vPortEnterCritical+0x4a>
	}
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	2000000c 	.word	0x2000000c
 80043c0:	e000ed04 	.word	0xe000ed04

080043c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80043ca:	4b12      	ldr	r3, [pc, #72]	; (8004414 <vPortExitCritical+0x50>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10a      	bne.n	80043e8 <vPortExitCritical+0x24>
	__asm volatile
 80043d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d6:	f383 8811 	msr	BASEPRI, r3
 80043da:	f3bf 8f6f 	isb	sy
 80043de:	f3bf 8f4f 	dsb	sy
 80043e2:	607b      	str	r3, [r7, #4]
}
 80043e4:	bf00      	nop
 80043e6:	e7fe      	b.n	80043e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80043e8:	4b0a      	ldr	r3, [pc, #40]	; (8004414 <vPortExitCritical+0x50>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	3b01      	subs	r3, #1
 80043ee:	4a09      	ldr	r2, [pc, #36]	; (8004414 <vPortExitCritical+0x50>)
 80043f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80043f2:	4b08      	ldr	r3, [pc, #32]	; (8004414 <vPortExitCritical+0x50>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d105      	bne.n	8004406 <vPortExitCritical+0x42>
 80043fa:	2300      	movs	r3, #0
 80043fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	f383 8811 	msr	BASEPRI, r3
}
 8004404:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	2000000c 	.word	0x2000000c
	...

08004420 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004420:	f3ef 8009 	mrs	r0, PSP
 8004424:	f3bf 8f6f 	isb	sy
 8004428:	4b15      	ldr	r3, [pc, #84]	; (8004480 <pxCurrentTCBConst>)
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	f01e 0f10 	tst.w	lr, #16
 8004430:	bf08      	it	eq
 8004432:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004436:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800443a:	6010      	str	r0, [r2, #0]
 800443c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004440:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004444:	f380 8811 	msr	BASEPRI, r0
 8004448:	f3bf 8f4f 	dsb	sy
 800444c:	f3bf 8f6f 	isb	sy
 8004450:	f7fe ffb6 	bl	80033c0 <vTaskSwitchContext>
 8004454:	f04f 0000 	mov.w	r0, #0
 8004458:	f380 8811 	msr	BASEPRI, r0
 800445c:	bc09      	pop	{r0, r3}
 800445e:	6819      	ldr	r1, [r3, #0]
 8004460:	6808      	ldr	r0, [r1, #0]
 8004462:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004466:	f01e 0f10 	tst.w	lr, #16
 800446a:	bf08      	it	eq
 800446c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004470:	f380 8809 	msr	PSP, r0
 8004474:	f3bf 8f6f 	isb	sy
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	f3af 8000 	nop.w

08004480 <pxCurrentTCBConst>:
 8004480:	200008a8 	.word	0x200008a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004484:	bf00      	nop
 8004486:	bf00      	nop

08004488 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
	__asm volatile
 800448e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004492:	f383 8811 	msr	BASEPRI, r3
 8004496:	f3bf 8f6f 	isb	sy
 800449a:	f3bf 8f4f 	dsb	sy
 800449e:	607b      	str	r3, [r7, #4]
}
 80044a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80044a2:	f7fe fed3 	bl	800324c <xTaskIncrementTick>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80044ac:	4b06      	ldr	r3, [pc, #24]	; (80044c8 <xPortSysTickHandler+0x40>)
 80044ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	2300      	movs	r3, #0
 80044b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	f383 8811 	msr	BASEPRI, r3
}
 80044be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80044c0:	bf00      	nop
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	e000ed04 	.word	0xe000ed04

080044cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80044d0:	4b0b      	ldr	r3, [pc, #44]	; (8004500 <vPortSetupTimerInterrupt+0x34>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80044d6:	4b0b      	ldr	r3, [pc, #44]	; (8004504 <vPortSetupTimerInterrupt+0x38>)
 80044d8:	2200      	movs	r2, #0
 80044da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80044dc:	4b0a      	ldr	r3, [pc, #40]	; (8004508 <vPortSetupTimerInterrupt+0x3c>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a0a      	ldr	r2, [pc, #40]	; (800450c <vPortSetupTimerInterrupt+0x40>)
 80044e2:	fba2 2303 	umull	r2, r3, r2, r3
 80044e6:	099b      	lsrs	r3, r3, #6
 80044e8:	4a09      	ldr	r2, [pc, #36]	; (8004510 <vPortSetupTimerInterrupt+0x44>)
 80044ea:	3b01      	subs	r3, #1
 80044ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80044ee:	4b04      	ldr	r3, [pc, #16]	; (8004500 <vPortSetupTimerInterrupt+0x34>)
 80044f0:	2207      	movs	r2, #7
 80044f2:	601a      	str	r2, [r3, #0]
}
 80044f4:	bf00      	nop
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	e000e010 	.word	0xe000e010
 8004504:	e000e018 	.word	0xe000e018
 8004508:	20000000 	.word	0x20000000
 800450c:	10624dd3 	.word	0x10624dd3
 8004510:	e000e014 	.word	0xe000e014

08004514 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004514:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004524 <vPortEnableVFP+0x10>
 8004518:	6801      	ldr	r1, [r0, #0]
 800451a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800451e:	6001      	str	r1, [r0, #0]
 8004520:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004522:	bf00      	nop
 8004524:	e000ed88 	.word	0xe000ed88

08004528 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800452e:	f3ef 8305 	mrs	r3, IPSR
 8004532:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2b0f      	cmp	r3, #15
 8004538:	d914      	bls.n	8004564 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800453a:	4a17      	ldr	r2, [pc, #92]	; (8004598 <vPortValidateInterruptPriority+0x70>)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	4413      	add	r3, r2
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004544:	4b15      	ldr	r3, [pc, #84]	; (800459c <vPortValidateInterruptPriority+0x74>)
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	7afa      	ldrb	r2, [r7, #11]
 800454a:	429a      	cmp	r2, r3
 800454c:	d20a      	bcs.n	8004564 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800454e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004552:	f383 8811 	msr	BASEPRI, r3
 8004556:	f3bf 8f6f 	isb	sy
 800455a:	f3bf 8f4f 	dsb	sy
 800455e:	607b      	str	r3, [r7, #4]
}
 8004560:	bf00      	nop
 8004562:	e7fe      	b.n	8004562 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004564:	4b0e      	ldr	r3, [pc, #56]	; (80045a0 <vPortValidateInterruptPriority+0x78>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800456c:	4b0d      	ldr	r3, [pc, #52]	; (80045a4 <vPortValidateInterruptPriority+0x7c>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	429a      	cmp	r2, r3
 8004572:	d90a      	bls.n	800458a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004578:	f383 8811 	msr	BASEPRI, r3
 800457c:	f3bf 8f6f 	isb	sy
 8004580:	f3bf 8f4f 	dsb	sy
 8004584:	603b      	str	r3, [r7, #0]
}
 8004586:	bf00      	nop
 8004588:	e7fe      	b.n	8004588 <vPortValidateInterruptPriority+0x60>
	}
 800458a:	bf00      	nop
 800458c:	3714      	adds	r7, #20
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	e000e3f0 	.word	0xe000e3f0
 800459c:	20000ed4 	.word	0x20000ed4
 80045a0:	e000ed0c 	.word	0xe000ed0c
 80045a4:	20000ed8 	.word	0x20000ed8

080045a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b08a      	sub	sp, #40	; 0x28
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80045b0:	2300      	movs	r3, #0
 80045b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80045b4:	f7fe fd8e 	bl	80030d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80045b8:	4b5b      	ldr	r3, [pc, #364]	; (8004728 <pvPortMalloc+0x180>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d101      	bne.n	80045c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80045c0:	f000 f920 	bl	8004804 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80045c4:	4b59      	ldr	r3, [pc, #356]	; (800472c <pvPortMalloc+0x184>)
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4013      	ands	r3, r2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f040 8093 	bne.w	80046f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d01d      	beq.n	8004614 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80045d8:	2208      	movs	r2, #8
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4413      	add	r3, r2
 80045de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f003 0307 	and.w	r3, r3, #7
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d014      	beq.n	8004614 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f023 0307 	bic.w	r3, r3, #7
 80045f0:	3308      	adds	r3, #8
 80045f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f003 0307 	and.w	r3, r3, #7
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00a      	beq.n	8004614 <pvPortMalloc+0x6c>
	__asm volatile
 80045fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004602:	f383 8811 	msr	BASEPRI, r3
 8004606:	f3bf 8f6f 	isb	sy
 800460a:	f3bf 8f4f 	dsb	sy
 800460e:	617b      	str	r3, [r7, #20]
}
 8004610:	bf00      	nop
 8004612:	e7fe      	b.n	8004612 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d06e      	beq.n	80046f8 <pvPortMalloc+0x150>
 800461a:	4b45      	ldr	r3, [pc, #276]	; (8004730 <pvPortMalloc+0x188>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	429a      	cmp	r2, r3
 8004622:	d869      	bhi.n	80046f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004624:	4b43      	ldr	r3, [pc, #268]	; (8004734 <pvPortMalloc+0x18c>)
 8004626:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004628:	4b42      	ldr	r3, [pc, #264]	; (8004734 <pvPortMalloc+0x18c>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800462e:	e004      	b.n	800463a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004632:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800463a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	429a      	cmp	r2, r3
 8004642:	d903      	bls.n	800464c <pvPortMalloc+0xa4>
 8004644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1f1      	bne.n	8004630 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800464c:	4b36      	ldr	r3, [pc, #216]	; (8004728 <pvPortMalloc+0x180>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004652:	429a      	cmp	r2, r3
 8004654:	d050      	beq.n	80046f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004656:	6a3b      	ldr	r3, [r7, #32]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2208      	movs	r2, #8
 800465c:	4413      	add	r3, r2
 800465e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	6a3b      	ldr	r3, [r7, #32]
 8004666:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	1ad2      	subs	r2, r2, r3
 8004670:	2308      	movs	r3, #8
 8004672:	005b      	lsls	r3, r3, #1
 8004674:	429a      	cmp	r2, r3
 8004676:	d91f      	bls.n	80046b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4413      	add	r3, r2
 800467e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	f003 0307 	and.w	r3, r3, #7
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00a      	beq.n	80046a0 <pvPortMalloc+0xf8>
	__asm volatile
 800468a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468e:	f383 8811 	msr	BASEPRI, r3
 8004692:	f3bf 8f6f 	isb	sy
 8004696:	f3bf 8f4f 	dsb	sy
 800469a:	613b      	str	r3, [r7, #16]
}
 800469c:	bf00      	nop
 800469e:	e7fe      	b.n	800469e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80046a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	1ad2      	subs	r2, r2, r3
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80046ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80046b2:	69b8      	ldr	r0, [r7, #24]
 80046b4:	f000 f908 	bl	80048c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80046b8:	4b1d      	ldr	r3, [pc, #116]	; (8004730 <pvPortMalloc+0x188>)
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	4a1b      	ldr	r2, [pc, #108]	; (8004730 <pvPortMalloc+0x188>)
 80046c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80046c6:	4b1a      	ldr	r3, [pc, #104]	; (8004730 <pvPortMalloc+0x188>)
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	4b1b      	ldr	r3, [pc, #108]	; (8004738 <pvPortMalloc+0x190>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d203      	bcs.n	80046da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80046d2:	4b17      	ldr	r3, [pc, #92]	; (8004730 <pvPortMalloc+0x188>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a18      	ldr	r2, [pc, #96]	; (8004738 <pvPortMalloc+0x190>)
 80046d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80046da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	4b13      	ldr	r3, [pc, #76]	; (800472c <pvPortMalloc+0x184>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	431a      	orrs	r2, r3
 80046e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80046e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ea:	2200      	movs	r2, #0
 80046ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80046ee:	4b13      	ldr	r3, [pc, #76]	; (800473c <pvPortMalloc+0x194>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	3301      	adds	r3, #1
 80046f4:	4a11      	ldr	r2, [pc, #68]	; (800473c <pvPortMalloc+0x194>)
 80046f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80046f8:	f7fe fcfa 	bl	80030f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	f003 0307 	and.w	r3, r3, #7
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00a      	beq.n	800471c <pvPortMalloc+0x174>
	__asm volatile
 8004706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470a:	f383 8811 	msr	BASEPRI, r3
 800470e:	f3bf 8f6f 	isb	sy
 8004712:	f3bf 8f4f 	dsb	sy
 8004716:	60fb      	str	r3, [r7, #12]
}
 8004718:	bf00      	nop
 800471a:	e7fe      	b.n	800471a <pvPortMalloc+0x172>
	return pvReturn;
 800471c:	69fb      	ldr	r3, [r7, #28]
}
 800471e:	4618      	mov	r0, r3
 8004720:	3728      	adds	r7, #40	; 0x28
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	20001a9c 	.word	0x20001a9c
 800472c:	20001ab0 	.word	0x20001ab0
 8004730:	20001aa0 	.word	0x20001aa0
 8004734:	20001a94 	.word	0x20001a94
 8004738:	20001aa4 	.word	0x20001aa4
 800473c:	20001aa8 	.word	0x20001aa8

08004740 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b086      	sub	sp, #24
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d04d      	beq.n	80047ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004752:	2308      	movs	r3, #8
 8004754:	425b      	negs	r3, r3
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	4413      	add	r3, r2
 800475a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	685a      	ldr	r2, [r3, #4]
 8004764:	4b24      	ldr	r3, [pc, #144]	; (80047f8 <vPortFree+0xb8>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4013      	ands	r3, r2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10a      	bne.n	8004784 <vPortFree+0x44>
	__asm volatile
 800476e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004772:	f383 8811 	msr	BASEPRI, r3
 8004776:	f3bf 8f6f 	isb	sy
 800477a:	f3bf 8f4f 	dsb	sy
 800477e:	60fb      	str	r3, [r7, #12]
}
 8004780:	bf00      	nop
 8004782:	e7fe      	b.n	8004782 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00a      	beq.n	80047a2 <vPortFree+0x62>
	__asm volatile
 800478c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004790:	f383 8811 	msr	BASEPRI, r3
 8004794:	f3bf 8f6f 	isb	sy
 8004798:	f3bf 8f4f 	dsb	sy
 800479c:	60bb      	str	r3, [r7, #8]
}
 800479e:	bf00      	nop
 80047a0:	e7fe      	b.n	80047a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	4b14      	ldr	r3, [pc, #80]	; (80047f8 <vPortFree+0xb8>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4013      	ands	r3, r2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d01e      	beq.n	80047ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d11a      	bne.n	80047ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	4b0e      	ldr	r3, [pc, #56]	; (80047f8 <vPortFree+0xb8>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	43db      	mvns	r3, r3
 80047c2:	401a      	ands	r2, r3
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80047c8:	f7fe fc84 	bl	80030d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	685a      	ldr	r2, [r3, #4]
 80047d0:	4b0a      	ldr	r3, [pc, #40]	; (80047fc <vPortFree+0xbc>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4413      	add	r3, r2
 80047d6:	4a09      	ldr	r2, [pc, #36]	; (80047fc <vPortFree+0xbc>)
 80047d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80047da:	6938      	ldr	r0, [r7, #16]
 80047dc:	f000 f874 	bl	80048c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80047e0:	4b07      	ldr	r3, [pc, #28]	; (8004800 <vPortFree+0xc0>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	3301      	adds	r3, #1
 80047e6:	4a06      	ldr	r2, [pc, #24]	; (8004800 <vPortFree+0xc0>)
 80047e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80047ea:	f7fe fc81 	bl	80030f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80047ee:	bf00      	nop
 80047f0:	3718      	adds	r7, #24
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	20001ab0 	.word	0x20001ab0
 80047fc:	20001aa0 	.word	0x20001aa0
 8004800:	20001aac 	.word	0x20001aac

08004804 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800480a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800480e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004810:	4b27      	ldr	r3, [pc, #156]	; (80048b0 <prvHeapInit+0xac>)
 8004812:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f003 0307 	and.w	r3, r3, #7
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00c      	beq.n	8004838 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	3307      	adds	r3, #7
 8004822:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f023 0307 	bic.w	r3, r3, #7
 800482a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800482c:	68ba      	ldr	r2, [r7, #8]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	4a1f      	ldr	r2, [pc, #124]	; (80048b0 <prvHeapInit+0xac>)
 8004834:	4413      	add	r3, r2
 8004836:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800483c:	4a1d      	ldr	r2, [pc, #116]	; (80048b4 <prvHeapInit+0xb0>)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004842:	4b1c      	ldr	r3, [pc, #112]	; (80048b4 <prvHeapInit+0xb0>)
 8004844:	2200      	movs	r2, #0
 8004846:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	68ba      	ldr	r2, [r7, #8]
 800484c:	4413      	add	r3, r2
 800484e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004850:	2208      	movs	r2, #8
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	1a9b      	subs	r3, r3, r2
 8004856:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f023 0307 	bic.w	r3, r3, #7
 800485e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	4a15      	ldr	r2, [pc, #84]	; (80048b8 <prvHeapInit+0xb4>)
 8004864:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004866:	4b14      	ldr	r3, [pc, #80]	; (80048b8 <prvHeapInit+0xb4>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2200      	movs	r2, #0
 800486c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800486e:	4b12      	ldr	r3, [pc, #72]	; (80048b8 <prvHeapInit+0xb4>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2200      	movs	r2, #0
 8004874:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	1ad2      	subs	r2, r2, r3
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004884:	4b0c      	ldr	r3, [pc, #48]	; (80048b8 <prvHeapInit+0xb4>)
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	4a0a      	ldr	r2, [pc, #40]	; (80048bc <prvHeapInit+0xb8>)
 8004892:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	4a09      	ldr	r2, [pc, #36]	; (80048c0 <prvHeapInit+0xbc>)
 800489a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800489c:	4b09      	ldr	r3, [pc, #36]	; (80048c4 <prvHeapInit+0xc0>)
 800489e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80048a2:	601a      	str	r2, [r3, #0]
}
 80048a4:	bf00      	nop
 80048a6:	3714      	adds	r7, #20
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr
 80048b0:	20000edc 	.word	0x20000edc
 80048b4:	20001a94 	.word	0x20001a94
 80048b8:	20001a9c 	.word	0x20001a9c
 80048bc:	20001aa4 	.word	0x20001aa4
 80048c0:	20001aa0 	.word	0x20001aa0
 80048c4:	20001ab0 	.word	0x20001ab0

080048c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80048d0:	4b28      	ldr	r3, [pc, #160]	; (8004974 <prvInsertBlockIntoFreeList+0xac>)
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	e002      	b.n	80048dc <prvInsertBlockIntoFreeList+0x14>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	60fb      	str	r3, [r7, #12]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d8f7      	bhi.n	80048d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	4413      	add	r3, r2
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d108      	bne.n	800490a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	685a      	ldr	r2, [r3, #4]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	441a      	add	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	441a      	add	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	429a      	cmp	r2, r3
 800491c:	d118      	bne.n	8004950 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	4b15      	ldr	r3, [pc, #84]	; (8004978 <prvInsertBlockIntoFreeList+0xb0>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	429a      	cmp	r2, r3
 8004928:	d00d      	beq.n	8004946 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	441a      	add	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	e008      	b.n	8004958 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004946:	4b0c      	ldr	r3, [pc, #48]	; (8004978 <prvInsertBlockIntoFreeList+0xb0>)
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	601a      	str	r2, [r3, #0]
 800494e:	e003      	b.n	8004958 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	429a      	cmp	r2, r3
 800495e:	d002      	beq.n	8004966 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004966:	bf00      	nop
 8004968:	3714      	adds	r7, #20
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	20001a94 	.word	0x20001a94
 8004978:	20001a9c 	.word	0x20001a9c

0800497c <__libc_init_array>:
 800497c:	b570      	push	{r4, r5, r6, lr}
 800497e:	4d0d      	ldr	r5, [pc, #52]	; (80049b4 <__libc_init_array+0x38>)
 8004980:	4c0d      	ldr	r4, [pc, #52]	; (80049b8 <__libc_init_array+0x3c>)
 8004982:	1b64      	subs	r4, r4, r5
 8004984:	10a4      	asrs	r4, r4, #2
 8004986:	2600      	movs	r6, #0
 8004988:	42a6      	cmp	r6, r4
 800498a:	d109      	bne.n	80049a0 <__libc_init_array+0x24>
 800498c:	4d0b      	ldr	r5, [pc, #44]	; (80049bc <__libc_init_array+0x40>)
 800498e:	4c0c      	ldr	r4, [pc, #48]	; (80049c0 <__libc_init_array+0x44>)
 8004990:	f000 f8f2 	bl	8004b78 <_init>
 8004994:	1b64      	subs	r4, r4, r5
 8004996:	10a4      	asrs	r4, r4, #2
 8004998:	2600      	movs	r6, #0
 800499a:	42a6      	cmp	r6, r4
 800499c:	d105      	bne.n	80049aa <__libc_init_array+0x2e>
 800499e:	bd70      	pop	{r4, r5, r6, pc}
 80049a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80049a4:	4798      	blx	r3
 80049a6:	3601      	adds	r6, #1
 80049a8:	e7ee      	b.n	8004988 <__libc_init_array+0xc>
 80049aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80049ae:	4798      	blx	r3
 80049b0:	3601      	adds	r6, #1
 80049b2:	e7f2      	b.n	800499a <__libc_init_array+0x1e>
 80049b4:	08004cd8 	.word	0x08004cd8
 80049b8:	08004cd8 	.word	0x08004cd8
 80049bc:	08004cd8 	.word	0x08004cd8
 80049c0:	08004cdc 	.word	0x08004cdc

080049c4 <__retarget_lock_acquire_recursive>:
 80049c4:	4770      	bx	lr

080049c6 <__retarget_lock_release_recursive>:
 80049c6:	4770      	bx	lr

080049c8 <memcpy>:
 80049c8:	440a      	add	r2, r1
 80049ca:	4291      	cmp	r1, r2
 80049cc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80049d0:	d100      	bne.n	80049d4 <memcpy+0xc>
 80049d2:	4770      	bx	lr
 80049d4:	b510      	push	{r4, lr}
 80049d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049de:	4291      	cmp	r1, r2
 80049e0:	d1f9      	bne.n	80049d6 <memcpy+0xe>
 80049e2:	bd10      	pop	{r4, pc}

080049e4 <memset>:
 80049e4:	4402      	add	r2, r0
 80049e6:	4603      	mov	r3, r0
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d100      	bne.n	80049ee <memset+0xa>
 80049ec:	4770      	bx	lr
 80049ee:	f803 1b01 	strb.w	r1, [r3], #1
 80049f2:	e7f9      	b.n	80049e8 <memset+0x4>

080049f4 <cleanup_glue>:
 80049f4:	b538      	push	{r3, r4, r5, lr}
 80049f6:	460c      	mov	r4, r1
 80049f8:	6809      	ldr	r1, [r1, #0]
 80049fa:	4605      	mov	r5, r0
 80049fc:	b109      	cbz	r1, 8004a02 <cleanup_glue+0xe>
 80049fe:	f7ff fff9 	bl	80049f4 <cleanup_glue>
 8004a02:	4621      	mov	r1, r4
 8004a04:	4628      	mov	r0, r5
 8004a06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a0a:	f000 b869 	b.w	8004ae0 <_free_r>
	...

08004a10 <_reclaim_reent>:
 8004a10:	4b2c      	ldr	r3, [pc, #176]	; (8004ac4 <_reclaim_reent+0xb4>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4283      	cmp	r3, r0
 8004a16:	b570      	push	{r4, r5, r6, lr}
 8004a18:	4604      	mov	r4, r0
 8004a1a:	d051      	beq.n	8004ac0 <_reclaim_reent+0xb0>
 8004a1c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004a1e:	b143      	cbz	r3, 8004a32 <_reclaim_reent+0x22>
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d14a      	bne.n	8004abc <_reclaim_reent+0xac>
 8004a26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a28:	6819      	ldr	r1, [r3, #0]
 8004a2a:	b111      	cbz	r1, 8004a32 <_reclaim_reent+0x22>
 8004a2c:	4620      	mov	r0, r4
 8004a2e:	f000 f857 	bl	8004ae0 <_free_r>
 8004a32:	6961      	ldr	r1, [r4, #20]
 8004a34:	b111      	cbz	r1, 8004a3c <_reclaim_reent+0x2c>
 8004a36:	4620      	mov	r0, r4
 8004a38:	f000 f852 	bl	8004ae0 <_free_r>
 8004a3c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004a3e:	b111      	cbz	r1, 8004a46 <_reclaim_reent+0x36>
 8004a40:	4620      	mov	r0, r4
 8004a42:	f000 f84d 	bl	8004ae0 <_free_r>
 8004a46:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004a48:	b111      	cbz	r1, 8004a50 <_reclaim_reent+0x40>
 8004a4a:	4620      	mov	r0, r4
 8004a4c:	f000 f848 	bl	8004ae0 <_free_r>
 8004a50:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004a52:	b111      	cbz	r1, 8004a5a <_reclaim_reent+0x4a>
 8004a54:	4620      	mov	r0, r4
 8004a56:	f000 f843 	bl	8004ae0 <_free_r>
 8004a5a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004a5c:	b111      	cbz	r1, 8004a64 <_reclaim_reent+0x54>
 8004a5e:	4620      	mov	r0, r4
 8004a60:	f000 f83e 	bl	8004ae0 <_free_r>
 8004a64:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004a66:	b111      	cbz	r1, 8004a6e <_reclaim_reent+0x5e>
 8004a68:	4620      	mov	r0, r4
 8004a6a:	f000 f839 	bl	8004ae0 <_free_r>
 8004a6e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004a70:	b111      	cbz	r1, 8004a78 <_reclaim_reent+0x68>
 8004a72:	4620      	mov	r0, r4
 8004a74:	f000 f834 	bl	8004ae0 <_free_r>
 8004a78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a7a:	b111      	cbz	r1, 8004a82 <_reclaim_reent+0x72>
 8004a7c:	4620      	mov	r0, r4
 8004a7e:	f000 f82f 	bl	8004ae0 <_free_r>
 8004a82:	69a3      	ldr	r3, [r4, #24]
 8004a84:	b1e3      	cbz	r3, 8004ac0 <_reclaim_reent+0xb0>
 8004a86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004a88:	4620      	mov	r0, r4
 8004a8a:	4798      	blx	r3
 8004a8c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004a8e:	b1b9      	cbz	r1, 8004ac0 <_reclaim_reent+0xb0>
 8004a90:	4620      	mov	r0, r4
 8004a92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004a96:	f7ff bfad 	b.w	80049f4 <cleanup_glue>
 8004a9a:	5949      	ldr	r1, [r1, r5]
 8004a9c:	b941      	cbnz	r1, 8004ab0 <_reclaim_reent+0xa0>
 8004a9e:	3504      	adds	r5, #4
 8004aa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004aa2:	2d80      	cmp	r5, #128	; 0x80
 8004aa4:	68d9      	ldr	r1, [r3, #12]
 8004aa6:	d1f8      	bne.n	8004a9a <_reclaim_reent+0x8a>
 8004aa8:	4620      	mov	r0, r4
 8004aaa:	f000 f819 	bl	8004ae0 <_free_r>
 8004aae:	e7ba      	b.n	8004a26 <_reclaim_reent+0x16>
 8004ab0:	680e      	ldr	r6, [r1, #0]
 8004ab2:	4620      	mov	r0, r4
 8004ab4:	f000 f814 	bl	8004ae0 <_free_r>
 8004ab8:	4631      	mov	r1, r6
 8004aba:	e7ef      	b.n	8004a9c <_reclaim_reent+0x8c>
 8004abc:	2500      	movs	r5, #0
 8004abe:	e7ef      	b.n	8004aa0 <_reclaim_reent+0x90>
 8004ac0:	bd70      	pop	{r4, r5, r6, pc}
 8004ac2:	bf00      	nop
 8004ac4:	20000010 	.word	0x20000010

08004ac8 <__malloc_lock>:
 8004ac8:	4801      	ldr	r0, [pc, #4]	; (8004ad0 <__malloc_lock+0x8>)
 8004aca:	f7ff bf7b 	b.w	80049c4 <__retarget_lock_acquire_recursive>
 8004ace:	bf00      	nop
 8004ad0:	20001ab4 	.word	0x20001ab4

08004ad4 <__malloc_unlock>:
 8004ad4:	4801      	ldr	r0, [pc, #4]	; (8004adc <__malloc_unlock+0x8>)
 8004ad6:	f7ff bf76 	b.w	80049c6 <__retarget_lock_release_recursive>
 8004ada:	bf00      	nop
 8004adc:	20001ab4 	.word	0x20001ab4

08004ae0 <_free_r>:
 8004ae0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ae2:	2900      	cmp	r1, #0
 8004ae4:	d044      	beq.n	8004b70 <_free_r+0x90>
 8004ae6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004aea:	9001      	str	r0, [sp, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f1a1 0404 	sub.w	r4, r1, #4
 8004af2:	bfb8      	it	lt
 8004af4:	18e4      	addlt	r4, r4, r3
 8004af6:	f7ff ffe7 	bl	8004ac8 <__malloc_lock>
 8004afa:	4a1e      	ldr	r2, [pc, #120]	; (8004b74 <_free_r+0x94>)
 8004afc:	9801      	ldr	r0, [sp, #4]
 8004afe:	6813      	ldr	r3, [r2, #0]
 8004b00:	b933      	cbnz	r3, 8004b10 <_free_r+0x30>
 8004b02:	6063      	str	r3, [r4, #4]
 8004b04:	6014      	str	r4, [r2, #0]
 8004b06:	b003      	add	sp, #12
 8004b08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b0c:	f7ff bfe2 	b.w	8004ad4 <__malloc_unlock>
 8004b10:	42a3      	cmp	r3, r4
 8004b12:	d908      	bls.n	8004b26 <_free_r+0x46>
 8004b14:	6825      	ldr	r5, [r4, #0]
 8004b16:	1961      	adds	r1, r4, r5
 8004b18:	428b      	cmp	r3, r1
 8004b1a:	bf01      	itttt	eq
 8004b1c:	6819      	ldreq	r1, [r3, #0]
 8004b1e:	685b      	ldreq	r3, [r3, #4]
 8004b20:	1949      	addeq	r1, r1, r5
 8004b22:	6021      	streq	r1, [r4, #0]
 8004b24:	e7ed      	b.n	8004b02 <_free_r+0x22>
 8004b26:	461a      	mov	r2, r3
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	b10b      	cbz	r3, 8004b30 <_free_r+0x50>
 8004b2c:	42a3      	cmp	r3, r4
 8004b2e:	d9fa      	bls.n	8004b26 <_free_r+0x46>
 8004b30:	6811      	ldr	r1, [r2, #0]
 8004b32:	1855      	adds	r5, r2, r1
 8004b34:	42a5      	cmp	r5, r4
 8004b36:	d10b      	bne.n	8004b50 <_free_r+0x70>
 8004b38:	6824      	ldr	r4, [r4, #0]
 8004b3a:	4421      	add	r1, r4
 8004b3c:	1854      	adds	r4, r2, r1
 8004b3e:	42a3      	cmp	r3, r4
 8004b40:	6011      	str	r1, [r2, #0]
 8004b42:	d1e0      	bne.n	8004b06 <_free_r+0x26>
 8004b44:	681c      	ldr	r4, [r3, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	6053      	str	r3, [r2, #4]
 8004b4a:	4421      	add	r1, r4
 8004b4c:	6011      	str	r1, [r2, #0]
 8004b4e:	e7da      	b.n	8004b06 <_free_r+0x26>
 8004b50:	d902      	bls.n	8004b58 <_free_r+0x78>
 8004b52:	230c      	movs	r3, #12
 8004b54:	6003      	str	r3, [r0, #0]
 8004b56:	e7d6      	b.n	8004b06 <_free_r+0x26>
 8004b58:	6825      	ldr	r5, [r4, #0]
 8004b5a:	1961      	adds	r1, r4, r5
 8004b5c:	428b      	cmp	r3, r1
 8004b5e:	bf04      	itt	eq
 8004b60:	6819      	ldreq	r1, [r3, #0]
 8004b62:	685b      	ldreq	r3, [r3, #4]
 8004b64:	6063      	str	r3, [r4, #4]
 8004b66:	bf04      	itt	eq
 8004b68:	1949      	addeq	r1, r1, r5
 8004b6a:	6021      	streq	r1, [r4, #0]
 8004b6c:	6054      	str	r4, [r2, #4]
 8004b6e:	e7ca      	b.n	8004b06 <_free_r+0x26>
 8004b70:	b003      	add	sp, #12
 8004b72:	bd30      	pop	{r4, r5, pc}
 8004b74:	20001ab8 	.word	0x20001ab8

08004b78 <_init>:
 8004b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b7a:	bf00      	nop
 8004b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b7e:	bc08      	pop	{r3}
 8004b80:	469e      	mov	lr, r3
 8004b82:	4770      	bx	lr

08004b84 <_fini>:
 8004b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b86:	bf00      	nop
 8004b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b8a:	bc08      	pop	{r3}
 8004b8c:	469e      	mov	lr, r3
 8004b8e:	4770      	bx	lr
