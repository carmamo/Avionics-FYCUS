
EPS_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008460  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  080085f0  080085f0  000185f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008744  08008744  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008744  08008744  00018744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800874c  0800874c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800874c  0800874c  0001874c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008750  08008750  00018750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008754  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000031ac  20000074  080087c8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00001400  20003220  080087c8  00023220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000231c2  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000439f  00000000  00000000  00043266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cb8  00000000  00000000  00047608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b10  00000000  00000000  000492c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007ffd  00000000  00000000  0004add0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021e4b  00000000  00000000  00052dcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6524  00000000  00000000  00074c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016b13c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d0c  00000000  00000000  0016b18c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080085d8 	.word	0x080085d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080085d8 	.word	0x080085d8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <get_size>:

static LTC4162_t dev;


static inline uint8_t get_size(uint16_t registerinfo)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	80fb      	strh	r3, [r7, #6]
  return ((registerinfo >> 8) & 0x0F) + 1;
 80004de:	88fb      	ldrh	r3, [r7, #6]
 80004e0:	0a1b      	lsrs	r3, r3, #8
 80004e2:	b29b      	uxth	r3, r3
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	f003 030f 	and.w	r3, r3, #15
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	3301      	adds	r3, #1
 80004ee:	b2db      	uxtb	r3, r3
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	370c      	adds	r7, #12
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr

080004fc <get_command_code>:
static inline uint16_t get_command_code(uint16_t registerinfo)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	80fb      	strh	r3, [r7, #6]
  return (registerinfo) & 0xFF;
 8000506:	88fb      	ldrh	r3, [r7, #6]
 8000508:	b2db      	uxtb	r3, r3
 800050a:	b29b      	uxth	r3, r3
}
 800050c:	4618      	mov	r0, r3
 800050e:	370c      	adds	r7, #12
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr

08000518 <get_offset>:
static inline uint8_t get_offset(uint16_t registerinfo)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	80fb      	strh	r3, [r7, #6]
  return (registerinfo >> 12) & 0x0F;
 8000522:	88fb      	ldrh	r3, [r7, #6]
 8000524:	0b1b      	lsrs	r3, r3, #12
 8000526:	b29b      	uxth	r3, r3
 8000528:	b2db      	uxtb	r3, r3
 800052a:	f003 030f 	and.w	r3, r3, #15
 800052e:	b2db      	uxtb	r3, r3
}
 8000530:	4618      	mov	r0, r3
 8000532:	370c      	adds	r7, #12
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr

0800053c <get_mask>:
static inline uint16_t get_mask(uint16_t registerinfo)
{
 800053c:	b590      	push	{r4, r7, lr}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	80fb      	strh	r3, [r7, #6]
  uint8_t size = get_size(registerinfo);
 8000546:	88fb      	ldrh	r3, [r7, #6]
 8000548:	4618      	mov	r0, r3
 800054a:	f7ff ffc3 	bl	80004d4 <get_size>
 800054e:	4603      	mov	r3, r0
 8000550:	73fb      	strb	r3, [r7, #15]
  if (size == LTC4162_WORD_SIZE)
 8000552:	7bfb      	ldrb	r3, [r7, #15]
 8000554:	2b10      	cmp	r3, #16
 8000556:	d102      	bne.n	800055e <get_mask+0x22>
  {
    return UINT16_MAX;
 8000558:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800055c:	e00c      	b.n	8000578 <get_mask+0x3c>
  }
  return (uint16_t)(((1 << size) - 1) << get_offset(registerinfo));
 800055e:	7bfb      	ldrb	r3, [r7, #15]
 8000560:	2201      	movs	r2, #1
 8000562:	fa02 f303 	lsl.w	r3, r2, r3
 8000566:	1e5c      	subs	r4, r3, #1
 8000568:	88fb      	ldrh	r3, [r7, #6]
 800056a:	4618      	mov	r0, r3
 800056c:	f7ff ffd4 	bl	8000518 <get_offset>
 8000570:	4603      	mov	r3, r0
 8000572:	fa04 f303 	lsl.w	r3, r4, r3
 8000576:	b29b      	uxth	r3, r3
}
 8000578:	4618      	mov	r0, r3
 800057a:	3714      	adds	r7, #20
 800057c:	46bd      	mov	sp, r7
 800057e:	bd90      	pop	{r4, r7, pc}

08000580 <LTC4162_Init>:


void LTC4162_Init(I2C_HandleTypeDef *i2c)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	static uint16_t cell_count;

	dev.i2cHandle = i2c;
 8000588:	4a11      	ldr	r2, [pc, #68]	; (80005d0 <LTC4162_Init+0x50>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6013      	str	r3, [r2, #0]

	LTC4162_SetReg(LTC4162_FORCE_TELEMETRY_ON, true);
 800058e:	2101      	movs	r1, #1
 8000590:	f242 0014 	movw	r0, #8212	; 0x2014
 8000594:	f000 f822 	bl	80005dc <LTC4162_SetReg>

	LTC4162_SetReg(LTC4162_MPPT_EN, true);
 8000598:	2101      	movs	r1, #1
 800059a:	f241 0014 	movw	r0, #4116	; 0x1014
 800059e:	f000 f81d 	bl	80005dc <LTC4162_SetReg>

	LTC4162_SetReg(LTC4162_TELEMETRY_SPEED, LTC4162_TELEMETRY_SPEED_ENUM_TEL_HIGH_SPEED);
 80005a2:	2101      	movs	r1, #1
 80005a4:	f243 0014 	movw	r0, #12308	; 0x3014
 80005a8:	f000 f818 	bl	80005dc <LTC4162_SetReg>

	LTC4162_GetReg(LTC4162_CELL_COUNT, &cell_count);
 80005ac:	4909      	ldr	r1, [pc, #36]	; (80005d4 <LTC4162_Init+0x54>)
 80005ae:	f240 3043 	movw	r0, #835	; 0x343
 80005b2:	f000 f873 	bl	800069c <LTC4162_GetReg>

	if(cell_count == 2) HAL_GPIO_WritePin(LED_YL_GPIO_Port, LED_YL_Pin, GPIO_PIN_SET);
 80005b6:	4b07      	ldr	r3, [pc, #28]	; (80005d4 <LTC4162_Init+0x54>)
 80005b8:	881b      	ldrh	r3, [r3, #0]
 80005ba:	2b02      	cmp	r3, #2
 80005bc:	d104      	bne.n	80005c8 <LTC4162_Init+0x48>
 80005be:	2201      	movs	r2, #1
 80005c0:	2108      	movs	r1, #8
 80005c2:	4805      	ldr	r0, [pc, #20]	; (80005d8 <LTC4162_Init+0x58>)
 80005c4:	f001 fc54 	bl	8001e70 <HAL_GPIO_WritePin>
}
 80005c8:	bf00      	nop
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20000090 	.word	0x20000090
 80005d4:	20000094 	.word	0x20000094
 80005d8:	48000800 	.word	0x48000800

080005dc <LTC4162_SetReg>:


HAL_StatusTypeDef LTC4162_SetReg(uint16_t reg, uint16_t data)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af04      	add	r7, sp, #16
 80005e2:	4603      	mov	r3, r0
 80005e4:	460a      	mov	r2, r1
 80005e6:	80fb      	strh	r3, [r7, #6]
 80005e8:	4613      	mov	r3, r2
 80005ea:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef status;
	uint16_t command_code = get_command_code(reg);
 80005ec:	88fb      	ldrh	r3, [r7, #6]
 80005ee:	4618      	mov	r0, r3
 80005f0:	f7ff ff84 	bl	80004fc <get_command_code>
 80005f4:	4603      	mov	r3, r0
 80005f6:	81fb      	strh	r3, [r7, #14]

	if (get_size(reg) != LTC4162_WORD_SIZE)
 80005f8:	88fb      	ldrh	r3, [r7, #6]
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff ff6a 	bl	80004d4 <get_size>
 8000600:	4603      	mov	r3, r0
 8000602:	2b10      	cmp	r3, #16
 8000604:	d032      	beq.n	800066c <LTC4162_SetReg+0x90>
	  {
	    uint8_t offset = get_offset(reg);
 8000606:	88fb      	ldrh	r3, [r7, #6]
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff ff85 	bl	8000518 <get_offset>
 800060e:	4603      	mov	r3, r0
 8000610:	737b      	strb	r3, [r7, #13]
	    uint16_t mask = get_mask(reg);
 8000612:	88fb      	ldrh	r3, [r7, #6]
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff ff91 	bl	800053c <get_mask>
 800061a:	4603      	mov	r3, r0
 800061c:	817b      	strh	r3, [r7, #10]
	    static uint16_t read_data;
	    status = HAL_I2C_Mem_Read(dev.i2cHandle, LTC4162_ADDR_68, command_code, 1, (uint8_t *)&read_data, 2, 100);
 800061e:	4b1d      	ldr	r3, [pc, #116]	; (8000694 <LTC4162_SetReg+0xb8>)
 8000620:	6818      	ldr	r0, [r3, #0]
 8000622:	89fa      	ldrh	r2, [r7, #14]
 8000624:	2364      	movs	r3, #100	; 0x64
 8000626:	9302      	str	r3, [sp, #8]
 8000628:	2302      	movs	r3, #2
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <LTC4162_SetReg+0xbc>)
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	2301      	movs	r3, #1
 8000632:	21d0      	movs	r1, #208	; 0xd0
 8000634:	f001 fdf2 	bl	800221c <HAL_I2C_Mem_Read>
 8000638:	4603      	mov	r3, r0
 800063a:	727b      	strb	r3, [r7, #9]
	    if (status != HAL_OK) return status;
 800063c:	7a7b      	ldrb	r3, [r7, #9]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <LTC4162_SetReg+0x6a>
 8000642:	7a7b      	ldrb	r3, [r7, #9]
 8000644:	e022      	b.n	800068c <LTC4162_SetReg+0xb0>
	    data = (read_data & ~mask) | (data << offset);
 8000646:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800064a:	43db      	mvns	r3, r3
 800064c:	b21a      	sxth	r2, r3
 800064e:	4b12      	ldr	r3, [pc, #72]	; (8000698 <LTC4162_SetReg+0xbc>)
 8000650:	881b      	ldrh	r3, [r3, #0]
 8000652:	b21b      	sxth	r3, r3
 8000654:	4013      	ands	r3, r2
 8000656:	b21a      	sxth	r2, r3
 8000658:	88bb      	ldrh	r3, [r7, #4]
 800065a:	4619      	mov	r1, r3
 800065c:	7b7b      	ldrb	r3, [r7, #13]
 800065e:	fa01 f303 	lsl.w	r3, r1, r3
 8000662:	b21b      	sxth	r3, r3
 8000664:	4313      	orrs	r3, r2
 8000666:	b21b      	sxth	r3, r3
 8000668:	b29b      	uxth	r3, r3
 800066a:	80bb      	strh	r3, [r7, #4]
	  }
	status = HAL_I2C_Mem_Write(dev.i2cHandle, LTC4162_ADDR_68, command_code, 1, (uint8_t *)&data, 2, 100);
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <LTC4162_SetReg+0xb8>)
 800066e:	6818      	ldr	r0, [r3, #0]
 8000670:	89fa      	ldrh	r2, [r7, #14]
 8000672:	2364      	movs	r3, #100	; 0x64
 8000674:	9302      	str	r3, [sp, #8]
 8000676:	2302      	movs	r3, #2
 8000678:	9301      	str	r3, [sp, #4]
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	2301      	movs	r3, #1
 8000680:	21d0      	movs	r1, #208	; 0xd0
 8000682:	f001 fcb7 	bl	8001ff4 <HAL_I2C_Mem_Write>
 8000686:	4603      	mov	r3, r0
 8000688:	727b      	strb	r3, [r7, #9]
	return status;
 800068a:	7a7b      	ldrb	r3, [r7, #9]
}
 800068c:	4618      	mov	r0, r3
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000090 	.word	0x20000090
 8000698:	20000096 	.word	0x20000096

0800069c <LTC4162_GetReg>:

HAL_StatusTypeDef LTC4162_GetReg(uint16_t reg, uint16_t *rxdata)
{
 800069c:	b590      	push	{r4, r7, lr}
 800069e:	b089      	sub	sp, #36	; 0x24
 80006a0:	af04      	add	r7, sp, #16
 80006a2:	4603      	mov	r3, r0
 80006a4:	6039      	str	r1, [r7, #0]
 80006a6:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;
	uint16_t command_code = get_command_code(reg);
 80006a8:	88fb      	ldrh	r3, [r7, #6]
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff ff26 	bl	80004fc <get_command_code>
 80006b0:	4603      	mov	r3, r0
 80006b2:	81fb      	strh	r3, [r7, #14]

	status = HAL_I2C_Mem_Read(dev.i2cHandle, LTC4162_ADDR_68, command_code, 1, (uint8_t *)rxdata, 2, 100);
 80006b4:	4b1a      	ldr	r3, [pc, #104]	; (8000720 <LTC4162_GetReg+0x84>)
 80006b6:	6818      	ldr	r0, [r3, #0]
 80006b8:	89fa      	ldrh	r2, [r7, #14]
 80006ba:	2364      	movs	r3, #100	; 0x64
 80006bc:	9302      	str	r3, [sp, #8]
 80006be:	2302      	movs	r3, #2
 80006c0:	9301      	str	r3, [sp, #4]
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	9300      	str	r3, [sp, #0]
 80006c6:	2301      	movs	r3, #1
 80006c8:	21d0      	movs	r1, #208	; 0xd0
 80006ca:	f001 fda7 	bl	800221c <HAL_I2C_Mem_Read>
 80006ce:	4603      	mov	r3, r0
 80006d0:	737b      	strb	r3, [r7, #13]

	if(get_size(reg) == LTC4162_WORD_SIZE) return status;
 80006d2:	88fb      	ldrh	r3, [r7, #6]
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff fefd 	bl	80004d4 <get_size>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b10      	cmp	r3, #16
 80006de:	d101      	bne.n	80006e4 <LTC4162_GetReg+0x48>
 80006e0:	7b7b      	ldrb	r3, [r7, #13]
 80006e2:	e019      	b.n	8000718 <LTC4162_GetReg+0x7c>

	*rxdata &= get_mask(reg);
 80006e4:	88fb      	ldrh	r3, [r7, #6]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ff28 	bl	800053c <get_mask>
 80006ec:	4603      	mov	r3, r0
 80006ee:	461a      	mov	r2, r3
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	881b      	ldrh	r3, [r3, #0]
 80006f4:	4013      	ands	r3, r2
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	801a      	strh	r2, [r3, #0]
	*rxdata = *rxdata >> get_offset(reg);
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	881b      	ldrh	r3, [r3, #0]
 8000700:	461c      	mov	r4, r3
 8000702:	88fb      	ldrh	r3, [r7, #6]
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ff07 	bl	8000518 <get_offset>
 800070a:	4603      	mov	r3, r0
 800070c:	fa44 f303 	asr.w	r3, r4, r3
 8000710:	b29a      	uxth	r2, r3
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	801a      	strh	r2, [r3, #0]
	return status;
 8000716:	7b7b      	ldrb	r3, [r7, #13]
}
 8000718:	4618      	mov	r0, r3
 800071a:	3714      	adds	r7, #20
 800071c:	46bd      	mov	sp, r7
 800071e:	bd90      	pop	{r4, r7, pc}
 8000720:	20000090 	.word	0x20000090

08000724 <bus_packet_EncodePacketize>:
	buffer[packet->length] = 0;		// String terminator
}


HAL_StatusTypeDef bus_packet_EncodePacketize(uint8_t type, uint8_t apid, uint8_t ecf_flag, uint8_t *data, uint32_t data_length, uint8_t *buffer_out)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	4603      	mov	r3, r0
 800072e:	71fb      	strb	r3, [r7, #7]
 8000730:	460b      	mov	r3, r1
 8000732:	71bb      	strb	r3, [r7, #6]
 8000734:	4613      	mov	r3, r2
 8000736:	717b      	strb	r3, [r7, #5]
	uint32_t length = data_length + BUS_PACKET_HEADER_SIZE + BUS_PACKET_ECF_SIZE;
 8000738:	69bb      	ldr	r3, [r7, #24]
 800073a:	3304      	adds	r3, #4
 800073c:	60fb      	str	r3, [r7, #12]

	if(length > BUS_PACKET_BUS_SIZE)	return HAL_ERROR;
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	2b7f      	cmp	r3, #127	; 0x7f
 8000742:	d901      	bls.n	8000748 <bus_packet_EncodePacketize+0x24>
 8000744:	2301      	movs	r3, #1
 8000746:	e03d      	b.n	80007c4 <bus_packet_EncodePacketize+0xa0>

	memcpy(&buffer_out[BUS_PACKET_HEADER_SIZE], data, data_length);
 8000748:	69fb      	ldr	r3, [r7, #28]
 800074a:	3302      	adds	r3, #2
 800074c:	69ba      	ldr	r2, [r7, #24]
 800074e:	6839      	ldr	r1, [r7, #0]
 8000750:	4618      	mov	r0, r3
 8000752:	f007 fe69 	bl	8008428 <memcpy>


	buffer_out[0] = (type<<7) | (apid & 0b01111111);
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	01db      	lsls	r3, r3, #7
 800075a:	b25a      	sxtb	r2, r3
 800075c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000760:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000764:	b25b      	sxtb	r3, r3
 8000766:	4313      	orrs	r3, r2
 8000768:	b25b      	sxtb	r3, r3
 800076a:	b2da      	uxtb	r2, r3
 800076c:	69fb      	ldr	r3, [r7, #28]
 800076e:	701a      	strb	r2, [r3, #0]
	buffer_out[1] = (ecf_flag<<7) | (length & 0b01111111);
 8000770:	797b      	ldrb	r3, [r7, #5]
 8000772:	01db      	lsls	r3, r3, #7
 8000774:	b2d9      	uxtb	r1, r3
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	b2db      	uxtb	r3, r3
 800077a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800077e:	b2da      	uxtb	r2, r3
 8000780:	69fb      	ldr	r3, [r7, #28]
 8000782:	3301      	adds	r3, #1
 8000784:	430a      	orrs	r2, r1
 8000786:	b2d2      	uxtb	r2, r2
 8000788:	701a      	strb	r2, [r3, #0]

	if (ecf_flag)	// There is CRC?
 800078a:	797b      	ldrb	r3, [r7, #5]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d018      	beq.n	80007c2 <bus_packet_EncodePacketize+0x9e>
	{
#ifdef STM32_MCU
		uint16_t ecf = HAL_CRC_Calculate(&hcrc, (uint32_t *)buffer_out, length-BUS_PACKET_ECF_SIZE);
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	3b02      	subs	r3, #2
 8000794:	461a      	mov	r2, r3
 8000796:	69f9      	ldr	r1, [r7, #28]
 8000798:	480c      	ldr	r0, [pc, #48]	; (80007cc <bus_packet_EncodePacketize+0xa8>)
 800079a:	f001 f855 	bl	8001848 <HAL_CRC_Calculate>
 800079e:	4603      	mov	r3, r0
 80007a0:	817b      	strh	r3, [r7, #10]
#else
		uint16_t ecf = bus_packet_CRC16CCSDSCalculate(0, buffer_out, length-BUS_PACKET_ECF_SIZE);
#endif
		buffer_out[length-BUS_PACKET_ECF_SIZE] = ecf>>8;
 80007a2:	897b      	ldrh	r3, [r7, #10]
 80007a4:	0a1b      	lsrs	r3, r3, #8
 80007a6:	b299      	uxth	r1, r3
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	3b02      	subs	r3, #2
 80007ac:	69fa      	ldr	r2, [r7, #28]
 80007ae:	4413      	add	r3, r2
 80007b0:	b2ca      	uxtb	r2, r1
 80007b2:	701a      	strb	r2, [r3, #0]
		buffer_out[length-BUS_PACKET_ECF_SIZE+1] = ecf & 0xFF;
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	3b01      	subs	r3, #1
 80007b8:	69fa      	ldr	r2, [r7, #28]
 80007ba:	4413      	add	r3, r2
 80007bc:	897a      	ldrh	r2, [r7, #10]
 80007be:	b2d2      	uxtb	r2, r2
 80007c0:	701a      	strb	r2, [r3, #0]
	}

	return HAL_OK;
 80007c2:	2300      	movs	r3, #0
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000098 	.word	0x20000098

080007d0 <bus_packet_CRC16CCSDSConfig>:



#ifdef STM32_MCU
HAL_StatusTypeDef bus_packet_CRC16CCSDSConfig()
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
	if(HAL_CRC_DeInit(&hcrc) != HAL_OK)
 80007d4:	4819      	ldr	r0, [pc, #100]	; (800083c <bus_packet_CRC16CCSDSConfig+0x6c>)
 80007d6:	f001 f807 	bl	80017e8 <HAL_CRC_DeInit>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <bus_packet_CRC16CCSDSConfig+0x14>
			return HAL_ERROR;
 80007e0:	2301      	movs	r3, #1
 80007e2:	e028      	b.n	8000836 <bus_packet_CRC16CCSDSConfig+0x66>
	hcrc.Instance = CRC;
 80007e4:	4b15      	ldr	r3, [pc, #84]	; (800083c <bus_packet_CRC16CCSDSConfig+0x6c>)
 80007e6:	4a16      	ldr	r2, [pc, #88]	; (8000840 <bus_packet_CRC16CCSDSConfig+0x70>)
 80007e8:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80007ea:	4b14      	ldr	r3, [pc, #80]	; (800083c <bus_packet_CRC16CCSDSConfig+0x6c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 80007f0:	4b12      	ldr	r3, [pc, #72]	; (800083c <bus_packet_CRC16CCSDSConfig+0x6c>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InitValue = 0;
 80007f6:	4b11      	ldr	r3, [pc, #68]	; (800083c <bus_packet_CRC16CCSDSConfig+0x6c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <bus_packet_CRC16CCSDSConfig+0x6c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <bus_packet_CRC16CCSDSConfig+0x6c>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <bus_packet_CRC16CCSDSConfig+0x6c>)
 800080a:	2201      	movs	r2, #1
 800080c:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800080e:	480b      	ldr	r0, [pc, #44]	; (800083c <bus_packet_CRC16CCSDSConfig+0x6c>)
 8000810:	f000 ff86 	bl	8001720 <HAL_CRC_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <bus_packet_CRC16CCSDSConfig+0x4e>
		return HAL_ERROR;
 800081a:	2301      	movs	r3, #1
 800081c:	e00b      	b.n	8000836 <bus_packet_CRC16CCSDSConfig+0x66>
	if(HAL_CRCEx_Polynomial_Set(&hcrc, 0x1021, CRC_POLYLENGTH_16B) != HAL_OK)
 800081e:	2208      	movs	r2, #8
 8000820:	f241 0121 	movw	r1, #4129	; 0x1021
 8000824:	4805      	ldr	r0, [pc, #20]	; (800083c <bus_packet_CRC16CCSDSConfig+0x6c>)
 8000826:	f001 f923 	bl	8001a70 <HAL_CRCEx_Polynomial_Set>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <bus_packet_CRC16CCSDSConfig+0x64>
		return HAL_ERROR;
 8000830:	2301      	movs	r3, #1
 8000832:	e000      	b.n	8000836 <bus_packet_CRC16CCSDSConfig+0x66>
	else return HAL_OK;
 8000834:	2300      	movs	r3, #0
}
 8000836:	4618      	mov	r0, r3
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000098 	.word	0x20000098
 8000840:	40023000 	.word	0x40023000

08000844 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */

	__WFI();
 8000848:	bf30      	wfi
}
 800084a:	bf00      	nop
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <bus_packet_GetLength>:
void bus_packet_Packetize(uint8_t *buffer, bus_packet_t *packet);
HAL_StatusTypeDef bus_packet_EncodePacketize(uint8_t type, uint8_t apid, uint8_t ecf_flag, uint8_t *data, uint32_t data_length, uint8_t *buffer_out);

bus_sync_flag_t bus_packet_SyncFrameDetect(bus_sync_flag_t flag, uint8_t received_data);

static inline uint8_t bus_packet_GetLength(uint8_t *buffer) {return buffer[1]&0b01111111;}
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	3301      	adds	r3, #1
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000866:	b2db      	uxtb	r3, r3
 8000868:	4618      	mov	r0, r3
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr

08000874 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000878:	f000 fe13 	bl	80014a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800087c:	f000 f83e 	bl	80008fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000880:	f000 fa00 	bl	8000c84 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000884:	f000 f8ac 	bl	80009e0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000888:	f000 f8ea 	bl	8000a60 <MX_I2C2_Init>
  MX_TIM2_Init();
 800088c:	f000 f966 	bl	8000b5c <MX_TIM2_Init>
  MX_SPI1_Init();
 8000890:	f000 f926 	bl	8000ae0 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000894:	f000 f9c6 	bl	8000c24 <MX_USART3_UART_Init>
  MX_CRC_Init();
 8000898:	f000 f880 	bl	800099c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800089c:	f004 ff8e 	bl	80057bc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of MPPT_IC */
  MPPT_ICHandle = osThreadNew(prvMonitorMPPT, NULL, &MPPT_IC_attributes);
 80008a0:	4a0d      	ldr	r2, [pc, #52]	; (80008d8 <main+0x64>)
 80008a2:	2100      	movs	r1, #0
 80008a4:	480d      	ldr	r0, [pc, #52]	; (80008dc <main+0x68>)
 80008a6:	f004 ffd3 	bl	8005850 <osThreadNew>
 80008aa:	4603      	mov	r3, r0
 80008ac:	4a0c      	ldr	r2, [pc, #48]	; (80008e0 <main+0x6c>)
 80008ae:	6013      	str	r3, [r2, #0]

  /* creation of ReportStatus */
  ReportStatusHandle = osThreadNew(prvSendTelemetry, NULL, &ReportStatus_attributes);
 80008b0:	4a0c      	ldr	r2, [pc, #48]	; (80008e4 <main+0x70>)
 80008b2:	2100      	movs	r1, #0
 80008b4:	480c      	ldr	r0, [pc, #48]	; (80008e8 <main+0x74>)
 80008b6:	f004 ffcb 	bl	8005850 <osThreadNew>
 80008ba:	4603      	mov	r3, r0
 80008bc:	4a0b      	ldr	r2, [pc, #44]	; (80008ec <main+0x78>)
 80008be:	6013      	str	r3, [r2, #0]

  /* creation of PowerRails */
  PowerRailsHandle = osThreadNew(prvPowerManagement, NULL, &PowerRails_attributes);
 80008c0:	4a0b      	ldr	r2, [pc, #44]	; (80008f0 <main+0x7c>)
 80008c2:	2100      	movs	r1, #0
 80008c4:	480b      	ldr	r0, [pc, #44]	; (80008f4 <main+0x80>)
 80008c6:	f004 ffc3 	bl	8005850 <osThreadNew>
 80008ca:	4603      	mov	r3, r0
 80008cc:	4a0a      	ldr	r2, [pc, #40]	; (80008f8 <main+0x84>)
 80008ce:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80008d0:	f004 ff98 	bl	8005804 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <main+0x60>
 80008d6:	bf00      	nop
 80008d8:	08008630 	.word	0x08008630
 80008dc:	08000da9 	.word	0x08000da9
 80008e0:	20000298 	.word	0x20000298
 80008e4:	08008654 	.word	0x08008654
 80008e8:	08000e4d 	.word	0x08000e4d
 80008ec:	2000029c 	.word	0x2000029c
 80008f0:	08008678 	.word	0x08008678
 80008f4:	08000ebd 	.word	0x08000ebd
 80008f8:	200002a0 	.word	0x200002a0

080008fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b096      	sub	sp, #88	; 0x58
 8000900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	2244      	movs	r2, #68	; 0x44
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f007 fd9a 	bl	8008444 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000910:	463b      	mov	r3, r7
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
 800091c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800091e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000922:	f002 f8e1 	bl	8002ae8 <HAL_PWREx_ControlVoltageScaling>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800092c:	f000 faf2 	bl	8000f14 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000930:	2301      	movs	r3, #1
 8000932:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000934:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000938:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800093a:	2302      	movs	r3, #2
 800093c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800093e:	2303      	movs	r3, #3
 8000940:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000942:	2302      	movs	r3, #2
 8000944:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000946:	2310      	movs	r3, #16
 8000948:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800094a:	2307      	movs	r3, #7
 800094c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800094e:	2302      	movs	r3, #2
 8000950:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000952:	2302      	movs	r3, #2
 8000954:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	4618      	mov	r0, r3
 800095c:	f002 f91a 	bl	8002b94 <HAL_RCC_OscConfig>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000966:	f000 fad5 	bl	8000f14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800096a:	230f      	movs	r3, #15
 800096c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800096e:	2303      	movs	r3, #3
 8000970:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000972:	2300      	movs	r3, #0
 8000974:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800097a:	2300      	movs	r3, #0
 800097c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800097e:	463b      	mov	r3, r7
 8000980:	2104      	movs	r1, #4
 8000982:	4618      	mov	r0, r3
 8000984:	f002 fd1a 	bl	80033bc <HAL_RCC_ClockConfig>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800098e:	f000 fac1 	bl	8000f14 <Error_Handler>
  }
}
 8000992:	bf00      	nop
 8000994:	3758      	adds	r7, #88	; 0x58
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80009a0:	4b0d      	ldr	r3, [pc, #52]	; (80009d8 <MX_CRC_Init+0x3c>)
 80009a2:	4a0e      	ldr	r2, [pc, #56]	; (80009dc <MX_CRC_Init+0x40>)
 80009a4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80009a6:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <MX_CRC_Init+0x3c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80009ac:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <MX_CRC_Init+0x3c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <MX_CRC_Init+0x3c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80009b8:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <MX_CRC_Init+0x3c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <MX_CRC_Init+0x3c>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80009c4:	4804      	ldr	r0, [pc, #16]	; (80009d8 <MX_CRC_Init+0x3c>)
 80009c6:	f000 feab 	bl	8001720 <HAL_CRC_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80009d0:	f000 faa0 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000098 	.word	0x20000098
 80009dc:	40023000 	.word	0x40023000

080009e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009e4:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <MX_I2C1_Init+0x74>)
 80009e6:	4a1c      	ldr	r2, [pc, #112]	; (8000a58 <MX_I2C1_Init+0x78>)
 80009e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80009ea:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <MX_I2C1_Init+0x74>)
 80009ec:	4a1b      	ldr	r2, [pc, #108]	; (8000a5c <MX_I2C1_Init+0x7c>)
 80009ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009f0:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <MX_I2C1_Init+0x74>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009f6:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <MX_I2C1_Init+0x74>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009fc:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <MX_I2C1_Init+0x74>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a02:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <MX_I2C1_Init+0x74>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <MX_I2C1_Init+0x74>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <MX_I2C1_Init+0x74>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <MX_I2C1_Init+0x74>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a1a:	480e      	ldr	r0, [pc, #56]	; (8000a54 <MX_I2C1_Init+0x74>)
 8000a1c:	f001 fa5a 	bl	8001ed4 <HAL_I2C_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a26:	f000 fa75 	bl	8000f14 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4809      	ldr	r0, [pc, #36]	; (8000a54 <MX_I2C1_Init+0x74>)
 8000a2e:	f001 ffb5 	bl	800299c <HAL_I2CEx_ConfigAnalogFilter>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a38:	f000 fa6c 	bl	8000f14 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_I2C1_Init+0x74>)
 8000a40:	f001 fff7 	bl	8002a32 <HAL_I2CEx_ConfigDigitalFilter>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a4a:	f000 fa63 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	200000bc 	.word	0x200000bc
 8000a58:	40005400 	.word	0x40005400
 8000a5c:	10909cec 	.word	0x10909cec

08000a60 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a64:	4b1b      	ldr	r3, [pc, #108]	; (8000ad4 <MX_I2C2_Init+0x74>)
 8000a66:	4a1c      	ldr	r2, [pc, #112]	; (8000ad8 <MX_I2C2_Init+0x78>)
 8000a68:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000a6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ad4 <MX_I2C2_Init+0x74>)
 8000a6c:	4a1b      	ldr	r2, [pc, #108]	; (8000adc <MX_I2C2_Init+0x7c>)
 8000a6e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a70:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <MX_I2C2_Init+0x74>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a76:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <MX_I2C2_Init+0x74>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a7c:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <MX_I2C2_Init+0x74>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a82:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <MX_I2C2_Init+0x74>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <MX_I2C2_Init+0x74>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MX_I2C2_Init+0x74>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <MX_I2C2_Init+0x74>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a9a:	480e      	ldr	r0, [pc, #56]	; (8000ad4 <MX_I2C2_Init+0x74>)
 8000a9c:	f001 fa1a 	bl	8001ed4 <HAL_I2C_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000aa6:	f000 fa35 	bl	8000f14 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4809      	ldr	r0, [pc, #36]	; (8000ad4 <MX_I2C2_Init+0x74>)
 8000aae:	f001 ff75 	bl	800299c <HAL_I2CEx_ConfigAnalogFilter>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ab8:	f000 fa2c 	bl	8000f14 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000abc:	2100      	movs	r1, #0
 8000abe:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_I2C2_Init+0x74>)
 8000ac0:	f001 ffb7 	bl	8002a32 <HAL_I2CEx_ConfigDigitalFilter>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000aca:	f000 fa23 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000110 	.word	0x20000110
 8000ad8:	40005800 	.word	0x40005800
 8000adc:	10909cec 	.word	0x10909cec

08000ae0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ae4:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <MX_SPI1_Init+0x74>)
 8000ae6:	4a1c      	ldr	r2, [pc, #112]	; (8000b58 <MX_SPI1_Init+0x78>)
 8000ae8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aea:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <MX_SPI1_Init+0x74>)
 8000aec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000af0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000af2:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <MX_SPI1_Init+0x74>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000af8:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <MX_SPI1_Init+0x74>)
 8000afa:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000afe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b00:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <MX_SPI1_Init+0x74>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b06:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <MX_SPI1_Init+0x74>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <MX_SPI1_Init+0x74>)
 8000b0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b12:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b14:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <MX_SPI1_Init+0x74>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <MX_SPI1_Init+0x74>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <MX_SPI1_Init+0x74>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b26:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <MX_SPI1_Init+0x74>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b2c:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <MX_SPI1_Init+0x74>)
 8000b2e:	2207      	movs	r2, #7
 8000b30:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b32:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <MX_SPI1_Init+0x74>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <MX_SPI1_Init+0x74>)
 8000b3a:	2208      	movs	r2, #8
 8000b3c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b3e:	4805      	ldr	r0, [pc, #20]	; (8000b54 <MX_SPI1_Init+0x74>)
 8000b40:	f003 f99c 	bl	8003e7c <HAL_SPI_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000b4a:	f000 f9e3 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000164 	.word	0x20000164
 8000b58:	40013000 	.word	0x40013000

08000b5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	; 0x28
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b62:	f107 031c 	add.w	r3, r7, #28
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b6e:	463b      	mov	r3, r7
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
 8000b7c:	615a      	str	r2, [r3, #20]
 8000b7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b80:	4b27      	ldr	r3, [pc, #156]	; (8000c20 <MX_TIM2_Init+0xc4>)
 8000b82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b88:	4b25      	ldr	r3, [pc, #148]	; (8000c20 <MX_TIM2_Init+0xc4>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8e:	4b24      	ldr	r3, [pc, #144]	; (8000c20 <MX_TIM2_Init+0xc4>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000b94:	4b22      	ldr	r3, [pc, #136]	; (8000c20 <MX_TIM2_Init+0xc4>)
 8000b96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b9c:	4b20      	ldr	r3, [pc, #128]	; (8000c20 <MX_TIM2_Init+0xc4>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba2:	4b1f      	ldr	r3, [pc, #124]	; (8000c20 <MX_TIM2_Init+0xc4>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ba8:	481d      	ldr	r0, [pc, #116]	; (8000c20 <MX_TIM2_Init+0xc4>)
 8000baa:	f003 fabf 	bl	800412c <HAL_TIM_PWM_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000bb4:	f000 f9ae 	bl	8000f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bc0:	f107 031c 	add.w	r3, r7, #28
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4816      	ldr	r0, [pc, #88]	; (8000c20 <MX_TIM2_Init+0xc4>)
 8000bc8:	f004 f844 	bl	8004c54 <HAL_TIMEx_MasterConfigSynchronization>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000bd2:	f000 f99f 	bl	8000f14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bd6:	2360      	movs	r3, #96	; 0x60
 8000bd8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bde:	2300      	movs	r3, #0
 8000be0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000be2:	2300      	movs	r3, #0
 8000be4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000be6:	463b      	mov	r3, r7
 8000be8:	2208      	movs	r2, #8
 8000bea:	4619      	mov	r1, r3
 8000bec:	480c      	ldr	r0, [pc, #48]	; (8000c20 <MX_TIM2_Init+0xc4>)
 8000bee:	f003 fc13 	bl	8004418 <HAL_TIM_PWM_ConfigChannel>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000bf8:	f000 f98c 	bl	8000f14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bfc:	463b      	mov	r3, r7
 8000bfe:	220c      	movs	r2, #12
 8000c00:	4619      	mov	r1, r3
 8000c02:	4807      	ldr	r0, [pc, #28]	; (8000c20 <MX_TIM2_Init+0xc4>)
 8000c04:	f003 fc08 	bl	8004418 <HAL_TIM_PWM_ConfigChannel>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000c0e:	f000 f981 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c12:	4803      	ldr	r0, [pc, #12]	; (8000c20 <MX_TIM2_Init+0xc4>)
 8000c14:	f000 faec 	bl	80011f0 <HAL_TIM_MspPostInit>

}
 8000c18:	bf00      	nop
 8000c1a:	3728      	adds	r7, #40	; 0x28
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	200001c8 	.word	0x200001c8

08000c24 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c28:	4b14      	ldr	r3, [pc, #80]	; (8000c7c <MX_USART3_UART_Init+0x58>)
 8000c2a:	4a15      	ldr	r2, [pc, #84]	; (8000c80 <MX_USART3_UART_Init+0x5c>)
 8000c2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 460800;
 8000c2e:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <MX_USART3_UART_Init+0x58>)
 8000c30:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8000c34:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c36:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <MX_USART3_UART_Init+0x58>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <MX_USART3_UART_Init+0x58>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <MX_USART3_UART_Init+0x58>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <MX_USART3_UART_Init+0x58>)
 8000c4a:	220c      	movs	r2, #12
 8000c4c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <MX_USART3_UART_Init+0x58>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c54:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <MX_USART3_UART_Init+0x58>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c5a:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <MX_USART3_UART_Init+0x58>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <MX_USART3_UART_Init+0x58>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c66:	4805      	ldr	r0, [pc, #20]	; (8000c7c <MX_USART3_UART_Init+0x58>)
 8000c68:	f004 f878 	bl	8004d5c <HAL_UART_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c72:	f000 f94f 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000214 	.word	0x20000214
 8000c80:	40004800 	.word	0x40004800

08000c84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	; 0x28
 8000c88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]
 8000c98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9a:	4b40      	ldr	r3, [pc, #256]	; (8000d9c <MX_GPIO_Init+0x118>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9e:	4a3f      	ldr	r2, [pc, #252]	; (8000d9c <MX_GPIO_Init+0x118>)
 8000ca0:	f043 0304 	orr.w	r3, r3, #4
 8000ca4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ca6:	4b3d      	ldr	r3, [pc, #244]	; (8000d9c <MX_GPIO_Init+0x118>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000caa:	f003 0304 	and.w	r3, r3, #4
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cb2:	4b3a      	ldr	r3, [pc, #232]	; (8000d9c <MX_GPIO_Init+0x118>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb6:	4a39      	ldr	r2, [pc, #228]	; (8000d9c <MX_GPIO_Init+0x118>)
 8000cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cbe:	4b37      	ldr	r3, [pc, #220]	; (8000d9c <MX_GPIO_Init+0x118>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	4b34      	ldr	r3, [pc, #208]	; (8000d9c <MX_GPIO_Init+0x118>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cce:	4a33      	ldr	r2, [pc, #204]	; (8000d9c <MX_GPIO_Init+0x118>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd6:	4b31      	ldr	r3, [pc, #196]	; (8000d9c <MX_GPIO_Init+0x118>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce2:	4b2e      	ldr	r3, [pc, #184]	; (8000d9c <MX_GPIO_Init+0x118>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce6:	4a2d      	ldr	r2, [pc, #180]	; (8000d9c <MX_GPIO_Init+0x118>)
 8000ce8:	f043 0302 	orr.w	r3, r3, #2
 8000cec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cee:	4b2b      	ldr	r3, [pc, #172]	; (8000d9c <MX_GPIO_Init+0x118>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_R_Pin|LED_G_Pin, GPIO_PIN_SET);
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	2106      	movs	r1, #6
 8000cfe:	4828      	ldr	r0, [pc, #160]	; (8000da0 <MX_GPIO_Init+0x11c>)
 8000d00:	f001 f8b6 	bl	8001e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_YL_Pin|EN_5V_Pin, GPIO_PIN_RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	f44f 7102 	mov.w	r1, #520	; 0x208
 8000d0a:	4825      	ldr	r0, [pc, #148]	; (8000da0 <MX_GPIO_Init+0x11c>)
 8000d0c:	f001 f8b0 	bl	8001e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_3V3_GPIO_Port, EN_3V3_Pin, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d1a:	f001 f8a9 	bl	8001e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000d1e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000d22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d24:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d2e:	f107 0314 	add.w	r3, r7, #20
 8000d32:	4619      	mov	r1, r3
 8000d34:	481a      	ldr	r0, [pc, #104]	; (8000da0 <MX_GPIO_Init+0x11c>)
 8000d36:	f000 ff21 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_R_Pin LED_G_Pin LED_YL_Pin EN_5V_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_YL_Pin|EN_5V_Pin;
 8000d3a:	f240 230e 	movw	r3, #526	; 0x20e
 8000d3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d40:	2301      	movs	r3, #1
 8000d42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	4619      	mov	r1, r3
 8000d52:	4813      	ldr	r0, [pc, #76]	; (8000da0 <MX_GPIO_Init+0x11c>)
 8000d54:	f000 ff12 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : SBMALERT_Pin */
  GPIO_InitStruct.Pin = SBMALERT_Pin;
 8000d58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d5e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SBMALERT_GPIO_Port, &GPIO_InitStruct);
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	480d      	ldr	r0, [pc, #52]	; (8000da4 <MX_GPIO_Init+0x120>)
 8000d70:	f000 ff04 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_3V3_Pin */
  GPIO_InitStruct.Pin = EN_3V3_Pin;
 8000d74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2300      	movs	r3, #0
 8000d84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_3V3_GPIO_Port, &GPIO_InitStruct);
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d90:	f000 fef4 	bl	8001b7c <HAL_GPIO_Init>

}
 8000d94:	bf00      	nop
 8000d96:	3728      	adds	r7, #40	; 0x28
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	48000800 	.word	0x48000800
 8000da4:	48000400 	.word	0x48000400

08000da8 <prvMonitorMPPT>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_prvMonitorMPPT */
void prvMonitorMPPT(void *argument)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	LTC4162_Init(&hi2c2);
 8000db0:	481b      	ldr	r0, [pc, #108]	; (8000e20 <prvMonitorMPPT+0x78>)
 8000db2:	f7ff fbe5 	bl	8000580 <LTC4162_Init>

	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 8000db6:	2104      	movs	r1, #4
 8000db8:	481a      	ldr	r0, [pc, #104]	; (8000e24 <prvMonitorMPPT+0x7c>)
 8000dba:	f001 f871 	bl	8001ea0 <HAL_GPIO_TogglePin>

		LTC4162_GetReg(LTC4162_VIN, &telemetry.v_in);
 8000dbe:	491a      	ldr	r1, [pc, #104]	; (8000e28 <prvMonitorMPPT+0x80>)
 8000dc0:	f640 703b 	movw	r0, #3899	; 0xf3b
 8000dc4:	f7ff fc6a 	bl	800069c <LTC4162_GetReg>

		LTC4162_GetReg(LTC4162_VOUT, &telemetry.v_out);
 8000dc8:	4918      	ldr	r1, [pc, #96]	; (8000e2c <prvMonitorMPPT+0x84>)
 8000dca:	f640 703c 	movw	r0, #3900	; 0xf3c
 8000dce:	f7ff fc65 	bl	800069c <LTC4162_GetReg>

		LTC4162_GetReg(LTC4162_VBAT, &telemetry.v_bat);
 8000dd2:	4917      	ldr	r1, [pc, #92]	; (8000e30 <prvMonitorMPPT+0x88>)
 8000dd4:	f640 703a 	movw	r0, #3898	; 0xf3a
 8000dd8:	f7ff fc60 	bl	800069c <LTC4162_GetReg>

		LTC4162_GetReg(LTC4162_IBAT, &telemetry.i_bat);
 8000ddc:	4915      	ldr	r1, [pc, #84]	; (8000e34 <prvMonitorMPPT+0x8c>)
 8000dde:	f640 703d 	movw	r0, #3901	; 0xf3d
 8000de2:	f7ff fc5b 	bl	800069c <LTC4162_GetReg>

		LTC4162_GetReg(LTC4162_IIN, &telemetry.i_in);
 8000de6:	4914      	ldr	r1, [pc, #80]	; (8000e38 <prvMonitorMPPT+0x90>)
 8000de8:	f640 703e 	movw	r0, #3902	; 0xf3e
 8000dec:	f7ff fc56 	bl	800069c <LTC4162_GetReg>

		LTC4162_GetReg(LTC4162_DIE_TEMP, &telemetry.die_temp);
 8000df0:	4912      	ldr	r1, [pc, #72]	; (8000e3c <prvMonitorMPPT+0x94>)
 8000df2:	f640 703f 	movw	r0, #3903	; 0xf3f
 8000df6:	f7ff fc51 	bl	800069c <LTC4162_GetReg>

		LTC4162_GetReg(LTC4162_THERMISTOR_VOLTAGE, &telemetry.thermistor_voltage);
 8000dfa:	4911      	ldr	r1, [pc, #68]	; (8000e40 <prvMonitorMPPT+0x98>)
 8000dfc:	f44f 6074 	mov.w	r0, #3904	; 0xf40
 8000e00:	f7ff fc4c 	bl	800069c <LTC4162_GetReg>

		LTC4162_GetReg(LTC4162_BSR, &telemetry.bsr);
 8000e04:	490f      	ldr	r1, [pc, #60]	; (8000e44 <prvMonitorMPPT+0x9c>)
 8000e06:	f640 7041 	movw	r0, #3905	; 0xf41
 8000e0a:	f7ff fc47 	bl	800069c <LTC4162_GetReg>

		LTC4162_GetReg(LTC4162_CHARGER_STATE, &telemetry.charger_state);
 8000e0e:	490e      	ldr	r1, [pc, #56]	; (8000e48 <prvMonitorMPPT+0xa0>)
 8000e10:	f640 4034 	movw	r0, #3124	; 0xc34
 8000e14:	f7ff fc42 	bl	800069c <LTC4162_GetReg>


		osDelay(100);
 8000e18:	2064      	movs	r0, #100	; 0x64
 8000e1a:	f004 fdcc 	bl	80059b6 <osDelay>
		HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 8000e1e:	e7ca      	b.n	8000db6 <prvMonitorMPPT+0xe>
 8000e20:	20000110 	.word	0x20000110
 8000e24:	48000800 	.word	0x48000800
 8000e28:	200002a4 	.word	0x200002a4
 8000e2c:	200002a6 	.word	0x200002a6
 8000e30:	200002a8 	.word	0x200002a8
 8000e34:	200002aa 	.word	0x200002aa
 8000e38:	200002ac 	.word	0x200002ac
 8000e3c:	200002b0 	.word	0x200002b0
 8000e40:	200002b2 	.word	0x200002b2
 8000e44:	200002b4 	.word	0x200002b4
 8000e48:	200002b6 	.word	0x200002b6

08000e4c <prvSendTelemetry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_prvSendTelemetry */
void prvSendTelemetry(void *argument)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af02      	add	r7, sp, #8
 8000e52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN prvSendTelemetry */

//	HAL_UARTEx_ReceiveToIdle_IT(&huart3, (uint8_t *)buf, 4);
	static uint8_t buf[BUS_PACKET_BUS_SIZE];

	bus_packet_CRC16CCSDSConfig();
 8000e54:	f7ff fcbc 	bl	80007d0 <bus_packet_CRC16CCSDSConfig>
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <prvSendTelemetry+0x58>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	461a      	mov	r2, r3

	memcpy(buf, BUS_PACKET_FRAME_SYNC, 4);
 8000e5e:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <prvSendTelemetry+0x5c>)
 8000e60:	601a      	str	r2, [r3, #0]

	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 8000e62:	2104      	movs	r1, #4
 8000e64:	4811      	ldr	r0, [pc, #68]	; (8000eac <prvSendTelemetry+0x60>)
 8000e66:	f001 f81b 	bl	8001ea0 <HAL_GPIO_TogglePin>

//		do {
//			osThreadFlagsWait(0x1U, osFlagsWaitAll, osWaitForever);
//		} while (buf != 0xDEAD);
		bus_packet_EncodePacketize(BUS_PACKET_TYPE_TM, 0x40, BUS_PACKET_ECF_EXIST, (uint8_t *)&telemetry, sizeof(telemetry), buf + 4);
 8000e6a:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <prvSendTelemetry+0x64>)
 8000e6c:	9301      	str	r3, [sp, #4]
 8000e6e:	2314      	movs	r3, #20
 8000e70:	9300      	str	r3, [sp, #0]
 8000e72:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <prvSendTelemetry+0x68>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	2140      	movs	r1, #64	; 0x40
 8000e78:	2000      	movs	r0, #0
 8000e7a:	f7ff fc53 	bl	8000724 <bus_packet_EncodePacketize>

		HAL_UART_Transmit(&huart3, buf, bus_packet_GetLength(buf + 4) + 4,1000);
 8000e7e:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <prvSendTelemetry+0x64>)
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fce7 	bl	8000854 <bus_packet_GetLength>
 8000e86:	4603      	mov	r3, r0
 8000e88:	b29b      	uxth	r3, r3
 8000e8a:	3304      	adds	r3, #4
 8000e8c:	b29a      	uxth	r2, r3
 8000e8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e92:	4905      	ldr	r1, [pc, #20]	; (8000ea8 <prvSendTelemetry+0x5c>)
 8000e94:	4808      	ldr	r0, [pc, #32]	; (8000eb8 <prvSendTelemetry+0x6c>)
 8000e96:	f003 ffaf 	bl	8004df8 <HAL_UART_Transmit>
//		osThreadFlagsWait(0x2U, osFlagsWaitAny, osWaitForever);


		osDelay(5000);
 8000e9a:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e9e:	f004 fd8a 	bl	80059b6 <osDelay>
		HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 8000ea2:	e7de      	b.n	8000e62 <prvSendTelemetry+0x16>
 8000ea4:	0800862c 	.word	0x0800862c
 8000ea8:	200002b8 	.word	0x200002b8
 8000eac:	48000800 	.word	0x48000800
 8000eb0:	200002bc 	.word	0x200002bc
 8000eb4:	200002a4 	.word	0x200002a4
 8000eb8:	20000214 	.word	0x20000214

08000ebc <prvPowerManagement>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_prvPowerManagement */
void prvPowerManagement(void *argument)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN prvPowerManagement */
	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 8000ec4:	2104      	movs	r1, #4
 8000ec6:	4808      	ldr	r0, [pc, #32]	; (8000ee8 <prvPowerManagement+0x2c>)
 8000ec8:	f000 ffea 	bl	8001ea0 <HAL_GPIO_TogglePin>

		HAL_GPIO_WritePin(EN_3V3_GPIO_Port, EN_3V3_Pin, GPIO_PIN_SET);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ed2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed6:	f000 ffcb 	bl	8001e70 <HAL_GPIO_WritePin>

		osThreadSuspend(PowerRailsHandle);
 8000eda:	4b04      	ldr	r3, [pc, #16]	; (8000eec <prvPowerManagement+0x30>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f004 fd48 	bl	8005974 <osThreadSuspend>
		HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 8000ee4:	e7ee      	b.n	8000ec4 <prvPowerManagement+0x8>
 8000ee6:	bf00      	nop
 8000ee8:	48000800 	.word	0x48000800
 8000eec:	200002a0 	.word	0x200002a0

08000ef0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d101      	bne.n	8000f06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f02:	f000 fae7 	bl	80014d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40012c00 	.word	0x40012c00

08000f14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f18:	b672      	cpsid	i
}
 8000f1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8000f1c:	2102      	movs	r1, #2
 8000f1e:	4803      	ldr	r0, [pc, #12]	; (8000f2c <Error_Handler+0x18>)
 8000f20:	f000 ffbe 	bl	8001ea0 <HAL_GPIO_TogglePin>
	  HAL_Delay(250);
 8000f24:	20fa      	movs	r0, #250	; 0xfa
 8000f26:	f000 faf5 	bl	8001514 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8000f2a:	e7f7      	b.n	8000f1c <Error_Handler+0x8>
 8000f2c:	48000800 	.word	0x48000800

08000f30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f36:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <HAL_MspInit+0x4c>)
 8000f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f3a:	4a10      	ldr	r2, [pc, #64]	; (8000f7c <HAL_MspInit+0x4c>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6613      	str	r3, [r2, #96]	; 0x60
 8000f42:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <HAL_MspInit+0x4c>)
 8000f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <HAL_MspInit+0x4c>)
 8000f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f52:	4a0a      	ldr	r2, [pc, #40]	; (8000f7c <HAL_MspInit+0x4c>)
 8000f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f58:	6593      	str	r3, [r2, #88]	; 0x58
 8000f5a:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <HAL_MspInit+0x4c>)
 8000f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	210f      	movs	r1, #15
 8000f6a:	f06f 0001 	mvn.w	r0, #1
 8000f6e:	f000 fbad 	bl	80016cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40021000 	.word	0x40021000

08000f80 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <HAL_CRC_MspInit+0x38>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d10b      	bne.n	8000faa <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f92:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <HAL_CRC_MspInit+0x3c>)
 8000f94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f96:	4a09      	ldr	r2, [pc, #36]	; (8000fbc <HAL_CRC_MspInit+0x3c>)
 8000f98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f9c:	6493      	str	r3, [r2, #72]	; 0x48
 8000f9e:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <HAL_CRC_MspInit+0x3c>)
 8000fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fa2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000faa:	bf00      	nop
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	40023000 	.word	0x40023000
 8000fbc:	40021000 	.word	0x40021000

08000fc0 <HAL_CRC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspDeInit(CRC_HandleTypeDef* hcrc)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a07      	ldr	r2, [pc, #28]	; (8000fec <HAL_CRC_MspDeInit+0x2c>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d105      	bne.n	8000fde <HAL_CRC_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN CRC_MspDeInit 0 */

  /* USER CODE END CRC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CRC_CLK_DISABLE();
 8000fd2:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <HAL_CRC_MspDeInit+0x30>)
 8000fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fd6:	4a06      	ldr	r2, [pc, #24]	; (8000ff0 <HAL_CRC_MspDeInit+0x30>)
 8000fd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000fdc:	6493      	str	r3, [r2, #72]	; 0x48
  /* USER CODE BEGIN CRC_MspDeInit 1 */

  /* USER CODE END CRC_MspDeInit 1 */
  }

}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	40023000 	.word	0x40023000
 8000ff0:	40021000 	.word	0x40021000

08000ff4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b0a2      	sub	sp, #136	; 0x88
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800100c:	f107 0318 	add.w	r3, r7, #24
 8001010:	225c      	movs	r2, #92	; 0x5c
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f007 fa15 	bl	8008444 <memset>
  if(hi2c->Instance==I2C1)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a3f      	ldr	r2, [pc, #252]	; (800111c <HAL_I2C_MspInit+0x128>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d139      	bne.n	8001098 <HAL_I2C_MspInit+0xa4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001024:	2340      	movs	r3, #64	; 0x40
 8001026:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001028:	2300      	movs	r3, #0
 800102a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800102c:	f107 0318 	add.w	r3, r7, #24
 8001030:	4618      	mov	r0, r3
 8001032:	f002 fc19 	bl	8003868 <HAL_RCCEx_PeriphCLKConfig>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800103c:	f7ff ff6a 	bl	8000f14 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001040:	4b37      	ldr	r3, [pc, #220]	; (8001120 <HAL_I2C_MspInit+0x12c>)
 8001042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001044:	4a36      	ldr	r2, [pc, #216]	; (8001120 <HAL_I2C_MspInit+0x12c>)
 8001046:	f043 0302 	orr.w	r3, r3, #2
 800104a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104c:	4b34      	ldr	r3, [pc, #208]	; (8001120 <HAL_I2C_MspInit+0x12c>)
 800104e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001050:	f003 0302 	and.w	r3, r3, #2
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001058:	f44f 7340 	mov.w	r3, #768	; 0x300
 800105c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800105e:	2312      	movs	r3, #18
 8001060:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001066:	2303      	movs	r3, #3
 8001068:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800106c:	2304      	movs	r3, #4
 800106e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001072:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001076:	4619      	mov	r1, r3
 8001078:	482a      	ldr	r0, [pc, #168]	; (8001124 <HAL_I2C_MspInit+0x130>)
 800107a:	f000 fd7f 	bl	8001b7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800107e:	4b28      	ldr	r3, [pc, #160]	; (8001120 <HAL_I2C_MspInit+0x12c>)
 8001080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001082:	4a27      	ldr	r2, [pc, #156]	; (8001120 <HAL_I2C_MspInit+0x12c>)
 8001084:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001088:	6593      	str	r3, [r2, #88]	; 0x58
 800108a:	4b25      	ldr	r3, [pc, #148]	; (8001120 <HAL_I2C_MspInit+0x12c>)
 800108c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800108e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001096:	e03d      	b.n	8001114 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C2)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a22      	ldr	r2, [pc, #136]	; (8001128 <HAL_I2C_MspInit+0x134>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d138      	bne.n	8001114 <HAL_I2C_MspInit+0x120>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80010a2:	2380      	movs	r3, #128	; 0x80
 80010a4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80010a6:	2300      	movs	r3, #0
 80010a8:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010aa:	f107 0318 	add.w	r3, r7, #24
 80010ae:	4618      	mov	r0, r3
 80010b0:	f002 fbda 	bl	8003868 <HAL_RCCEx_PeriphCLKConfig>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <HAL_I2C_MspInit+0xca>
      Error_Handler();
 80010ba:	f7ff ff2b 	bl	8000f14 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010be:	4b18      	ldr	r3, [pc, #96]	; (8001120 <HAL_I2C_MspInit+0x12c>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c2:	4a17      	ldr	r2, [pc, #92]	; (8001120 <HAL_I2C_MspInit+0x12c>)
 80010c4:	f043 0302 	orr.w	r3, r3, #2
 80010c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ca:	4b15      	ldr	r3, [pc, #84]	; (8001120 <HAL_I2C_MspInit+0x12c>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80010d6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80010da:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010dc:	2312      	movs	r3, #18
 80010de:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e4:	2303      	movs	r3, #3
 80010e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010ea:	2304      	movs	r3, #4
 80010ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80010f4:	4619      	mov	r1, r3
 80010f6:	480b      	ldr	r0, [pc, #44]	; (8001124 <HAL_I2C_MspInit+0x130>)
 80010f8:	f000 fd40 	bl	8001b7c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <HAL_I2C_MspInit+0x12c>)
 80010fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001100:	4a07      	ldr	r2, [pc, #28]	; (8001120 <HAL_I2C_MspInit+0x12c>)
 8001102:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001106:	6593      	str	r3, [r2, #88]	; 0x58
 8001108:	4b05      	ldr	r3, [pc, #20]	; (8001120 <HAL_I2C_MspInit+0x12c>)
 800110a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001110:	60bb      	str	r3, [r7, #8]
 8001112:	68bb      	ldr	r3, [r7, #8]
}
 8001114:	bf00      	nop
 8001116:	3788      	adds	r7, #136	; 0x88
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40005400 	.word	0x40005400
 8001120:	40021000 	.word	0x40021000
 8001124:	48000400 	.word	0x48000400
 8001128:	40005800 	.word	0x40005800

0800112c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08a      	sub	sp, #40	; 0x28
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a18      	ldr	r2, [pc, #96]	; (80011ac <HAL_SPI_MspInit+0x80>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d129      	bne.n	80011a2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800114e:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <HAL_SPI_MspInit+0x84>)
 8001150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001152:	4a17      	ldr	r2, [pc, #92]	; (80011b0 <HAL_SPI_MspInit+0x84>)
 8001154:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001158:	6613      	str	r3, [r2, #96]	; 0x60
 800115a:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <HAL_SPI_MspInit+0x84>)
 800115c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800115e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <HAL_SPI_MspInit+0x84>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116a:	4a11      	ldr	r2, [pc, #68]	; (80011b0 <HAL_SPI_MspInit+0x84>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001172:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <HAL_SPI_MspInit+0x84>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 800117e:	f641 0302 	movw	r3, #6146	; 0x1802
 8001182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001184:	2302      	movs	r3, #2
 8001186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118c:	2303      	movs	r3, #3
 800118e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001190:	2305      	movs	r3, #5
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	4619      	mov	r1, r3
 800119a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800119e:	f000 fced 	bl	8001b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80011a2:	bf00      	nop
 80011a4:	3728      	adds	r7, #40	; 0x28
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40013000 	.word	0x40013000
 80011b0:	40021000 	.word	0x40021000

080011b4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011c4:	d10b      	bne.n	80011de <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <HAL_TIM_PWM_MspInit+0x38>)
 80011c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ca:	4a08      	ldr	r2, [pc, #32]	; (80011ec <HAL_TIM_PWM_MspInit+0x38>)
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	6593      	str	r3, [r2, #88]	; 0x58
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_TIM_PWM_MspInit+0x38>)
 80011d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011de:	bf00      	nop
 80011e0:	3714      	adds	r7, #20
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40021000 	.word	0x40021000

080011f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b088      	sub	sp, #32
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	f107 030c 	add.w	r3, r7, #12
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001210:	d11c      	bne.n	800124c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001212:	4b10      	ldr	r3, [pc, #64]	; (8001254 <HAL_TIM_MspPostInit+0x64>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001216:	4a0f      	ldr	r2, [pc, #60]	; (8001254 <HAL_TIM_MspPostInit+0x64>)
 8001218:	f043 0302 	orr.w	r3, r3, #2
 800121c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800121e:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <HAL_TIM_MspPostInit+0x64>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800122a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800122e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2300      	movs	r3, #0
 800123a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800123c:	2301      	movs	r3, #1
 800123e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	4619      	mov	r1, r3
 8001246:	4804      	ldr	r0, [pc, #16]	; (8001258 <HAL_TIM_MspPostInit+0x68>)
 8001248:	f000 fc98 	bl	8001b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800124c:	bf00      	nop
 800124e:	3720      	adds	r7, #32
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40021000 	.word	0x40021000
 8001258:	48000400 	.word	0x48000400

0800125c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b0a0      	sub	sp, #128	; 0x80
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001274:	f107 0310 	add.w	r3, r7, #16
 8001278:	225c      	movs	r2, #92	; 0x5c
 800127a:	2100      	movs	r1, #0
 800127c:	4618      	mov	r0, r3
 800127e:	f007 f8e1 	bl	8008444 <memset>
  if(huart->Instance==USART3)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a1f      	ldr	r2, [pc, #124]	; (8001304 <HAL_UART_MspInit+0xa8>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d136      	bne.n	80012fa <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800128c:	2304      	movs	r3, #4
 800128e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001290:	2300      	movs	r3, #0
 8001292:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001294:	f107 0310 	add.w	r3, r7, #16
 8001298:	4618      	mov	r0, r3
 800129a:	f002 fae5 	bl	8003868 <HAL_RCCEx_PeriphCLKConfig>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012a4:	f7ff fe36 	bl	8000f14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012a8:	4b17      	ldr	r3, [pc, #92]	; (8001308 <HAL_UART_MspInit+0xac>)
 80012aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ac:	4a16      	ldr	r2, [pc, #88]	; (8001308 <HAL_UART_MspInit+0xac>)
 80012ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012b2:	6593      	str	r3, [r2, #88]	; 0x58
 80012b4:	4b14      	ldr	r3, [pc, #80]	; (8001308 <HAL_UART_MspInit+0xac>)
 80012b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c0:	4b11      	ldr	r3, [pc, #68]	; (8001308 <HAL_UART_MspInit+0xac>)
 80012c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c4:	4a10      	ldr	r2, [pc, #64]	; (8001308 <HAL_UART_MspInit+0xac>)
 80012c6:	f043 0304 	orr.w	r3, r3, #4
 80012ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012cc:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <HAL_UART_MspInit+0xac>)
 80012ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80012d8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012dc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012de:	2302      	movs	r3, #2
 80012e0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e6:	2303      	movs	r3, #3
 80012e8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012ea:	2307      	movs	r3, #7
 80012ec:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80012f2:	4619      	mov	r1, r3
 80012f4:	4805      	ldr	r0, [pc, #20]	; (800130c <HAL_UART_MspInit+0xb0>)
 80012f6:	f000 fc41 	bl	8001b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012fa:	bf00      	nop
 80012fc:	3780      	adds	r7, #128	; 0x80
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40004800 	.word	0x40004800
 8001308:	40021000 	.word	0x40021000
 800130c:	48000800 	.word	0x48000800

08001310 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08c      	sub	sp, #48	; 0x30
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001318:	2300      	movs	r3, #0
 800131a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800131e:	4b2e      	ldr	r3, [pc, #184]	; (80013d8 <HAL_InitTick+0xc8>)
 8001320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001322:	4a2d      	ldr	r2, [pc, #180]	; (80013d8 <HAL_InitTick+0xc8>)
 8001324:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001328:	6613      	str	r3, [r2, #96]	; 0x60
 800132a:	4b2b      	ldr	r3, [pc, #172]	; (80013d8 <HAL_InitTick+0xc8>)
 800132c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800132e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001336:	f107 020c 	add.w	r2, r7, #12
 800133a:	f107 0310 	add.w	r3, r7, #16
 800133e:	4611      	mov	r1, r2
 8001340:	4618      	mov	r0, r3
 8001342:	f002 f9ff 	bl	8003744 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001346:	f002 f9e7 	bl	8003718 <HAL_RCC_GetPCLK2Freq>
 800134a:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800134c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800134e:	4a23      	ldr	r2, [pc, #140]	; (80013dc <HAL_InitTick+0xcc>)
 8001350:	fba2 2303 	umull	r2, r3, r2, r3
 8001354:	0c9b      	lsrs	r3, r3, #18
 8001356:	3b01      	subs	r3, #1
 8001358:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800135a:	4b21      	ldr	r3, [pc, #132]	; (80013e0 <HAL_InitTick+0xd0>)
 800135c:	4a21      	ldr	r2, [pc, #132]	; (80013e4 <HAL_InitTick+0xd4>)
 800135e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001360:	4b1f      	ldr	r3, [pc, #124]	; (80013e0 <HAL_InitTick+0xd0>)
 8001362:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001366:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001368:	4a1d      	ldr	r2, [pc, #116]	; (80013e0 <HAL_InitTick+0xd0>)
 800136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800136e:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <HAL_InitTick+0xd0>)
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001374:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <HAL_InitTick+0xd0>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800137a:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <HAL_InitTick+0xd0>)
 800137c:	2200      	movs	r2, #0
 800137e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001380:	4817      	ldr	r0, [pc, #92]	; (80013e0 <HAL_InitTick+0xd0>)
 8001382:	f002 fe1e 	bl	8003fc2 <HAL_TIM_Base_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800138c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001390:	2b00      	cmp	r3, #0
 8001392:	d11b      	bne.n	80013cc <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001394:	4812      	ldr	r0, [pc, #72]	; (80013e0 <HAL_InitTick+0xd0>)
 8001396:	f002 fe75 	bl	8004084 <HAL_TIM_Base_Start_IT>
 800139a:	4603      	mov	r3, r0
 800139c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80013a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d111      	bne.n	80013cc <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80013a8:	2019      	movs	r0, #25
 80013aa:	f000 f9ab 	bl	8001704 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2b0f      	cmp	r3, #15
 80013b2:	d808      	bhi.n	80013c6 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80013b4:	2200      	movs	r2, #0
 80013b6:	6879      	ldr	r1, [r7, #4]
 80013b8:	2019      	movs	r0, #25
 80013ba:	f000 f987 	bl	80016cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013be:	4a0a      	ldr	r2, [pc, #40]	; (80013e8 <HAL_InitTick+0xd8>)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	e002      	b.n	80013cc <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80013cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3730      	adds	r7, #48	; 0x30
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40021000 	.word	0x40021000
 80013dc:	431bde83 	.word	0x431bde83
 80013e0:	20000338 	.word	0x20000338
 80013e4:	40012c00 	.word	0x40012c00
 80013e8:	20000004 	.word	0x20000004

080013ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <NMI_Handler+0x4>

080013f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013f6:	e7fe      	b.n	80013f6 <HardFault_Handler+0x4>

080013f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013fc:	e7fe      	b.n	80013fc <MemManage_Handler+0x4>

080013fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001402:	e7fe      	b.n	8001402 <BusFault_Handler+0x4>

08001404 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001408:	e7fe      	b.n	8001408 <UsageFault_Handler+0x4>

0800140a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800141c:	4802      	ldr	r0, [pc, #8]	; (8001428 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800141e:	f002 fedc 	bl	80041da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000338 	.word	0x20000338

0800142c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <SystemInit+0x20>)
 8001432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001436:	4a05      	ldr	r2, [pc, #20]	; (800144c <SystemInit+0x20>)
 8001438:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800143c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001450:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001488 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001454:	f7ff ffea 	bl	800142c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001458:	480c      	ldr	r0, [pc, #48]	; (800148c <LoopForever+0x6>)
  ldr r1, =_edata
 800145a:	490d      	ldr	r1, [pc, #52]	; (8001490 <LoopForever+0xa>)
  ldr r2, =_sidata
 800145c:	4a0d      	ldr	r2, [pc, #52]	; (8001494 <LoopForever+0xe>)
  movs r3, #0
 800145e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001460:	e002      	b.n	8001468 <LoopCopyDataInit>

08001462 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001466:	3304      	adds	r3, #4

08001468 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800146a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800146c:	d3f9      	bcc.n	8001462 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800146e:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001470:	4c0a      	ldr	r4, [pc, #40]	; (800149c <LoopForever+0x16>)
  movs r3, #0
 8001472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001474:	e001      	b.n	800147a <LoopFillZerobss>

08001476 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001478:	3204      	adds	r2, #4

0800147a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800147a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800147c:	d3fb      	bcc.n	8001476 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800147e:	f006 ffad 	bl	80083dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001482:	f7ff f9f7 	bl	8000874 <main>

08001486 <LoopForever>:

LoopForever:
    b LoopForever
 8001486:	e7fe      	b.n	8001486 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001488:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800148c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001490:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001494:	08008754 	.word	0x08008754
  ldr r2, =_sbss
 8001498:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800149c:	20003220 	.word	0x20003220

080014a0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014a0:	e7fe      	b.n	80014a0 <ADC1_IRQHandler>

080014a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b082      	sub	sp, #8
 80014a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014a8:	2300      	movs	r3, #0
 80014aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ac:	2003      	movs	r0, #3
 80014ae:	f000 f902 	bl	80016b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014b2:	200f      	movs	r0, #15
 80014b4:	f7ff ff2c 	bl	8001310 <HAL_InitTick>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d002      	beq.n	80014c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	71fb      	strb	r3, [r7, #7]
 80014c2:	e001      	b.n	80014c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014c4:	f7ff fd34 	bl	8000f30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014c8:	79fb      	ldrb	r3, [r7, #7]
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <HAL_IncTick+0x20>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	461a      	mov	r2, r3
 80014de:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <HAL_IncTick+0x24>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4413      	add	r3, r2
 80014e4:	4a04      	ldr	r2, [pc, #16]	; (80014f8 <HAL_IncTick+0x24>)
 80014e6:	6013      	str	r3, [r2, #0]
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	20000008 	.word	0x20000008
 80014f8:	20000384 	.word	0x20000384

080014fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001500:	4b03      	ldr	r3, [pc, #12]	; (8001510 <HAL_GetTick+0x14>)
 8001502:	681b      	ldr	r3, [r3, #0]
}
 8001504:	4618      	mov	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	20000384 	.word	0x20000384

08001514 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800151c:	f7ff ffee 	bl	80014fc <HAL_GetTick>
 8001520:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800152c:	d005      	beq.n	800153a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800152e:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <HAL_Delay+0x44>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	461a      	mov	r2, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	4413      	add	r3, r2
 8001538:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800153a:	bf00      	nop
 800153c:	f7ff ffde 	bl	80014fc <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	429a      	cmp	r2, r3
 800154a:	d8f7      	bhi.n	800153c <HAL_Delay+0x28>
  {
  }
}
 800154c:	bf00      	nop
 800154e:	bf00      	nop
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000008 	.word	0x20000008

0800155c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800156c:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <__NVIC_SetPriorityGrouping+0x44>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001572:	68ba      	ldr	r2, [r7, #8]
 8001574:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001578:	4013      	ands	r3, r2
 800157a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001584:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800158c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800158e:	4a04      	ldr	r2, [pc, #16]	; (80015a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	60d3      	str	r3, [r2, #12]
}
 8001594:	bf00      	nop
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a8:	4b04      	ldr	r3, [pc, #16]	; (80015bc <__NVIC_GetPriorityGrouping+0x18>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	0a1b      	lsrs	r3, r3, #8
 80015ae:	f003 0307 	and.w	r3, r3, #7
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	db0b      	blt.n	80015ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	f003 021f 	and.w	r2, r3, #31
 80015d8:	4907      	ldr	r1, [pc, #28]	; (80015f8 <__NVIC_EnableIRQ+0x38>)
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	095b      	lsrs	r3, r3, #5
 80015e0:	2001      	movs	r0, #1
 80015e2:	fa00 f202 	lsl.w	r2, r0, r2
 80015e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	e000e100 	.word	0xe000e100

080015fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	6039      	str	r1, [r7, #0]
 8001606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160c:	2b00      	cmp	r3, #0
 800160e:	db0a      	blt.n	8001626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	b2da      	uxtb	r2, r3
 8001614:	490c      	ldr	r1, [pc, #48]	; (8001648 <__NVIC_SetPriority+0x4c>)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	0112      	lsls	r2, r2, #4
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	440b      	add	r3, r1
 8001620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001624:	e00a      	b.n	800163c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	b2da      	uxtb	r2, r3
 800162a:	4908      	ldr	r1, [pc, #32]	; (800164c <__NVIC_SetPriority+0x50>)
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	3b04      	subs	r3, #4
 8001634:	0112      	lsls	r2, r2, #4
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	440b      	add	r3, r1
 800163a:	761a      	strb	r2, [r3, #24]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000e100 	.word	0xe000e100
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001650:	b480      	push	{r7}
 8001652:	b089      	sub	sp, #36	; 0x24
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f1c3 0307 	rsb	r3, r3, #7
 800166a:	2b04      	cmp	r3, #4
 800166c:	bf28      	it	cs
 800166e:	2304      	movcs	r3, #4
 8001670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3304      	adds	r3, #4
 8001676:	2b06      	cmp	r3, #6
 8001678:	d902      	bls.n	8001680 <NVIC_EncodePriority+0x30>
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3b03      	subs	r3, #3
 800167e:	e000      	b.n	8001682 <NVIC_EncodePriority+0x32>
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001684:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43da      	mvns	r2, r3
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	401a      	ands	r2, r3
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001698:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	fa01 f303 	lsl.w	r3, r1, r3
 80016a2:	43d9      	mvns	r1, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a8:	4313      	orrs	r3, r2
         );
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3724      	adds	r7, #36	; 0x24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff ff4c 	bl	800155c <__NVIC_SetPriorityGrouping>
}
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
 80016d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016de:	f7ff ff61 	bl	80015a4 <__NVIC_GetPriorityGrouping>
 80016e2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	68b9      	ldr	r1, [r7, #8]
 80016e8:	6978      	ldr	r0, [r7, #20]
 80016ea:	f7ff ffb1 	bl	8001650 <NVIC_EncodePriority>
 80016ee:	4602      	mov	r2, r0
 80016f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f4:	4611      	mov	r1, r2
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff ff80 	bl	80015fc <__NVIC_SetPriority>
}
 80016fc:	bf00      	nop
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800170e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff ff54 	bl	80015c0 <__NVIC_EnableIRQ>
}
 8001718:	bf00      	nop
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d101      	bne.n	8001732 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e054      	b.n	80017dc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	7f5b      	ldrb	r3, [r3, #29]
 8001736:	b2db      	uxtb	r3, r3
 8001738:	2b00      	cmp	r3, #0
 800173a:	d105      	bne.n	8001748 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff fc1c 	bl	8000f80 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2202      	movs	r2, #2
 800174c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	791b      	ldrb	r3, [r3, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d10c      	bne.n	8001770 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a22      	ldr	r2, [pc, #136]	; (80017e4 <HAL_CRC_Init+0xc4>)
 800175c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 0218 	bic.w	r2, r2, #24
 800176c:	609a      	str	r2, [r3, #8]
 800176e:	e00c      	b.n	800178a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6899      	ldr	r1, [r3, #8]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	461a      	mov	r2, r3
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 f978 	bl	8001a70 <HAL_CRCEx_Polynomial_Set>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e028      	b.n	80017dc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	795b      	ldrb	r3, [r3, #5]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d105      	bne.n	800179e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800179a:	611a      	str	r2, [r3, #16]
 800179c:	e004      	b.n	80017a8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	6912      	ldr	r2, [r2, #16]
 80017a6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	695a      	ldr	r2, [r3, #20]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	430a      	orrs	r2, r1
 80017bc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	699a      	ldr	r2, [r3, #24]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	04c11db7 	.word	0x04c11db7

080017e8 <HAL_CRC_DeInit>:
  * @brief  DeInitialize the CRC peripheral.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_DeInit(CRC_HandleTypeDef *hcrc)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_CRC_DeInit+0x12>
  {
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e022      	b.n	8001840 <HAL_CRC_DeInit+0x58>

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  /* Check the CRC peripheral state */
  if (hcrc->State == HAL_CRC_STATE_BUSY)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	7f5b      	ldrb	r3, [r3, #29]
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d101      	bne.n	8001808 <HAL_CRC_DeInit+0x20>
  {
    return HAL_BUSY;
 8001804:	2302      	movs	r3, #2
 8001806:	e01b      	b.n	8001840 <HAL_CRC_DeInit+0x58>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2202      	movs	r2, #2
 800180c:	775a      	strb	r2, [r3, #29]

  /* Reset CRC calculation unit */
  __HAL_CRC_DR_RESET(hcrc);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f042 0201 	orr.w	r2, r2, #1
 800181c:	609a      	str	r2, [r3, #8]

  /* Reset IDR register content */
  CLEAR_BIT(hcrc->Instance->IDR, CRC_IDR_IDR);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	791b      	ldrb	r3, [r3, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2200      	movs	r2, #0
 800182a:	711a      	strb	r2, [r3, #4]

  /* DeInit the low level hardware */
  HAL_CRC_MspDeInit(hcrc);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7ff fbc7 	bl	8000fc0 <HAL_CRC_MspDeInit>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_RESET;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	775a      	strb	r2, [r3, #29]

  /* Process unlocked */
  __HAL_UNLOCK(hcrc);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	771a      	strb	r2, [r3, #28]

  /* Return function status */
  return HAL_OK;
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001854:	2300      	movs	r3, #0
 8001856:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2202      	movs	r2, #2
 800185c:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f042 0201 	orr.w	r2, r2, #1
 800186c:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6a1b      	ldr	r3, [r3, #32]
 8001872:	2b03      	cmp	r3, #3
 8001874:	d006      	beq.n	8001884 <HAL_CRC_Calculate+0x3c>
 8001876:	2b03      	cmp	r3, #3
 8001878:	d829      	bhi.n	80018ce <HAL_CRC_Calculate+0x86>
 800187a:	2b01      	cmp	r3, #1
 800187c:	d019      	beq.n	80018b2 <HAL_CRC_Calculate+0x6a>
 800187e:	2b02      	cmp	r3, #2
 8001880:	d01e      	beq.n	80018c0 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8001882:	e024      	b.n	80018ce <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]
 8001888:	e00a      	b.n	80018a0 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	441a      	add	r2, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	6812      	ldr	r2, [r2, #0]
 8001898:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	3301      	adds	r3, #1
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d3f0      	bcc.n	800188a <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	613b      	str	r3, [r7, #16]
      break;
 80018b0:	e00e      	b.n	80018d0 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	68b9      	ldr	r1, [r7, #8]
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f000 f812 	bl	80018e0 <CRC_Handle_8>
 80018bc:	6138      	str	r0, [r7, #16]
      break;
 80018be:	e007      	b.n	80018d0 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	68b9      	ldr	r1, [r7, #8]
 80018c4:	68f8      	ldr	r0, [r7, #12]
 80018c6:	f000 f899 	bl	80019fc <CRC_Handle_16>
 80018ca:	6138      	str	r0, [r7, #16]
      break;
 80018cc:	e000      	b.n	80018d0 <HAL_CRC_Calculate+0x88>
      break;
 80018ce:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2201      	movs	r2, #1
 80018d4:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80018d6:	693b      	ldr	r3, [r7, #16]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b089      	sub	sp, #36	; 0x24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80018ec:	2300      	movs	r3, #0
 80018ee:	61fb      	str	r3, [r7, #28]
 80018f0:	e023      	b.n	800193a <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	4413      	add	r3, r2
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	3301      	adds	r3, #1
 8001904:	68b9      	ldr	r1, [r7, #8]
 8001906:	440b      	add	r3, r1
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800190c:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	3302      	adds	r3, #2
 8001914:	68b9      	ldr	r1, [r7, #8]
 8001916:	440b      	add	r3, r1
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800191c:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	3303      	adds	r3, #3
 8001924:	68b9      	ldr	r1, [r7, #8]
 8001926:	440b      	add	r3, r1
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001930:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001932:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	3301      	adds	r3, #1
 8001938:	61fb      	str	r3, [r7, #28]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	089b      	lsrs	r3, r3, #2
 800193e:	69fa      	ldr	r2, [r7, #28]
 8001940:	429a      	cmp	r2, r3
 8001942:	d3d6      	bcc.n	80018f2 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f003 0303 	and.w	r3, r3, #3
 800194a:	2b00      	cmp	r3, #0
 800194c:	d04d      	beq.n	80019ea <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f003 0303 	and.w	r3, r3, #3
 8001954:	2b01      	cmp	r3, #1
 8001956:	d107      	bne.n	8001968 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	68ba      	ldr	r2, [r7, #8]
 800195e:	4413      	add	r3, r2
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	6812      	ldr	r2, [r2, #0]
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f003 0303 	and.w	r3, r3, #3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d116      	bne.n	80019a0 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	4413      	add	r3, r2
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	021b      	lsls	r3, r3, #8
 800197e:	b21a      	sxth	r2, r3
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	3301      	adds	r3, #1
 8001986:	68b9      	ldr	r1, [r7, #8]
 8001988:	440b      	add	r3, r1
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	b21b      	sxth	r3, r3
 800198e:	4313      	orrs	r3, r2
 8001990:	b21b      	sxth	r3, r3
 8001992:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	8b7a      	ldrh	r2, [r7, #26]
 800199e:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f003 0303 	and.w	r3, r3, #3
 80019a6:	2b03      	cmp	r3, #3
 80019a8:	d11f      	bne.n	80019ea <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	68ba      	ldr	r2, [r7, #8]
 80019b0:	4413      	add	r3, r2
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	021b      	lsls	r3, r3, #8
 80019b6:	b21a      	sxth	r2, r3
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	3301      	adds	r3, #1
 80019be:	68b9      	ldr	r1, [r7, #8]
 80019c0:	440b      	add	r3, r1
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	b21b      	sxth	r3, r3
 80019c6:	4313      	orrs	r3, r2
 80019c8:	b21b      	sxth	r3, r3
 80019ca:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	8b7a      	ldrh	r2, [r7, #26]
 80019d6:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	3302      	adds	r3, #2
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	4413      	add	r3, r2
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	6812      	ldr	r2, [r2, #0]
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3724      	adds	r7, #36	; 0x24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b087      	sub	sp, #28
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	e013      	b.n	8001a36 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	68ba      	ldr	r2, [r7, #8]
 8001a14:	4413      	add	r3, r2
 8001a16:	881b      	ldrh	r3, [r3, #0]
 8001a18:	041a      	lsls	r2, r3, #16
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	3302      	adds	r3, #2
 8001a20:	68b9      	ldr	r1, [r7, #8]
 8001a22:	440b      	add	r3, r1
 8001a24:	881b      	ldrh	r3, [r3, #0]
 8001a26:	4619      	mov	r1, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	3301      	adds	r3, #1
 8001a34:	617b      	str	r3, [r7, #20]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	085b      	lsrs	r3, r3, #1
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d3e6      	bcc.n	8001a0e <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d009      	beq.n	8001a5e <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	68ba      	ldr	r2, [r7, #8]
 8001a56:	4413      	add	r3, r2
 8001a58:	881a      	ldrh	r2, [r3, #0]
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	371c      	adds	r7, #28
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b087      	sub	sp, #28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001a80:	231f      	movs	r3, #31
 8001a82:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001a84:	bf00      	nop
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1e5a      	subs	r2, r3, #1
 8001a8a:	613a      	str	r2, [r7, #16]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d009      	beq.n	8001aa4 <HAL_CRCEx_Polynomial_Set+0x34>
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	f003 031f 	and.w	r3, r3, #31
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	fa22 f303 	lsr.w	r3, r2, r3
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0f0      	beq.n	8001a86 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b18      	cmp	r3, #24
 8001aa8:	d846      	bhi.n	8001b38 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001aaa:	a201      	add	r2, pc, #4	; (adr r2, 8001ab0 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab0:	08001b3f 	.word	0x08001b3f
 8001ab4:	08001b39 	.word	0x08001b39
 8001ab8:	08001b39 	.word	0x08001b39
 8001abc:	08001b39 	.word	0x08001b39
 8001ac0:	08001b39 	.word	0x08001b39
 8001ac4:	08001b39 	.word	0x08001b39
 8001ac8:	08001b39 	.word	0x08001b39
 8001acc:	08001b39 	.word	0x08001b39
 8001ad0:	08001b2d 	.word	0x08001b2d
 8001ad4:	08001b39 	.word	0x08001b39
 8001ad8:	08001b39 	.word	0x08001b39
 8001adc:	08001b39 	.word	0x08001b39
 8001ae0:	08001b39 	.word	0x08001b39
 8001ae4:	08001b39 	.word	0x08001b39
 8001ae8:	08001b39 	.word	0x08001b39
 8001aec:	08001b39 	.word	0x08001b39
 8001af0:	08001b21 	.word	0x08001b21
 8001af4:	08001b39 	.word	0x08001b39
 8001af8:	08001b39 	.word	0x08001b39
 8001afc:	08001b39 	.word	0x08001b39
 8001b00:	08001b39 	.word	0x08001b39
 8001b04:	08001b39 	.word	0x08001b39
 8001b08:	08001b39 	.word	0x08001b39
 8001b0c:	08001b39 	.word	0x08001b39
 8001b10:	08001b15 	.word	0x08001b15
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	2b06      	cmp	r3, #6
 8001b18:	d913      	bls.n	8001b42 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001b1e:	e010      	b.n	8001b42 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	2b07      	cmp	r3, #7
 8001b24:	d90f      	bls.n	8001b46 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001b2a:	e00c      	b.n	8001b46 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	2b0f      	cmp	r3, #15
 8001b30:	d90b      	bls.n	8001b4a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001b36:	e008      	b.n	8001b4a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	75fb      	strb	r3, [r7, #23]
      break;
 8001b3c:	e006      	b.n	8001b4c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001b3e:	bf00      	nop
 8001b40:	e004      	b.n	8001b4c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001b42:	bf00      	nop
 8001b44:	e002      	b.n	8001b4c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001b46:	bf00      	nop
 8001b48:	e000      	b.n	8001b4c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001b4a:	bf00      	nop
  }
  if (status == HAL_OK)
 8001b4c:	7dfb      	ldrb	r3, [r7, #23]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d10d      	bne.n	8001b6e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f023 0118 	bic.w	r1, r3, #24
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001b6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	371c      	adds	r7, #28
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b087      	sub	sp, #28
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b8a:	e154      	b.n	8001e36 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	2101      	movs	r1, #1
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	fa01 f303 	lsl.w	r3, r1, r3
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 8146 	beq.w	8001e30 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 0303 	and.w	r3, r3, #3
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d005      	beq.n	8001bbc <HAL_GPIO_Init+0x40>
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 0303 	and.w	r3, r3, #3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d130      	bne.n	8001c1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	091b      	lsrs	r3, r3, #4
 8001c08:	f003 0201 	and.w	r2, r3, #1
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f003 0303 	and.w	r3, r3, #3
 8001c26:	2b03      	cmp	r3, #3
 8001c28:	d017      	beq.n	8001c5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	2203      	movs	r2, #3
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	689a      	ldr	r2, [r3, #8]
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f003 0303 	and.w	r3, r3, #3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d123      	bne.n	8001cae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	08da      	lsrs	r2, r3, #3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	3208      	adds	r2, #8
 8001c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	220f      	movs	r2, #15
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43db      	mvns	r3, r3
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	4013      	ands	r3, r2
 8001c88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	691a      	ldr	r2, [r3, #16]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	08da      	lsrs	r2, r3, #3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3208      	adds	r2, #8
 8001ca8:	6939      	ldr	r1, [r7, #16]
 8001caa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	2203      	movs	r2, #3
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f003 0203 	and.w	r2, r3, #3
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f000 80a0 	beq.w	8001e30 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf0:	4b58      	ldr	r3, [pc, #352]	; (8001e54 <HAL_GPIO_Init+0x2d8>)
 8001cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cf4:	4a57      	ldr	r2, [pc, #348]	; (8001e54 <HAL_GPIO_Init+0x2d8>)
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	6613      	str	r3, [r2, #96]	; 0x60
 8001cfc:	4b55      	ldr	r3, [pc, #340]	; (8001e54 <HAL_GPIO_Init+0x2d8>)
 8001cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d08:	4a53      	ldr	r2, [pc, #332]	; (8001e58 <HAL_GPIO_Init+0x2dc>)
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	089b      	lsrs	r3, r3, #2
 8001d0e:	3302      	adds	r3, #2
 8001d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	f003 0303 	and.w	r3, r3, #3
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	220f      	movs	r2, #15
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d32:	d019      	beq.n	8001d68 <HAL_GPIO_Init+0x1ec>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a49      	ldr	r2, [pc, #292]	; (8001e5c <HAL_GPIO_Init+0x2e0>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d013      	beq.n	8001d64 <HAL_GPIO_Init+0x1e8>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a48      	ldr	r2, [pc, #288]	; (8001e60 <HAL_GPIO_Init+0x2e4>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d00d      	beq.n	8001d60 <HAL_GPIO_Init+0x1e4>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a47      	ldr	r2, [pc, #284]	; (8001e64 <HAL_GPIO_Init+0x2e8>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d007      	beq.n	8001d5c <HAL_GPIO_Init+0x1e0>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a46      	ldr	r2, [pc, #280]	; (8001e68 <HAL_GPIO_Init+0x2ec>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d101      	bne.n	8001d58 <HAL_GPIO_Init+0x1dc>
 8001d54:	2304      	movs	r3, #4
 8001d56:	e008      	b.n	8001d6a <HAL_GPIO_Init+0x1ee>
 8001d58:	2307      	movs	r3, #7
 8001d5a:	e006      	b.n	8001d6a <HAL_GPIO_Init+0x1ee>
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e004      	b.n	8001d6a <HAL_GPIO_Init+0x1ee>
 8001d60:	2302      	movs	r3, #2
 8001d62:	e002      	b.n	8001d6a <HAL_GPIO_Init+0x1ee>
 8001d64:	2301      	movs	r3, #1
 8001d66:	e000      	b.n	8001d6a <HAL_GPIO_Init+0x1ee>
 8001d68:	2300      	movs	r3, #0
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	f002 0203 	and.w	r2, r2, #3
 8001d70:	0092      	lsls	r2, r2, #2
 8001d72:	4093      	lsls	r3, r2
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d7a:	4937      	ldr	r1, [pc, #220]	; (8001e58 <HAL_GPIO_Init+0x2dc>)
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	089b      	lsrs	r3, r3, #2
 8001d80:	3302      	adds	r3, #2
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d88:	4b38      	ldr	r3, [pc, #224]	; (8001e6c <HAL_GPIO_Init+0x2f0>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	43db      	mvns	r3, r3
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	4013      	ands	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d003      	beq.n	8001dac <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001dac:	4a2f      	ldr	r2, [pc, #188]	; (8001e6c <HAL_GPIO_Init+0x2f0>)
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001db2:	4b2e      	ldr	r3, [pc, #184]	; (8001e6c <HAL_GPIO_Init+0x2f0>)
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001dd6:	4a25      	ldr	r2, [pc, #148]	; (8001e6c <HAL_GPIO_Init+0x2f0>)
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ddc:	4b23      	ldr	r3, [pc, #140]	; (8001e6c <HAL_GPIO_Init+0x2f0>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	43db      	mvns	r3, r3
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	4013      	ands	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d003      	beq.n	8001e00 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e00:	4a1a      	ldr	r2, [pc, #104]	; (8001e6c <HAL_GPIO_Init+0x2f0>)
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e06:	4b19      	ldr	r3, [pc, #100]	; (8001e6c <HAL_GPIO_Init+0x2f0>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	4013      	ands	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e2a:	4a10      	ldr	r2, [pc, #64]	; (8001e6c <HAL_GPIO_Init+0x2f0>)
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	3301      	adds	r3, #1
 8001e34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f47f aea3 	bne.w	8001b8c <HAL_GPIO_Init+0x10>
  }
}
 8001e46:	bf00      	nop
 8001e48:	bf00      	nop
 8001e4a:	371c      	adds	r7, #28
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	40021000 	.word	0x40021000
 8001e58:	40010000 	.word	0x40010000
 8001e5c:	48000400 	.word	0x48000400
 8001e60:	48000800 	.word	0x48000800
 8001e64:	48000c00 	.word	0x48000c00
 8001e68:	48001000 	.word	0x48001000
 8001e6c:	40010400 	.word	0x40010400

08001e70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	460b      	mov	r3, r1
 8001e7a:	807b      	strh	r3, [r7, #2]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e80:	787b      	ldrb	r3, [r7, #1]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e86:	887a      	ldrh	r2, [r7, #2]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e8c:	e002      	b.n	8001e94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e8e:	887a      	ldrh	r2, [r7, #2]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	695b      	ldr	r3, [r3, #20]
 8001eb0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001eb2:	887a      	ldrh	r2, [r7, #2]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	041a      	lsls	r2, r3, #16
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	43d9      	mvns	r1, r3
 8001ebe:	887b      	ldrh	r3, [r7, #2]
 8001ec0:	400b      	ands	r3, r1
 8001ec2:	431a      	orrs	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	619a      	str	r2, [r3, #24]
}
 8001ec8:	bf00      	nop
 8001eca:	3714      	adds	r7, #20
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e081      	b.n	8001fea <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d106      	bne.n	8001f00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7ff f87a 	bl	8000ff4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2224      	movs	r2, #36	; 0x24
 8001f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 0201 	bic.w	r2, r2, #1
 8001f16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f24:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f34:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d107      	bne.n	8001f4e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689a      	ldr	r2, [r3, #8]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	e006      	b.n	8001f5c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689a      	ldr	r2, [r3, #8]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001f5a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d104      	bne.n	8001f6e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f6c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	6812      	ldr	r2, [r2, #0]
 8001f78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f80:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68da      	ldr	r2, [r3, #12]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f90:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	691a      	ldr	r2, [r3, #16]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	69d9      	ldr	r1, [r3, #28]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a1a      	ldr	r2, [r3, #32]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f042 0201 	orr.w	r2, r2, #1
 8001fca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2220      	movs	r2, #32
 8001fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
	...

08001ff4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b088      	sub	sp, #32
 8001ff8:	af02      	add	r7, sp, #8
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	4608      	mov	r0, r1
 8001ffe:	4611      	mov	r1, r2
 8002000:	461a      	mov	r2, r3
 8002002:	4603      	mov	r3, r0
 8002004:	817b      	strh	r3, [r7, #10]
 8002006:	460b      	mov	r3, r1
 8002008:	813b      	strh	r3, [r7, #8]
 800200a:	4613      	mov	r3, r2
 800200c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b20      	cmp	r3, #32
 8002018:	f040 80f9 	bne.w	800220e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800201c:	6a3b      	ldr	r3, [r7, #32]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d002      	beq.n	8002028 <HAL_I2C_Mem_Write+0x34>
 8002022:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002024:	2b00      	cmp	r3, #0
 8002026:	d105      	bne.n	8002034 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800202e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e0ed      	b.n	8002210 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800203a:	2b01      	cmp	r3, #1
 800203c:	d101      	bne.n	8002042 <HAL_I2C_Mem_Write+0x4e>
 800203e:	2302      	movs	r3, #2
 8002040:	e0e6      	b.n	8002210 <HAL_I2C_Mem_Write+0x21c>
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800204a:	f7ff fa57 	bl	80014fc <HAL_GetTick>
 800204e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	2319      	movs	r3, #25
 8002056:	2201      	movs	r2, #1
 8002058:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f000 fac3 	bl	80025e8 <I2C_WaitOnFlagUntilTimeout>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e0d1      	b.n	8002210 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2221      	movs	r2, #33	; 0x21
 8002070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2240      	movs	r2, #64	; 0x40
 8002078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6a3a      	ldr	r2, [r7, #32]
 8002086:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800208c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002094:	88f8      	ldrh	r0, [r7, #6]
 8002096:	893a      	ldrh	r2, [r7, #8]
 8002098:	8979      	ldrh	r1, [r7, #10]
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	9301      	str	r3, [sp, #4]
 800209e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a0:	9300      	str	r3, [sp, #0]
 80020a2:	4603      	mov	r3, r0
 80020a4:	68f8      	ldr	r0, [r7, #12]
 80020a6:	f000 f9d3 	bl	8002450 <I2C_RequestMemoryWrite>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d005      	beq.n	80020bc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e0a9      	b.n	8002210 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	2bff      	cmp	r3, #255	; 0xff
 80020c4:	d90e      	bls.n	80020e4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	22ff      	movs	r2, #255	; 0xff
 80020ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	8979      	ldrh	r1, [r7, #10]
 80020d4:	2300      	movs	r3, #0
 80020d6:	9300      	str	r3, [sp, #0]
 80020d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020dc:	68f8      	ldr	r0, [r7, #12]
 80020de:	f000 fc2b 	bl	8002938 <I2C_TransferConfig>
 80020e2:	e00f      	b.n	8002104 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f2:	b2da      	uxtb	r2, r3
 80020f4:	8979      	ldrh	r1, [r7, #10]
 80020f6:	2300      	movs	r3, #0
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f000 fc1a 	bl	8002938 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002108:	68f8      	ldr	r0, [r7, #12]
 800210a:	f000 faad 	bl	8002668 <I2C_WaitOnTXISFlagUntilTimeout>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e07b      	b.n	8002210 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211c:	781a      	ldrb	r2, [r3, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002128:	1c5a      	adds	r2, r3, #1
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002132:	b29b      	uxth	r3, r3
 8002134:	3b01      	subs	r3, #1
 8002136:	b29a      	uxth	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002140:	3b01      	subs	r3, #1
 8002142:	b29a      	uxth	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800214c:	b29b      	uxth	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d034      	beq.n	80021bc <HAL_I2C_Mem_Write+0x1c8>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002156:	2b00      	cmp	r3, #0
 8002158:	d130      	bne.n	80021bc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002160:	2200      	movs	r2, #0
 8002162:	2180      	movs	r1, #128	; 0x80
 8002164:	68f8      	ldr	r0, [r7, #12]
 8002166:	f000 fa3f 	bl	80025e8 <I2C_WaitOnFlagUntilTimeout>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e04d      	b.n	8002210 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002178:	b29b      	uxth	r3, r3
 800217a:	2bff      	cmp	r3, #255	; 0xff
 800217c:	d90e      	bls.n	800219c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	22ff      	movs	r2, #255	; 0xff
 8002182:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002188:	b2da      	uxtb	r2, r3
 800218a:	8979      	ldrh	r1, [r7, #10]
 800218c:	2300      	movs	r3, #0
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f000 fbcf 	bl	8002938 <I2C_TransferConfig>
 800219a:	e00f      	b.n	80021bc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021aa:	b2da      	uxtb	r2, r3
 80021ac:	8979      	ldrh	r1, [r7, #10]
 80021ae:	2300      	movs	r3, #0
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 fbbe 	bl	8002938 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d19e      	bne.n	8002104 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021ca:	68f8      	ldr	r0, [r7, #12]
 80021cc:	f000 fa8c 	bl	80026e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e01a      	b.n	8002210 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2220      	movs	r2, #32
 80021e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6859      	ldr	r1, [r3, #4]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	4b0a      	ldr	r3, [pc, #40]	; (8002218 <HAL_I2C_Mem_Write+0x224>)
 80021ee:	400b      	ands	r3, r1
 80021f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2220      	movs	r2, #32
 80021f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800220a:	2300      	movs	r3, #0
 800220c:	e000      	b.n	8002210 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800220e:	2302      	movs	r3, #2
  }
}
 8002210:	4618      	mov	r0, r3
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	fe00e800 	.word	0xfe00e800

0800221c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b088      	sub	sp, #32
 8002220:	af02      	add	r7, sp, #8
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	4608      	mov	r0, r1
 8002226:	4611      	mov	r1, r2
 8002228:	461a      	mov	r2, r3
 800222a:	4603      	mov	r3, r0
 800222c:	817b      	strh	r3, [r7, #10]
 800222e:	460b      	mov	r3, r1
 8002230:	813b      	strh	r3, [r7, #8]
 8002232:	4613      	mov	r3, r2
 8002234:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b20      	cmp	r3, #32
 8002240:	f040 80fd 	bne.w	800243e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002244:	6a3b      	ldr	r3, [r7, #32]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d002      	beq.n	8002250 <HAL_I2C_Mem_Read+0x34>
 800224a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800224c:	2b00      	cmp	r3, #0
 800224e:	d105      	bne.n	800225c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002256:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e0f1      	b.n	8002440 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002262:	2b01      	cmp	r3, #1
 8002264:	d101      	bne.n	800226a <HAL_I2C_Mem_Read+0x4e>
 8002266:	2302      	movs	r3, #2
 8002268:	e0ea      	b.n	8002440 <HAL_I2C_Mem_Read+0x224>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002272:	f7ff f943 	bl	80014fc <HAL_GetTick>
 8002276:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	9300      	str	r3, [sp, #0]
 800227c:	2319      	movs	r3, #25
 800227e:	2201      	movs	r2, #1
 8002280:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002284:	68f8      	ldr	r0, [r7, #12]
 8002286:	f000 f9af 	bl	80025e8 <I2C_WaitOnFlagUntilTimeout>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e0d5      	b.n	8002440 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2222      	movs	r2, #34	; 0x22
 8002298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2240      	movs	r2, #64	; 0x40
 80022a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2200      	movs	r2, #0
 80022a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6a3a      	ldr	r2, [r7, #32]
 80022ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80022b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022bc:	88f8      	ldrh	r0, [r7, #6]
 80022be:	893a      	ldrh	r2, [r7, #8]
 80022c0:	8979      	ldrh	r1, [r7, #10]
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	9301      	str	r3, [sp, #4]
 80022c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c8:	9300      	str	r3, [sp, #0]
 80022ca:	4603      	mov	r3, r0
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	f000 f913 	bl	80024f8 <I2C_RequestMemoryRead>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d005      	beq.n	80022e4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e0ad      	b.n	8002440 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	2bff      	cmp	r3, #255	; 0xff
 80022ec:	d90e      	bls.n	800230c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	22ff      	movs	r2, #255	; 0xff
 80022f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	8979      	ldrh	r1, [r7, #10]
 80022fc:	4b52      	ldr	r3, [pc, #328]	; (8002448 <HAL_I2C_Mem_Read+0x22c>)
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f000 fb17 	bl	8002938 <I2C_TransferConfig>
 800230a:	e00f      	b.n	800232c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002310:	b29a      	uxth	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231a:	b2da      	uxtb	r2, r3
 800231c:	8979      	ldrh	r1, [r7, #10]
 800231e:	4b4a      	ldr	r3, [pc, #296]	; (8002448 <HAL_I2C_Mem_Read+0x22c>)
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	f000 fb06 	bl	8002938 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002332:	2200      	movs	r2, #0
 8002334:	2104      	movs	r1, #4
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f000 f956 	bl	80025e8 <I2C_WaitOnFlagUntilTimeout>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e07c      	b.n	8002440 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002358:	1c5a      	adds	r2, r3, #1
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002362:	3b01      	subs	r3, #1
 8002364:	b29a      	uxth	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800236e:	b29b      	uxth	r3, r3
 8002370:	3b01      	subs	r3, #1
 8002372:	b29a      	uxth	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800237c:	b29b      	uxth	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d034      	beq.n	80023ec <HAL_I2C_Mem_Read+0x1d0>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002386:	2b00      	cmp	r3, #0
 8002388:	d130      	bne.n	80023ec <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002390:	2200      	movs	r2, #0
 8002392:	2180      	movs	r1, #128	; 0x80
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f000 f927 	bl	80025e8 <I2C_WaitOnFlagUntilTimeout>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e04d      	b.n	8002440 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	2bff      	cmp	r3, #255	; 0xff
 80023ac:	d90e      	bls.n	80023cc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	22ff      	movs	r2, #255	; 0xff
 80023b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	8979      	ldrh	r1, [r7, #10]
 80023bc:	2300      	movs	r3, #0
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f000 fab7 	bl	8002938 <I2C_TransferConfig>
 80023ca:	e00f      	b.n	80023ec <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	8979      	ldrh	r1, [r7, #10]
 80023de:	2300      	movs	r3, #0
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f000 faa6 	bl	8002938 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d19a      	bne.n	800232c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f000 f974 	bl	80026e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e01a      	b.n	8002440 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2220      	movs	r2, #32
 8002410:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6859      	ldr	r1, [r3, #4]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	4b0b      	ldr	r3, [pc, #44]	; (800244c <HAL_I2C_Mem_Read+0x230>)
 800241e:	400b      	ands	r3, r1
 8002420:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2220      	movs	r2, #32
 8002426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800243a:	2300      	movs	r3, #0
 800243c:	e000      	b.n	8002440 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800243e:	2302      	movs	r3, #2
  }
}
 8002440:	4618      	mov	r0, r3
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	80002400 	.word	0x80002400
 800244c:	fe00e800 	.word	0xfe00e800

08002450 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af02      	add	r7, sp, #8
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	4608      	mov	r0, r1
 800245a:	4611      	mov	r1, r2
 800245c:	461a      	mov	r2, r3
 800245e:	4603      	mov	r3, r0
 8002460:	817b      	strh	r3, [r7, #10]
 8002462:	460b      	mov	r3, r1
 8002464:	813b      	strh	r3, [r7, #8]
 8002466:	4613      	mov	r3, r2
 8002468:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800246a:	88fb      	ldrh	r3, [r7, #6]
 800246c:	b2da      	uxtb	r2, r3
 800246e:	8979      	ldrh	r1, [r7, #10]
 8002470:	4b20      	ldr	r3, [pc, #128]	; (80024f4 <I2C_RequestMemoryWrite+0xa4>)
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f000 fa5d 	bl	8002938 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800247e:	69fa      	ldr	r2, [r7, #28]
 8002480:	69b9      	ldr	r1, [r7, #24]
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f000 f8f0 	bl	8002668 <I2C_WaitOnTXISFlagUntilTimeout>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e02c      	b.n	80024ec <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002492:	88fb      	ldrh	r3, [r7, #6]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d105      	bne.n	80024a4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002498:	893b      	ldrh	r3, [r7, #8]
 800249a:	b2da      	uxtb	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	629a      	str	r2, [r3, #40]	; 0x28
 80024a2:	e015      	b.n	80024d0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80024a4:	893b      	ldrh	r3, [r7, #8]
 80024a6:	0a1b      	lsrs	r3, r3, #8
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024b2:	69fa      	ldr	r2, [r7, #28]
 80024b4:	69b9      	ldr	r1, [r7, #24]
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f000 f8d6 	bl	8002668 <I2C_WaitOnTXISFlagUntilTimeout>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e012      	b.n	80024ec <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024c6:	893b      	ldrh	r3, [r7, #8]
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	2200      	movs	r2, #0
 80024d8:	2180      	movs	r1, #128	; 0x80
 80024da:	68f8      	ldr	r0, [r7, #12]
 80024dc:	f000 f884 	bl	80025e8 <I2C_WaitOnFlagUntilTimeout>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	80002000 	.word	0x80002000

080024f8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af02      	add	r7, sp, #8
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	4608      	mov	r0, r1
 8002502:	4611      	mov	r1, r2
 8002504:	461a      	mov	r2, r3
 8002506:	4603      	mov	r3, r0
 8002508:	817b      	strh	r3, [r7, #10]
 800250a:	460b      	mov	r3, r1
 800250c:	813b      	strh	r3, [r7, #8]
 800250e:	4613      	mov	r3, r2
 8002510:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002512:	88fb      	ldrh	r3, [r7, #6]
 8002514:	b2da      	uxtb	r2, r3
 8002516:	8979      	ldrh	r1, [r7, #10]
 8002518:	4b20      	ldr	r3, [pc, #128]	; (800259c <I2C_RequestMemoryRead+0xa4>)
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	2300      	movs	r3, #0
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f000 fa0a 	bl	8002938 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002524:	69fa      	ldr	r2, [r7, #28]
 8002526:	69b9      	ldr	r1, [r7, #24]
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f000 f89d 	bl	8002668 <I2C_WaitOnTXISFlagUntilTimeout>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e02c      	b.n	8002592 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002538:	88fb      	ldrh	r3, [r7, #6]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d105      	bne.n	800254a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800253e:	893b      	ldrh	r3, [r7, #8]
 8002540:	b2da      	uxtb	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	629a      	str	r2, [r3, #40]	; 0x28
 8002548:	e015      	b.n	8002576 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800254a:	893b      	ldrh	r3, [r7, #8]
 800254c:	0a1b      	lsrs	r3, r3, #8
 800254e:	b29b      	uxth	r3, r3
 8002550:	b2da      	uxtb	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002558:	69fa      	ldr	r2, [r7, #28]
 800255a:	69b9      	ldr	r1, [r7, #24]
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f000 f883 	bl	8002668 <I2C_WaitOnTXISFlagUntilTimeout>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e012      	b.n	8002592 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800256c:	893b      	ldrh	r3, [r7, #8]
 800256e:	b2da      	uxtb	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	2200      	movs	r2, #0
 800257e:	2140      	movs	r1, #64	; 0x40
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f000 f831 	bl	80025e8 <I2C_WaitOnFlagUntilTimeout>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e000      	b.n	8002592 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	80002000 	.word	0x80002000

080025a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d103      	bne.n	80025be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2200      	movs	r2, #0
 80025bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d007      	beq.n	80025dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	699a      	ldr	r2, [r3, #24]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 0201 	orr.w	r2, r2, #1
 80025da:	619a      	str	r2, [r3, #24]
  }
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	603b      	str	r3, [r7, #0]
 80025f4:	4613      	mov	r3, r2
 80025f6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025f8:	e022      	b.n	8002640 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002600:	d01e      	beq.n	8002640 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002602:	f7fe ff7b 	bl	80014fc <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	429a      	cmp	r2, r3
 8002610:	d302      	bcc.n	8002618 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d113      	bne.n	8002640 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261c:	f043 0220 	orr.w	r2, r3, #32
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2220      	movs	r2, #32
 8002628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e00f      	b.n	8002660 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	699a      	ldr	r2, [r3, #24]
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	4013      	ands	r3, r2
 800264a:	68ba      	ldr	r2, [r7, #8]
 800264c:	429a      	cmp	r2, r3
 800264e:	bf0c      	ite	eq
 8002650:	2301      	moveq	r3, #1
 8002652:	2300      	movne	r3, #0
 8002654:	b2db      	uxtb	r3, r3
 8002656:	461a      	mov	r2, r3
 8002658:	79fb      	ldrb	r3, [r7, #7]
 800265a:	429a      	cmp	r2, r3
 800265c:	d0cd      	beq.n	80025fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002674:	e02c      	b.n	80026d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	68b9      	ldr	r1, [r7, #8]
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 f870 	bl	8002760 <I2C_IsErrorOccurred>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e02a      	b.n	80026e0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002690:	d01e      	beq.n	80026d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002692:	f7fe ff33 	bl	80014fc <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	68ba      	ldr	r2, [r7, #8]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d302      	bcc.n	80026a8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d113      	bne.n	80026d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ac:	f043 0220 	orr.w	r2, r3, #32
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2220      	movs	r2, #32
 80026b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e007      	b.n	80026e0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d1cb      	bne.n	8002676 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026f4:	e028      	b.n	8002748 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	68b9      	ldr	r1, [r7, #8]
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f000 f830 	bl	8002760 <I2C_IsErrorOccurred>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e026      	b.n	8002758 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800270a:	f7fe fef7 	bl	80014fc <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	68ba      	ldr	r2, [r7, #8]
 8002716:	429a      	cmp	r2, r3
 8002718:	d302      	bcc.n	8002720 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d113      	bne.n	8002748 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002724:	f043 0220 	orr.w	r2, r3, #32
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2220      	movs	r2, #32
 8002730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e007      	b.n	8002758 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	f003 0320 	and.w	r3, r3, #32
 8002752:	2b20      	cmp	r3, #32
 8002754:	d1cf      	bne.n	80026f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b08a      	sub	sp, #40	; 0x28
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800276c:	2300      	movs	r3, #0
 800276e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800277a:	2300      	movs	r3, #0
 800277c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	f003 0310 	and.w	r3, r3, #16
 8002788:	2b00      	cmp	r3, #0
 800278a:	d075      	beq.n	8002878 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2210      	movs	r2, #16
 8002792:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002794:	e056      	b.n	8002844 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800279c:	d052      	beq.n	8002844 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800279e:	f7fe fead 	bl	80014fc <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d302      	bcc.n	80027b4 <I2C_IsErrorOccurred+0x54>
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d147      	bne.n	8002844 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80027c6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027d6:	d12e      	bne.n	8002836 <I2C_IsErrorOccurred+0xd6>
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027de:	d02a      	beq.n	8002836 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80027e0:	7cfb      	ldrb	r3, [r7, #19]
 80027e2:	2b20      	cmp	r3, #32
 80027e4:	d027      	beq.n	8002836 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027f4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80027f6:	f7fe fe81 	bl	80014fc <HAL_GetTick>
 80027fa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027fc:	e01b      	b.n	8002836 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80027fe:	f7fe fe7d 	bl	80014fc <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b19      	cmp	r3, #25
 800280a:	d914      	bls.n	8002836 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002810:	f043 0220 	orr.w	r2, r3, #32
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2220      	movs	r2, #32
 800281c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	f003 0320 	and.w	r3, r3, #32
 8002840:	2b20      	cmp	r3, #32
 8002842:	d1dc      	bne.n	80027fe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	f003 0320 	and.w	r3, r3, #32
 800284e:	2b20      	cmp	r3, #32
 8002850:	d003      	beq.n	800285a <I2C_IsErrorOccurred+0xfa>
 8002852:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002856:	2b00      	cmp	r3, #0
 8002858:	d09d      	beq.n	8002796 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800285a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800285e:	2b00      	cmp	r3, #0
 8002860:	d103      	bne.n	800286a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2220      	movs	r2, #32
 8002868:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800286a:	6a3b      	ldr	r3, [r7, #32]
 800286c:	f043 0304 	orr.w	r3, r3, #4
 8002870:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00b      	beq.n	80028a2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800288a:	6a3b      	ldr	r3, [r7, #32]
 800288c:	f043 0301 	orr.w	r3, r3, #1
 8002890:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f44f 7280 	mov.w	r2, #256	; 0x100
 800289a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00b      	beq.n	80028c4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80028ac:	6a3b      	ldr	r3, [r7, #32]
 80028ae:	f043 0308 	orr.w	r3, r3, #8
 80028b2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00b      	beq.n	80028e6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	f043 0302 	orr.w	r3, r3, #2
 80028d4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80028e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d01c      	beq.n	8002928 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f7ff fe56 	bl	80025a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6859      	ldr	r1, [r3, #4]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	4b0d      	ldr	r3, [pc, #52]	; (8002934 <I2C_IsErrorOccurred+0x1d4>)
 8002900:	400b      	ands	r3, r1
 8002902:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002908:	6a3b      	ldr	r3, [r7, #32]
 800290a:	431a      	orrs	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2220      	movs	r2, #32
 8002914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002928:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800292c:	4618      	mov	r0, r3
 800292e:	3728      	adds	r7, #40	; 0x28
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	fe00e800 	.word	0xfe00e800

08002938 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002938:	b480      	push	{r7}
 800293a:	b087      	sub	sp, #28
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	607b      	str	r3, [r7, #4]
 8002942:	460b      	mov	r3, r1
 8002944:	817b      	strh	r3, [r7, #10]
 8002946:	4613      	mov	r3, r2
 8002948:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800294a:	897b      	ldrh	r3, [r7, #10]
 800294c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002950:	7a7b      	ldrb	r3, [r7, #9]
 8002952:	041b      	lsls	r3, r3, #16
 8002954:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002958:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800295e:	6a3b      	ldr	r3, [r7, #32]
 8002960:	4313      	orrs	r3, r2
 8002962:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002966:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	0d5b      	lsrs	r3, r3, #21
 8002972:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002976:	4b08      	ldr	r3, [pc, #32]	; (8002998 <I2C_TransferConfig+0x60>)
 8002978:	430b      	orrs	r3, r1
 800297a:	43db      	mvns	r3, r3
 800297c:	ea02 0103 	and.w	r1, r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	430a      	orrs	r2, r1
 8002988:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800298a:	bf00      	nop
 800298c:	371c      	adds	r7, #28
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	03ff63ff 	.word	0x03ff63ff

0800299c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b20      	cmp	r3, #32
 80029b0:	d138      	bne.n	8002a24 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d101      	bne.n	80029c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80029bc:	2302      	movs	r3, #2
 80029be:	e032      	b.n	8002a26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2224      	movs	r2, #36	; 0x24
 80029cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 0201 	bic.w	r2, r2, #1
 80029de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6819      	ldr	r1, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	430a      	orrs	r2, r1
 80029fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f042 0201 	orr.w	r2, r2, #1
 8002a0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2220      	movs	r2, #32
 8002a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a20:	2300      	movs	r3, #0
 8002a22:	e000      	b.n	8002a26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a24:	2302      	movs	r3, #2
  }
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b085      	sub	sp, #20
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
 8002a3a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b20      	cmp	r3, #32
 8002a46:	d139      	bne.n	8002abc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d101      	bne.n	8002a56 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a52:	2302      	movs	r3, #2
 8002a54:	e033      	b.n	8002abe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2224      	movs	r2, #36	; 0x24
 8002a62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0201 	bic.w	r2, r2, #1
 8002a74:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a84:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	021b      	lsls	r3, r3, #8
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f042 0201 	orr.w	r2, r2, #1
 8002aa6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2220      	movs	r2, #32
 8002aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	e000      	b.n	8002abe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002abc:	2302      	movs	r3, #2
  }
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3714      	adds	r7, #20
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
	...

08002acc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ad0:	4b04      	ldr	r3, [pc, #16]	; (8002ae4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	40007000 	.word	0x40007000

08002ae8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002af6:	d130      	bne.n	8002b5a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002af8:	4b23      	ldr	r3, [pc, #140]	; (8002b88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b04:	d038      	beq.n	8002b78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b06:	4b20      	ldr	r3, [pc, #128]	; (8002b88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b0e:	4a1e      	ldr	r2, [pc, #120]	; (8002b88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b14:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b16:	4b1d      	ldr	r3, [pc, #116]	; (8002b8c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2232      	movs	r2, #50	; 0x32
 8002b1c:	fb02 f303 	mul.w	r3, r2, r3
 8002b20:	4a1b      	ldr	r2, [pc, #108]	; (8002b90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b22:	fba2 2303 	umull	r2, r3, r2, r3
 8002b26:	0c9b      	lsrs	r3, r3, #18
 8002b28:	3301      	adds	r3, #1
 8002b2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b2c:	e002      	b.n	8002b34 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	3b01      	subs	r3, #1
 8002b32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b34:	4b14      	ldr	r3, [pc, #80]	; (8002b88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b40:	d102      	bne.n	8002b48 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1f2      	bne.n	8002b2e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b48:	4b0f      	ldr	r3, [pc, #60]	; (8002b88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b54:	d110      	bne.n	8002b78 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e00f      	b.n	8002b7a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b5a:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b66:	d007      	beq.n	8002b78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b68:	4b07      	ldr	r3, [pc, #28]	; (8002b88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b70:	4a05      	ldr	r2, [pc, #20]	; (8002b88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b76:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3714      	adds	r7, #20
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	40007000 	.word	0x40007000
 8002b8c:	20000000 	.word	0x20000000
 8002b90:	431bde83 	.word	0x431bde83

08002b94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b088      	sub	sp, #32
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d102      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	f000 bc02 	b.w	80033ac <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ba8:	4b96      	ldr	r3, [pc, #600]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f003 030c 	and.w	r3, r3, #12
 8002bb0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bb2:	4b94      	ldr	r3, [pc, #592]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0310 	and.w	r3, r3, #16
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 80e4 	beq.w	8002d92 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d007      	beq.n	8002be0 <HAL_RCC_OscConfig+0x4c>
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	2b0c      	cmp	r3, #12
 8002bd4:	f040 808b 	bne.w	8002cee <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	f040 8087 	bne.w	8002cee <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002be0:	4b88      	ldr	r3, [pc, #544]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d005      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x64>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e3d9      	b.n	80033ac <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a1a      	ldr	r2, [r3, #32]
 8002bfc:	4b81      	ldr	r3, [pc, #516]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0308 	and.w	r3, r3, #8
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d004      	beq.n	8002c12 <HAL_RCC_OscConfig+0x7e>
 8002c08:	4b7e      	ldr	r3, [pc, #504]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c10:	e005      	b.n	8002c1e <HAL_RCC_OscConfig+0x8a>
 8002c12:	4b7c      	ldr	r3, [pc, #496]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002c14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c18:	091b      	lsrs	r3, r3, #4
 8002c1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d223      	bcs.n	8002c6a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f000 fdbe 	bl	80037a8 <RCC_SetFlashLatencyFromMSIRange>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e3ba      	b.n	80033ac <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c36:	4b73      	ldr	r3, [pc, #460]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a72      	ldr	r2, [pc, #456]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002c3c:	f043 0308 	orr.w	r3, r3, #8
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	4b70      	ldr	r3, [pc, #448]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	496d      	ldr	r1, [pc, #436]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c54:	4b6b      	ldr	r3, [pc, #428]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	69db      	ldr	r3, [r3, #28]
 8002c60:	021b      	lsls	r3, r3, #8
 8002c62:	4968      	ldr	r1, [pc, #416]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	604b      	str	r3, [r1, #4]
 8002c68:	e025      	b.n	8002cb6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c6a:	4b66      	ldr	r3, [pc, #408]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a65      	ldr	r2, [pc, #404]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002c70:	f043 0308 	orr.w	r3, r3, #8
 8002c74:	6013      	str	r3, [r2, #0]
 8002c76:	4b63      	ldr	r3, [pc, #396]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	4960      	ldr	r1, [pc, #384]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c88:	4b5e      	ldr	r3, [pc, #376]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	021b      	lsls	r3, r3, #8
 8002c96:	495b      	ldr	r1, [pc, #364]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d109      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f000 fd7e 	bl	80037a8 <RCC_SetFlashLatencyFromMSIRange>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e37a      	b.n	80033ac <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cb6:	f000 fc81 	bl	80035bc <HAL_RCC_GetSysClockFreq>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	4b51      	ldr	r3, [pc, #324]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	091b      	lsrs	r3, r3, #4
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	4950      	ldr	r1, [pc, #320]	; (8002e08 <HAL_RCC_OscConfig+0x274>)
 8002cc8:	5ccb      	ldrb	r3, [r1, r3]
 8002cca:	f003 031f 	and.w	r3, r3, #31
 8002cce:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd2:	4a4e      	ldr	r2, [pc, #312]	; (8002e0c <HAL_RCC_OscConfig+0x278>)
 8002cd4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002cd6:	4b4e      	ldr	r3, [pc, #312]	; (8002e10 <HAL_RCC_OscConfig+0x27c>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7fe fb18 	bl	8001310 <HAL_InitTick>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ce4:	7bfb      	ldrb	r3, [r7, #15]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d052      	beq.n	8002d90 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002cea:	7bfb      	ldrb	r3, [r7, #15]
 8002cec:	e35e      	b.n	80033ac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d032      	beq.n	8002d5c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002cf6:	4b43      	ldr	r3, [pc, #268]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a42      	ldr	r2, [pc, #264]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002cfc:	f043 0301 	orr.w	r3, r3, #1
 8002d00:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d02:	f7fe fbfb 	bl	80014fc <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d08:	e008      	b.n	8002d1c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d0a:	f7fe fbf7 	bl	80014fc <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e347      	b.n	80033ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d1c:	4b39      	ldr	r3, [pc, #228]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d0f0      	beq.n	8002d0a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d28:	4b36      	ldr	r3, [pc, #216]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a35      	ldr	r2, [pc, #212]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002d2e:	f043 0308 	orr.w	r3, r3, #8
 8002d32:	6013      	str	r3, [r2, #0]
 8002d34:	4b33      	ldr	r3, [pc, #204]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	4930      	ldr	r1, [pc, #192]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d46:	4b2f      	ldr	r3, [pc, #188]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	021b      	lsls	r3, r3, #8
 8002d54:	492b      	ldr	r1, [pc, #172]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	604b      	str	r3, [r1, #4]
 8002d5a:	e01a      	b.n	8002d92 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d5c:	4b29      	ldr	r3, [pc, #164]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a28      	ldr	r2, [pc, #160]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002d62:	f023 0301 	bic.w	r3, r3, #1
 8002d66:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d68:	f7fe fbc8 	bl	80014fc <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d70:	f7fe fbc4 	bl	80014fc <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e314      	b.n	80033ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d82:	4b20      	ldr	r3, [pc, #128]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1f0      	bne.n	8002d70 <HAL_RCC_OscConfig+0x1dc>
 8002d8e:	e000      	b.n	8002d92 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d90:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d073      	beq.n	8002e86 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	2b08      	cmp	r3, #8
 8002da2:	d005      	beq.n	8002db0 <HAL_RCC_OscConfig+0x21c>
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	2b0c      	cmp	r3, #12
 8002da8:	d10e      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	2b03      	cmp	r3, #3
 8002dae:	d10b      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db0:	4b14      	ldr	r3, [pc, #80]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d063      	beq.n	8002e84 <HAL_RCC_OscConfig+0x2f0>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d15f      	bne.n	8002e84 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e2f1      	b.n	80033ac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd0:	d106      	bne.n	8002de0 <HAL_RCC_OscConfig+0x24c>
 8002dd2:	4b0c      	ldr	r3, [pc, #48]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a0b      	ldr	r2, [pc, #44]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ddc:	6013      	str	r3, [r2, #0]
 8002dde:	e025      	b.n	8002e2c <HAL_RCC_OscConfig+0x298>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002de8:	d114      	bne.n	8002e14 <HAL_RCC_OscConfig+0x280>
 8002dea:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a05      	ldr	r2, [pc, #20]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002df0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002df4:	6013      	str	r3, [r2, #0]
 8002df6:	4b03      	ldr	r3, [pc, #12]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a02      	ldr	r2, [pc, #8]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e00:	6013      	str	r3, [r2, #0]
 8002e02:	e013      	b.n	8002e2c <HAL_RCC_OscConfig+0x298>
 8002e04:	40021000 	.word	0x40021000
 8002e08:	0800869c 	.word	0x0800869c
 8002e0c:	20000000 	.word	0x20000000
 8002e10:	20000004 	.word	0x20000004
 8002e14:	4ba0      	ldr	r3, [pc, #640]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a9f      	ldr	r2, [pc, #636]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e1e:	6013      	str	r3, [r2, #0]
 8002e20:	4b9d      	ldr	r3, [pc, #628]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a9c      	ldr	r2, [pc, #624]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002e26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d013      	beq.n	8002e5c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e34:	f7fe fb62 	bl	80014fc <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e3c:	f7fe fb5e 	bl	80014fc <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b64      	cmp	r3, #100	; 0x64
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e2ae      	b.n	80033ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e4e:	4b92      	ldr	r3, [pc, #584]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d0f0      	beq.n	8002e3c <HAL_RCC_OscConfig+0x2a8>
 8002e5a:	e014      	b.n	8002e86 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5c:	f7fe fb4e 	bl	80014fc <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e64:	f7fe fb4a 	bl	80014fc <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b64      	cmp	r3, #100	; 0x64
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e29a      	b.n	80033ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e76:	4b88      	ldr	r3, [pc, #544]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1f0      	bne.n	8002e64 <HAL_RCC_OscConfig+0x2d0>
 8002e82:	e000      	b.n	8002e86 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d060      	beq.n	8002f54 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	2b04      	cmp	r3, #4
 8002e96:	d005      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x310>
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	2b0c      	cmp	r3, #12
 8002e9c:	d119      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d116      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ea4:	4b7c      	ldr	r3, [pc, #496]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d005      	beq.n	8002ebc <HAL_RCC_OscConfig+0x328>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e277      	b.n	80033ac <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ebc:	4b76      	ldr	r3, [pc, #472]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	061b      	lsls	r3, r3, #24
 8002eca:	4973      	ldr	r1, [pc, #460]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ed0:	e040      	b.n	8002f54 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d023      	beq.n	8002f22 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eda:	4b6f      	ldr	r3, [pc, #444]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a6e      	ldr	r2, [pc, #440]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee6:	f7fe fb09 	bl	80014fc <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eee:	f7fe fb05 	bl	80014fc <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e255      	b.n	80033ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f00:	4b65      	ldr	r3, [pc, #404]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0f0      	beq.n	8002eee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f0c:	4b62      	ldr	r3, [pc, #392]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	061b      	lsls	r3, r3, #24
 8002f1a:	495f      	ldr	r1, [pc, #380]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	604b      	str	r3, [r1, #4]
 8002f20:	e018      	b.n	8002f54 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f22:	4b5d      	ldr	r3, [pc, #372]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a5c      	ldr	r2, [pc, #368]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002f28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2e:	f7fe fae5 	bl	80014fc <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f34:	e008      	b.n	8002f48 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f36:	f7fe fae1 	bl	80014fc <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e231      	b.n	80033ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f48:	4b53      	ldr	r3, [pc, #332]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1f0      	bne.n	8002f36 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0308 	and.w	r3, r3, #8
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d03c      	beq.n	8002fda <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d01c      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f68:	4b4b      	ldr	r3, [pc, #300]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f6e:	4a4a      	ldr	r2, [pc, #296]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002f70:	f043 0301 	orr.w	r3, r3, #1
 8002f74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f78:	f7fe fac0 	bl	80014fc <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f80:	f7fe fabc 	bl	80014fc <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e20c      	b.n	80033ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f92:	4b41      	ldr	r3, [pc, #260]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002f94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0ef      	beq.n	8002f80 <HAL_RCC_OscConfig+0x3ec>
 8002fa0:	e01b      	b.n	8002fda <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fa2:	4b3d      	ldr	r3, [pc, #244]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002fa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fa8:	4a3b      	ldr	r2, [pc, #236]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002faa:	f023 0301 	bic.w	r3, r3, #1
 8002fae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb2:	f7fe faa3 	bl	80014fc <HAL_GetTick>
 8002fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fb8:	e008      	b.n	8002fcc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fba:	f7fe fa9f 	bl	80014fc <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e1ef      	b.n	80033ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fcc:	4b32      	ldr	r3, [pc, #200]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1ef      	bne.n	8002fba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0304 	and.w	r3, r3, #4
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f000 80a6 	beq.w	8003134 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002fec:	4b2a      	ldr	r3, [pc, #168]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10d      	bne.n	8003014 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ff8:	4b27      	ldr	r3, [pc, #156]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffc:	4a26      	ldr	r2, [pc, #152]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003002:	6593      	str	r3, [r2, #88]	; 0x58
 8003004:	4b24      	ldr	r3, [pc, #144]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8003006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800300c:	60bb      	str	r3, [r7, #8]
 800300e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003010:	2301      	movs	r3, #1
 8003012:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003014:	4b21      	ldr	r3, [pc, #132]	; (800309c <HAL_RCC_OscConfig+0x508>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800301c:	2b00      	cmp	r3, #0
 800301e:	d118      	bne.n	8003052 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003020:	4b1e      	ldr	r3, [pc, #120]	; (800309c <HAL_RCC_OscConfig+0x508>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a1d      	ldr	r2, [pc, #116]	; (800309c <HAL_RCC_OscConfig+0x508>)
 8003026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800302a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800302c:	f7fe fa66 	bl	80014fc <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003034:	f7fe fa62 	bl	80014fc <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e1b2      	b.n	80033ac <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003046:	4b15      	ldr	r3, [pc, #84]	; (800309c <HAL_RCC_OscConfig+0x508>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0f0      	beq.n	8003034 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d108      	bne.n	800306c <HAL_RCC_OscConfig+0x4d8>
 800305a:	4b0f      	ldr	r3, [pc, #60]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 800305c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003060:	4a0d      	ldr	r2, [pc, #52]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8003062:	f043 0301 	orr.w	r3, r3, #1
 8003066:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800306a:	e029      	b.n	80030c0 <HAL_RCC_OscConfig+0x52c>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	2b05      	cmp	r3, #5
 8003072:	d115      	bne.n	80030a0 <HAL_RCC_OscConfig+0x50c>
 8003074:	4b08      	ldr	r3, [pc, #32]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8003076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800307a:	4a07      	ldr	r2, [pc, #28]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 800307c:	f043 0304 	orr.w	r3, r3, #4
 8003080:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003084:	4b04      	ldr	r3, [pc, #16]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8003086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800308a:	4a03      	ldr	r2, [pc, #12]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 800308c:	f043 0301 	orr.w	r3, r3, #1
 8003090:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003094:	e014      	b.n	80030c0 <HAL_RCC_OscConfig+0x52c>
 8003096:	bf00      	nop
 8003098:	40021000 	.word	0x40021000
 800309c:	40007000 	.word	0x40007000
 80030a0:	4b9a      	ldr	r3, [pc, #616]	; (800330c <HAL_RCC_OscConfig+0x778>)
 80030a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a6:	4a99      	ldr	r2, [pc, #612]	; (800330c <HAL_RCC_OscConfig+0x778>)
 80030a8:	f023 0301 	bic.w	r3, r3, #1
 80030ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030b0:	4b96      	ldr	r3, [pc, #600]	; (800330c <HAL_RCC_OscConfig+0x778>)
 80030b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b6:	4a95      	ldr	r2, [pc, #596]	; (800330c <HAL_RCC_OscConfig+0x778>)
 80030b8:	f023 0304 	bic.w	r3, r3, #4
 80030bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d016      	beq.n	80030f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c8:	f7fe fa18 	bl	80014fc <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ce:	e00a      	b.n	80030e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030d0:	f7fe fa14 	bl	80014fc <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	f241 3288 	movw	r2, #5000	; 0x1388
 80030de:	4293      	cmp	r3, r2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e162      	b.n	80033ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030e6:	4b89      	ldr	r3, [pc, #548]	; (800330c <HAL_RCC_OscConfig+0x778>)
 80030e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0ed      	beq.n	80030d0 <HAL_RCC_OscConfig+0x53c>
 80030f4:	e015      	b.n	8003122 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f6:	f7fe fa01 	bl	80014fc <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030fc:	e00a      	b.n	8003114 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030fe:	f7fe f9fd 	bl	80014fc <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	f241 3288 	movw	r2, #5000	; 0x1388
 800310c:	4293      	cmp	r3, r2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e14b      	b.n	80033ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003114:	4b7d      	ldr	r3, [pc, #500]	; (800330c <HAL_RCC_OscConfig+0x778>)
 8003116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1ed      	bne.n	80030fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003122:	7ffb      	ldrb	r3, [r7, #31]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d105      	bne.n	8003134 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003128:	4b78      	ldr	r3, [pc, #480]	; (800330c <HAL_RCC_OscConfig+0x778>)
 800312a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312c:	4a77      	ldr	r2, [pc, #476]	; (800330c <HAL_RCC_OscConfig+0x778>)
 800312e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003132:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0320 	and.w	r3, r3, #32
 800313c:	2b00      	cmp	r3, #0
 800313e:	d03c      	beq.n	80031ba <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	2b00      	cmp	r3, #0
 8003146:	d01c      	beq.n	8003182 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003148:	4b70      	ldr	r3, [pc, #448]	; (800330c <HAL_RCC_OscConfig+0x778>)
 800314a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800314e:	4a6f      	ldr	r2, [pc, #444]	; (800330c <HAL_RCC_OscConfig+0x778>)
 8003150:	f043 0301 	orr.w	r3, r3, #1
 8003154:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003158:	f7fe f9d0 	bl	80014fc <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003160:	f7fe f9cc 	bl	80014fc <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e11c      	b.n	80033ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003172:	4b66      	ldr	r3, [pc, #408]	; (800330c <HAL_RCC_OscConfig+0x778>)
 8003174:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d0ef      	beq.n	8003160 <HAL_RCC_OscConfig+0x5cc>
 8003180:	e01b      	b.n	80031ba <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003182:	4b62      	ldr	r3, [pc, #392]	; (800330c <HAL_RCC_OscConfig+0x778>)
 8003184:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003188:	4a60      	ldr	r2, [pc, #384]	; (800330c <HAL_RCC_OscConfig+0x778>)
 800318a:	f023 0301 	bic.w	r3, r3, #1
 800318e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003192:	f7fe f9b3 	bl	80014fc <HAL_GetTick>
 8003196:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003198:	e008      	b.n	80031ac <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800319a:	f7fe f9af 	bl	80014fc <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d901      	bls.n	80031ac <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e0ff      	b.n	80033ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031ac:	4b57      	ldr	r3, [pc, #348]	; (800330c <HAL_RCC_OscConfig+0x778>)
 80031ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1ef      	bne.n	800319a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f000 80f3 	beq.w	80033aa <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	f040 80c9 	bne.w	8003360 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80031ce:	4b4f      	ldr	r3, [pc, #316]	; (800330c <HAL_RCC_OscConfig+0x778>)
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f003 0203 	and.w	r2, r3, #3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031de:	429a      	cmp	r2, r3
 80031e0:	d12c      	bne.n	800323c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ec:	3b01      	subs	r3, #1
 80031ee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d123      	bne.n	800323c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031fe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003200:	429a      	cmp	r2, r3
 8003202:	d11b      	bne.n	800323c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003210:	429a      	cmp	r2, r3
 8003212:	d113      	bne.n	800323c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321e:	085b      	lsrs	r3, r3, #1
 8003220:	3b01      	subs	r3, #1
 8003222:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003224:	429a      	cmp	r2, r3
 8003226:	d109      	bne.n	800323c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	085b      	lsrs	r3, r3, #1
 8003234:	3b01      	subs	r3, #1
 8003236:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003238:	429a      	cmp	r2, r3
 800323a:	d06b      	beq.n	8003314 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	2b0c      	cmp	r3, #12
 8003240:	d062      	beq.n	8003308 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003242:	4b32      	ldr	r3, [pc, #200]	; (800330c <HAL_RCC_OscConfig+0x778>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e0ac      	b.n	80033ac <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003252:	4b2e      	ldr	r3, [pc, #184]	; (800330c <HAL_RCC_OscConfig+0x778>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a2d      	ldr	r2, [pc, #180]	; (800330c <HAL_RCC_OscConfig+0x778>)
 8003258:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800325c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800325e:	f7fe f94d 	bl	80014fc <HAL_GetTick>
 8003262:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003264:	e008      	b.n	8003278 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003266:	f7fe f949 	bl	80014fc <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d901      	bls.n	8003278 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e099      	b.n	80033ac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003278:	4b24      	ldr	r3, [pc, #144]	; (800330c <HAL_RCC_OscConfig+0x778>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1f0      	bne.n	8003266 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003284:	4b21      	ldr	r3, [pc, #132]	; (800330c <HAL_RCC_OscConfig+0x778>)
 8003286:	68da      	ldr	r2, [r3, #12]
 8003288:	4b21      	ldr	r3, [pc, #132]	; (8003310 <HAL_RCC_OscConfig+0x77c>)
 800328a:	4013      	ands	r3, r2
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003294:	3a01      	subs	r2, #1
 8003296:	0112      	lsls	r2, r2, #4
 8003298:	4311      	orrs	r1, r2
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800329e:	0212      	lsls	r2, r2, #8
 80032a0:	4311      	orrs	r1, r2
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80032a6:	0852      	lsrs	r2, r2, #1
 80032a8:	3a01      	subs	r2, #1
 80032aa:	0552      	lsls	r2, r2, #21
 80032ac:	4311      	orrs	r1, r2
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80032b2:	0852      	lsrs	r2, r2, #1
 80032b4:	3a01      	subs	r2, #1
 80032b6:	0652      	lsls	r2, r2, #25
 80032b8:	4311      	orrs	r1, r2
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032be:	06d2      	lsls	r2, r2, #27
 80032c0:	430a      	orrs	r2, r1
 80032c2:	4912      	ldr	r1, [pc, #72]	; (800330c <HAL_RCC_OscConfig+0x778>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80032c8:	4b10      	ldr	r3, [pc, #64]	; (800330c <HAL_RCC_OscConfig+0x778>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a0f      	ldr	r2, [pc, #60]	; (800330c <HAL_RCC_OscConfig+0x778>)
 80032ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032d4:	4b0d      	ldr	r3, [pc, #52]	; (800330c <HAL_RCC_OscConfig+0x778>)
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	4a0c      	ldr	r2, [pc, #48]	; (800330c <HAL_RCC_OscConfig+0x778>)
 80032da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032e0:	f7fe f90c 	bl	80014fc <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e8:	f7fe f908 	bl	80014fc <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e058      	b.n	80033ac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032fa:	4b04      	ldr	r3, [pc, #16]	; (800330c <HAL_RCC_OscConfig+0x778>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0f0      	beq.n	80032e8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003306:	e050      	b.n	80033aa <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e04f      	b.n	80033ac <HAL_RCC_OscConfig+0x818>
 800330c:	40021000 	.word	0x40021000
 8003310:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003314:	4b27      	ldr	r3, [pc, #156]	; (80033b4 <HAL_RCC_OscConfig+0x820>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d144      	bne.n	80033aa <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003320:	4b24      	ldr	r3, [pc, #144]	; (80033b4 <HAL_RCC_OscConfig+0x820>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a23      	ldr	r2, [pc, #140]	; (80033b4 <HAL_RCC_OscConfig+0x820>)
 8003326:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800332a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800332c:	4b21      	ldr	r3, [pc, #132]	; (80033b4 <HAL_RCC_OscConfig+0x820>)
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	4a20      	ldr	r2, [pc, #128]	; (80033b4 <HAL_RCC_OscConfig+0x820>)
 8003332:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003336:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003338:	f7fe f8e0 	bl	80014fc <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003340:	f7fe f8dc 	bl	80014fc <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e02c      	b.n	80033ac <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003352:	4b18      	ldr	r3, [pc, #96]	; (80033b4 <HAL_RCC_OscConfig+0x820>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0f0      	beq.n	8003340 <HAL_RCC_OscConfig+0x7ac>
 800335e:	e024      	b.n	80033aa <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	2b0c      	cmp	r3, #12
 8003364:	d01f      	beq.n	80033a6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003366:	4b13      	ldr	r3, [pc, #76]	; (80033b4 <HAL_RCC_OscConfig+0x820>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a12      	ldr	r2, [pc, #72]	; (80033b4 <HAL_RCC_OscConfig+0x820>)
 800336c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003370:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003372:	f7fe f8c3 	bl	80014fc <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003378:	e008      	b.n	800338c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800337a:	f7fe f8bf 	bl	80014fc <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e00f      	b.n	80033ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800338c:	4b09      	ldr	r3, [pc, #36]	; (80033b4 <HAL_RCC_OscConfig+0x820>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1f0      	bne.n	800337a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003398:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <HAL_RCC_OscConfig+0x820>)
 800339a:	68da      	ldr	r2, [r3, #12]
 800339c:	4905      	ldr	r1, [pc, #20]	; (80033b4 <HAL_RCC_OscConfig+0x820>)
 800339e:	4b06      	ldr	r3, [pc, #24]	; (80033b8 <HAL_RCC_OscConfig+0x824>)
 80033a0:	4013      	ands	r3, r2
 80033a2:	60cb      	str	r3, [r1, #12]
 80033a4:	e001      	b.n	80033aa <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e000      	b.n	80033ac <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3720      	adds	r7, #32
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40021000 	.word	0x40021000
 80033b8:	feeefffc 	.word	0xfeeefffc

080033bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e0e7      	b.n	80035a0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033d0:	4b75      	ldr	r3, [pc, #468]	; (80035a8 <HAL_RCC_ClockConfig+0x1ec>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0307 	and.w	r3, r3, #7
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d910      	bls.n	8003400 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033de:	4b72      	ldr	r3, [pc, #456]	; (80035a8 <HAL_RCC_ClockConfig+0x1ec>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f023 0207 	bic.w	r2, r3, #7
 80033e6:	4970      	ldr	r1, [pc, #448]	; (80035a8 <HAL_RCC_ClockConfig+0x1ec>)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ee:	4b6e      	ldr	r3, [pc, #440]	; (80035a8 <HAL_RCC_ClockConfig+0x1ec>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0307 	and.w	r3, r3, #7
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d001      	beq.n	8003400 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e0cf      	b.n	80035a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d010      	beq.n	800342e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	4b66      	ldr	r3, [pc, #408]	; (80035ac <HAL_RCC_ClockConfig+0x1f0>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003418:	429a      	cmp	r2, r3
 800341a:	d908      	bls.n	800342e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800341c:	4b63      	ldr	r3, [pc, #396]	; (80035ac <HAL_RCC_ClockConfig+0x1f0>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	4960      	ldr	r1, [pc, #384]	; (80035ac <HAL_RCC_ClockConfig+0x1f0>)
 800342a:	4313      	orrs	r3, r2
 800342c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d04c      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2b03      	cmp	r3, #3
 8003440:	d107      	bne.n	8003452 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003442:	4b5a      	ldr	r3, [pc, #360]	; (80035ac <HAL_RCC_ClockConfig+0x1f0>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d121      	bne.n	8003492 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e0a6      	b.n	80035a0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b02      	cmp	r3, #2
 8003458:	d107      	bne.n	800346a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800345a:	4b54      	ldr	r3, [pc, #336]	; (80035ac <HAL_RCC_ClockConfig+0x1f0>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d115      	bne.n	8003492 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e09a      	b.n	80035a0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d107      	bne.n	8003482 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003472:	4b4e      	ldr	r3, [pc, #312]	; (80035ac <HAL_RCC_ClockConfig+0x1f0>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d109      	bne.n	8003492 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e08e      	b.n	80035a0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003482:	4b4a      	ldr	r3, [pc, #296]	; (80035ac <HAL_RCC_ClockConfig+0x1f0>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e086      	b.n	80035a0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003492:	4b46      	ldr	r3, [pc, #280]	; (80035ac <HAL_RCC_ClockConfig+0x1f0>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f023 0203 	bic.w	r2, r3, #3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	4943      	ldr	r1, [pc, #268]	; (80035ac <HAL_RCC_ClockConfig+0x1f0>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034a4:	f7fe f82a 	bl	80014fc <HAL_GetTick>
 80034a8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034aa:	e00a      	b.n	80034c2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034ac:	f7fe f826 	bl	80014fc <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e06e      	b.n	80035a0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c2:	4b3a      	ldr	r3, [pc, #232]	; (80035ac <HAL_RCC_ClockConfig+0x1f0>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f003 020c 	and.w	r2, r3, #12
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d1eb      	bne.n	80034ac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d010      	beq.n	8003502 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	4b31      	ldr	r3, [pc, #196]	; (80035ac <HAL_RCC_ClockConfig+0x1f0>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d208      	bcs.n	8003502 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034f0:	4b2e      	ldr	r3, [pc, #184]	; (80035ac <HAL_RCC_ClockConfig+0x1f0>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	492b      	ldr	r1, [pc, #172]	; (80035ac <HAL_RCC_ClockConfig+0x1f0>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003502:	4b29      	ldr	r3, [pc, #164]	; (80035a8 <HAL_RCC_ClockConfig+0x1ec>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	429a      	cmp	r2, r3
 800350e:	d210      	bcs.n	8003532 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003510:	4b25      	ldr	r3, [pc, #148]	; (80035a8 <HAL_RCC_ClockConfig+0x1ec>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f023 0207 	bic.w	r2, r3, #7
 8003518:	4923      	ldr	r1, [pc, #140]	; (80035a8 <HAL_RCC_ClockConfig+0x1ec>)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	4313      	orrs	r3, r2
 800351e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003520:	4b21      	ldr	r3, [pc, #132]	; (80035a8 <HAL_RCC_ClockConfig+0x1ec>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0307 	and.w	r3, r3, #7
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	429a      	cmp	r2, r3
 800352c:	d001      	beq.n	8003532 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e036      	b.n	80035a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0304 	and.w	r3, r3, #4
 800353a:	2b00      	cmp	r3, #0
 800353c:	d008      	beq.n	8003550 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800353e:	4b1b      	ldr	r3, [pc, #108]	; (80035ac <HAL_RCC_ClockConfig+0x1f0>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	4918      	ldr	r1, [pc, #96]	; (80035ac <HAL_RCC_ClockConfig+0x1f0>)
 800354c:	4313      	orrs	r3, r2
 800354e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0308 	and.w	r3, r3, #8
 8003558:	2b00      	cmp	r3, #0
 800355a:	d009      	beq.n	8003570 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800355c:	4b13      	ldr	r3, [pc, #76]	; (80035ac <HAL_RCC_ClockConfig+0x1f0>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	4910      	ldr	r1, [pc, #64]	; (80035ac <HAL_RCC_ClockConfig+0x1f0>)
 800356c:	4313      	orrs	r3, r2
 800356e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003570:	f000 f824 	bl	80035bc <HAL_RCC_GetSysClockFreq>
 8003574:	4602      	mov	r2, r0
 8003576:	4b0d      	ldr	r3, [pc, #52]	; (80035ac <HAL_RCC_ClockConfig+0x1f0>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	091b      	lsrs	r3, r3, #4
 800357c:	f003 030f 	and.w	r3, r3, #15
 8003580:	490b      	ldr	r1, [pc, #44]	; (80035b0 <HAL_RCC_ClockConfig+0x1f4>)
 8003582:	5ccb      	ldrb	r3, [r1, r3]
 8003584:	f003 031f 	and.w	r3, r3, #31
 8003588:	fa22 f303 	lsr.w	r3, r2, r3
 800358c:	4a09      	ldr	r2, [pc, #36]	; (80035b4 <HAL_RCC_ClockConfig+0x1f8>)
 800358e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003590:	4b09      	ldr	r3, [pc, #36]	; (80035b8 <HAL_RCC_ClockConfig+0x1fc>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4618      	mov	r0, r3
 8003596:	f7fd febb 	bl	8001310 <HAL_InitTick>
 800359a:	4603      	mov	r3, r0
 800359c:	72fb      	strb	r3, [r7, #11]

  return status;
 800359e:	7afb      	ldrb	r3, [r7, #11]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40022000 	.word	0x40022000
 80035ac:	40021000 	.word	0x40021000
 80035b0:	0800869c 	.word	0x0800869c
 80035b4:	20000000 	.word	0x20000000
 80035b8:	20000004 	.word	0x20000004

080035bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	b089      	sub	sp, #36	; 0x24
 80035c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80035c2:	2300      	movs	r3, #0
 80035c4:	61fb      	str	r3, [r7, #28]
 80035c6:	2300      	movs	r3, #0
 80035c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035ca:	4b3e      	ldr	r3, [pc, #248]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 030c 	and.w	r3, r3, #12
 80035d2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035d4:	4b3b      	ldr	r3, [pc, #236]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	f003 0303 	and.w	r3, r3, #3
 80035dc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d005      	beq.n	80035f0 <HAL_RCC_GetSysClockFreq+0x34>
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	2b0c      	cmp	r3, #12
 80035e8:	d121      	bne.n	800362e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d11e      	bne.n	800362e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80035f0:	4b34      	ldr	r3, [pc, #208]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0308 	and.w	r3, r3, #8
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d107      	bne.n	800360c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80035fc:	4b31      	ldr	r3, [pc, #196]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80035fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003602:	0a1b      	lsrs	r3, r3, #8
 8003604:	f003 030f 	and.w	r3, r3, #15
 8003608:	61fb      	str	r3, [r7, #28]
 800360a:	e005      	b.n	8003618 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800360c:	4b2d      	ldr	r3, [pc, #180]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	091b      	lsrs	r3, r3, #4
 8003612:	f003 030f 	and.w	r3, r3, #15
 8003616:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003618:	4a2b      	ldr	r2, [pc, #172]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003620:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d10d      	bne.n	8003644 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800362c:	e00a      	b.n	8003644 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	2b04      	cmp	r3, #4
 8003632:	d102      	bne.n	800363a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003634:	4b25      	ldr	r3, [pc, #148]	; (80036cc <HAL_RCC_GetSysClockFreq+0x110>)
 8003636:	61bb      	str	r3, [r7, #24]
 8003638:	e004      	b.n	8003644 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	2b08      	cmp	r3, #8
 800363e:	d101      	bne.n	8003644 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003640:	4b23      	ldr	r3, [pc, #140]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003642:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	2b0c      	cmp	r3, #12
 8003648:	d134      	bne.n	80036b4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800364a:	4b1e      	ldr	r3, [pc, #120]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	f003 0303 	and.w	r3, r3, #3
 8003652:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	2b02      	cmp	r3, #2
 8003658:	d003      	beq.n	8003662 <HAL_RCC_GetSysClockFreq+0xa6>
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	2b03      	cmp	r3, #3
 800365e:	d003      	beq.n	8003668 <HAL_RCC_GetSysClockFreq+0xac>
 8003660:	e005      	b.n	800366e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003662:	4b1a      	ldr	r3, [pc, #104]	; (80036cc <HAL_RCC_GetSysClockFreq+0x110>)
 8003664:	617b      	str	r3, [r7, #20]
      break;
 8003666:	e005      	b.n	8003674 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003668:	4b19      	ldr	r3, [pc, #100]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x114>)
 800366a:	617b      	str	r3, [r7, #20]
      break;
 800366c:	e002      	b.n	8003674 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	617b      	str	r3, [r7, #20]
      break;
 8003672:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003674:	4b13      	ldr	r3, [pc, #76]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	091b      	lsrs	r3, r3, #4
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	3301      	adds	r3, #1
 8003680:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003682:	4b10      	ldr	r3, [pc, #64]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	0a1b      	lsrs	r3, r3, #8
 8003688:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	fb03 f202 	mul.w	r2, r3, r2
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	fbb2 f3f3 	udiv	r3, r2, r3
 8003698:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800369a:	4b0a      	ldr	r3, [pc, #40]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	0e5b      	lsrs	r3, r3, #25
 80036a0:	f003 0303 	and.w	r3, r3, #3
 80036a4:	3301      	adds	r3, #1
 80036a6:	005b      	lsls	r3, r3, #1
 80036a8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80036b4:	69bb      	ldr	r3, [r7, #24]
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3724      	adds	r7, #36	; 0x24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	40021000 	.word	0x40021000
 80036c8:	080086b4 	.word	0x080086b4
 80036cc:	00f42400 	.word	0x00f42400
 80036d0:	01312d00 	.word	0x01312d00

080036d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036d8:	4b03      	ldr	r3, [pc, #12]	; (80036e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80036da:	681b      	ldr	r3, [r3, #0]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	20000000 	.word	0x20000000

080036ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80036f0:	f7ff fff0 	bl	80036d4 <HAL_RCC_GetHCLKFreq>
 80036f4:	4602      	mov	r2, r0
 80036f6:	4b06      	ldr	r3, [pc, #24]	; (8003710 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	0a1b      	lsrs	r3, r3, #8
 80036fc:	f003 0307 	and.w	r3, r3, #7
 8003700:	4904      	ldr	r1, [pc, #16]	; (8003714 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003702:	5ccb      	ldrb	r3, [r1, r3]
 8003704:	f003 031f 	and.w	r3, r3, #31
 8003708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800370c:	4618      	mov	r0, r3
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40021000 	.word	0x40021000
 8003714:	080086ac 	.word	0x080086ac

08003718 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800371c:	f7ff ffda 	bl	80036d4 <HAL_RCC_GetHCLKFreq>
 8003720:	4602      	mov	r2, r0
 8003722:	4b06      	ldr	r3, [pc, #24]	; (800373c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	0adb      	lsrs	r3, r3, #11
 8003728:	f003 0307 	and.w	r3, r3, #7
 800372c:	4904      	ldr	r1, [pc, #16]	; (8003740 <HAL_RCC_GetPCLK2Freq+0x28>)
 800372e:	5ccb      	ldrb	r3, [r1, r3]
 8003730:	f003 031f 	and.w	r3, r3, #31
 8003734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003738:	4618      	mov	r0, r3
 800373a:	bd80      	pop	{r7, pc}
 800373c:	40021000 	.word	0x40021000
 8003740:	080086ac 	.word	0x080086ac

08003744 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	220f      	movs	r2, #15
 8003752:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003754:	4b12      	ldr	r3, [pc, #72]	; (80037a0 <HAL_RCC_GetClockConfig+0x5c>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 0203 	and.w	r2, r3, #3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003760:	4b0f      	ldr	r3, [pc, #60]	; (80037a0 <HAL_RCC_GetClockConfig+0x5c>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800376c:	4b0c      	ldr	r3, [pc, #48]	; (80037a0 <HAL_RCC_GetClockConfig+0x5c>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003778:	4b09      	ldr	r3, [pc, #36]	; (80037a0 <HAL_RCC_GetClockConfig+0x5c>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	08db      	lsrs	r3, r3, #3
 800377e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003786:	4b07      	ldr	r3, [pc, #28]	; (80037a4 <HAL_RCC_GetClockConfig+0x60>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0207 	and.w	r2, r3, #7
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	601a      	str	r2, [r3, #0]
}
 8003792:	bf00      	nop
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	40021000 	.word	0x40021000
 80037a4:	40022000 	.word	0x40022000

080037a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80037b0:	2300      	movs	r3, #0
 80037b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80037b4:	4b2a      	ldr	r3, [pc, #168]	; (8003860 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d003      	beq.n	80037c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80037c0:	f7ff f984 	bl	8002acc <HAL_PWREx_GetVoltageRange>
 80037c4:	6178      	str	r0, [r7, #20]
 80037c6:	e014      	b.n	80037f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80037c8:	4b25      	ldr	r3, [pc, #148]	; (8003860 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037cc:	4a24      	ldr	r2, [pc, #144]	; (8003860 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037d2:	6593      	str	r3, [r2, #88]	; 0x58
 80037d4:	4b22      	ldr	r3, [pc, #136]	; (8003860 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037dc:	60fb      	str	r3, [r7, #12]
 80037de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80037e0:	f7ff f974 	bl	8002acc <HAL_PWREx_GetVoltageRange>
 80037e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80037e6:	4b1e      	ldr	r3, [pc, #120]	; (8003860 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ea:	4a1d      	ldr	r2, [pc, #116]	; (8003860 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037f0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037f8:	d10b      	bne.n	8003812 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b80      	cmp	r3, #128	; 0x80
 80037fe:	d919      	bls.n	8003834 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2ba0      	cmp	r3, #160	; 0xa0
 8003804:	d902      	bls.n	800380c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003806:	2302      	movs	r3, #2
 8003808:	613b      	str	r3, [r7, #16]
 800380a:	e013      	b.n	8003834 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800380c:	2301      	movs	r3, #1
 800380e:	613b      	str	r3, [r7, #16]
 8003810:	e010      	b.n	8003834 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b80      	cmp	r3, #128	; 0x80
 8003816:	d902      	bls.n	800381e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003818:	2303      	movs	r3, #3
 800381a:	613b      	str	r3, [r7, #16]
 800381c:	e00a      	b.n	8003834 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b80      	cmp	r3, #128	; 0x80
 8003822:	d102      	bne.n	800382a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003824:	2302      	movs	r3, #2
 8003826:	613b      	str	r3, [r7, #16]
 8003828:	e004      	b.n	8003834 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b70      	cmp	r3, #112	; 0x70
 800382e:	d101      	bne.n	8003834 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003830:	2301      	movs	r3, #1
 8003832:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003834:	4b0b      	ldr	r3, [pc, #44]	; (8003864 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f023 0207 	bic.w	r2, r3, #7
 800383c:	4909      	ldr	r1, [pc, #36]	; (8003864 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	4313      	orrs	r3, r2
 8003842:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003844:	4b07      	ldr	r3, [pc, #28]	; (8003864 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0307 	and.w	r3, r3, #7
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	429a      	cmp	r2, r3
 8003850:	d001      	beq.n	8003856 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e000      	b.n	8003858 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3718      	adds	r7, #24
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	40021000 	.word	0x40021000
 8003864:	40022000 	.word	0x40022000

08003868 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003870:	2300      	movs	r3, #0
 8003872:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003874:	2300      	movs	r3, #0
 8003876:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003880:	2b00      	cmp	r3, #0
 8003882:	d031      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003888:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800388c:	d01a      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800388e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003892:	d814      	bhi.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003894:	2b00      	cmp	r3, #0
 8003896:	d009      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003898:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800389c:	d10f      	bne.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800389e:	4b5d      	ldr	r3, [pc, #372]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	4a5c      	ldr	r2, [pc, #368]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038a8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038aa:	e00c      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	3304      	adds	r3, #4
 80038b0:	2100      	movs	r1, #0
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 f9f0 	bl	8003c98 <RCCEx_PLLSAI1_Config>
 80038b8:	4603      	mov	r3, r0
 80038ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038bc:	e003      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	74fb      	strb	r3, [r7, #19]
      break;
 80038c2:	e000      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80038c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038c6:	7cfb      	ldrb	r3, [r7, #19]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d10b      	bne.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038cc:	4b51      	ldr	r3, [pc, #324]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038da:	494e      	ldr	r1, [pc, #312]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80038e2:	e001      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e4:	7cfb      	ldrb	r3, [r7, #19]
 80038e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f000 809e 	beq.w	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038f6:	2300      	movs	r3, #0
 80038f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80038fa:	4b46      	ldr	r3, [pc, #280]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003906:	2301      	movs	r3, #1
 8003908:	e000      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800390a:	2300      	movs	r3, #0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00d      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003910:	4b40      	ldr	r3, [pc, #256]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003914:	4a3f      	ldr	r2, [pc, #252]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800391a:	6593      	str	r3, [r2, #88]	; 0x58
 800391c:	4b3d      	ldr	r3, [pc, #244]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800391e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003924:	60bb      	str	r3, [r7, #8]
 8003926:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003928:	2301      	movs	r3, #1
 800392a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800392c:	4b3a      	ldr	r3, [pc, #232]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a39      	ldr	r2, [pc, #228]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003936:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003938:	f7fd fde0 	bl	80014fc <HAL_GetTick>
 800393c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800393e:	e009      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003940:	f7fd fddc 	bl	80014fc <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d902      	bls.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	74fb      	strb	r3, [r7, #19]
        break;
 8003952:	e005      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003954:	4b30      	ldr	r3, [pc, #192]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395c:	2b00      	cmp	r3, #0
 800395e:	d0ef      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003960:	7cfb      	ldrb	r3, [r7, #19]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d15a      	bne.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003966:	4b2b      	ldr	r3, [pc, #172]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003970:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d01e      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800397c:	697a      	ldr	r2, [r7, #20]
 800397e:	429a      	cmp	r2, r3
 8003980:	d019      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003982:	4b24      	ldr	r3, [pc, #144]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800398c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800398e:	4b21      	ldr	r3, [pc, #132]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003994:	4a1f      	ldr	r2, [pc, #124]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800399a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800399e:	4b1d      	ldr	r3, [pc, #116]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a4:	4a1b      	ldr	r2, [pc, #108]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80039ae:	4a19      	ldr	r2, [pc, #100]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d016      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c0:	f7fd fd9c 	bl	80014fc <HAL_GetTick>
 80039c4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039c6:	e00b      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039c8:	f7fd fd98 	bl	80014fc <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d902      	bls.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	74fb      	strb	r3, [r7, #19]
            break;
 80039de:	e006      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039e0:	4b0c      	ldr	r3, [pc, #48]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d0ec      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80039ee:	7cfb      	ldrb	r3, [r7, #19]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10b      	bne.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039f4:	4b07      	ldr	r3, [pc, #28]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a02:	4904      	ldr	r1, [pc, #16]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003a0a:	e009      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a0c:	7cfb      	ldrb	r3, [r7, #19]
 8003a0e:	74bb      	strb	r3, [r7, #18]
 8003a10:	e006      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003a12:	bf00      	nop
 8003a14:	40021000 	.word	0x40021000
 8003a18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a1c:	7cfb      	ldrb	r3, [r7, #19]
 8003a1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a20:	7c7b      	ldrb	r3, [r7, #17]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d105      	bne.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a26:	4b9b      	ldr	r3, [pc, #620]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2a:	4a9a      	ldr	r2, [pc, #616]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a30:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00a      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a3e:	4b95      	ldr	r3, [pc, #596]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a44:	f023 0203 	bic.w	r2, r3, #3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	4991      	ldr	r1, [pc, #580]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00a      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a60:	4b8c      	ldr	r3, [pc, #560]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a66:	f023 020c 	bic.w	r2, r3, #12
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	4989      	ldr	r1, [pc, #548]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0304 	and.w	r3, r3, #4
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00a      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a82:	4b84      	ldr	r3, [pc, #528]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a88:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a90:	4980      	ldr	r1, [pc, #512]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0320 	and.w	r3, r3, #32
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00a      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003aa4:	4b7b      	ldr	r3, [pc, #492]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aaa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab2:	4978      	ldr	r1, [pc, #480]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00a      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ac6:	4b73      	ldr	r3, [pc, #460]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003acc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad4:	496f      	ldr	r1, [pc, #444]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00a      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ae8:	4b6a      	ldr	r3, [pc, #424]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	4967      	ldr	r1, [pc, #412]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00a      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b0a:	4b62      	ldr	r3, [pc, #392]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b10:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b18:	495e      	ldr	r1, [pc, #376]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00a      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b2c:	4b59      	ldr	r3, [pc, #356]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b32:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b3a:	4956      	ldr	r1, [pc, #344]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00a      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b4e:	4b51      	ldr	r3, [pc, #324]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5c:	494d      	ldr	r1, [pc, #308]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d028      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b70:	4b48      	ldr	r3, [pc, #288]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b7e:	4945      	ldr	r1, [pc, #276]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b8e:	d106      	bne.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b90:	4b40      	ldr	r3, [pc, #256]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	4a3f      	ldr	r2, [pc, #252]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003b96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b9a:	60d3      	str	r3, [r2, #12]
 8003b9c:	e011      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ba2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ba6:	d10c      	bne.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	3304      	adds	r3, #4
 8003bac:	2101      	movs	r1, #1
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f000 f872 	bl	8003c98 <RCCEx_PLLSAI1_Config>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bb8:	7cfb      	ldrb	r3, [r7, #19]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8003bbe:	7cfb      	ldrb	r3, [r7, #19]
 8003bc0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d028      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003bce:	4b31      	ldr	r3, [pc, #196]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bdc:	492d      	ldr	r1, [pc, #180]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bec:	d106      	bne.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bee:	4b29      	ldr	r3, [pc, #164]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	4a28      	ldr	r2, [pc, #160]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003bf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bf8:	60d3      	str	r3, [r2, #12]
 8003bfa:	e011      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c04:	d10c      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	3304      	adds	r3, #4
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f000 f843 	bl	8003c98 <RCCEx_PLLSAI1_Config>
 8003c12:	4603      	mov	r3, r0
 8003c14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c16:	7cfb      	ldrb	r3, [r7, #19]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003c1c:	7cfb      	ldrb	r3, [r7, #19]
 8003c1e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d01c      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c2c:	4b19      	ldr	r3, [pc, #100]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c32:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c3a:	4916      	ldr	r1, [pc, #88]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c4a:	d10c      	bne.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3304      	adds	r3, #4
 8003c50:	2102      	movs	r1, #2
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 f820 	bl	8003c98 <RCCEx_PLLSAI1_Config>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c5c:	7cfb      	ldrb	r3, [r7, #19]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8003c62:	7cfb      	ldrb	r3, [r7, #19]
 8003c64:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00a      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c72:	4b08      	ldr	r3, [pc, #32]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c78:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c80:	4904      	ldr	r1, [pc, #16]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c88:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3718      	adds	r7, #24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	40021000 	.word	0x40021000

08003c98 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ca6:	4b74      	ldr	r3, [pc, #464]	; (8003e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f003 0303 	and.w	r3, r3, #3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d018      	beq.n	8003ce4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003cb2:	4b71      	ldr	r3, [pc, #452]	; (8003e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f003 0203 	and.w	r2, r3, #3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d10d      	bne.n	8003cde <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
       ||
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d009      	beq.n	8003cde <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003cca:	4b6b      	ldr	r3, [pc, #428]	; (8003e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	091b      	lsrs	r3, r3, #4
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	1c5a      	adds	r2, r3, #1
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
       ||
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d047      	beq.n	8003d6e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	73fb      	strb	r3, [r7, #15]
 8003ce2:	e044      	b.n	8003d6e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2b03      	cmp	r3, #3
 8003cea:	d018      	beq.n	8003d1e <RCCEx_PLLSAI1_Config+0x86>
 8003cec:	2b03      	cmp	r3, #3
 8003cee:	d825      	bhi.n	8003d3c <RCCEx_PLLSAI1_Config+0xa4>
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d002      	beq.n	8003cfa <RCCEx_PLLSAI1_Config+0x62>
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d009      	beq.n	8003d0c <RCCEx_PLLSAI1_Config+0x74>
 8003cf8:	e020      	b.n	8003d3c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003cfa:	4b5f      	ldr	r3, [pc, #380]	; (8003e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d11d      	bne.n	8003d42 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d0a:	e01a      	b.n	8003d42 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d0c:	4b5a      	ldr	r3, [pc, #360]	; (8003e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d116      	bne.n	8003d46 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d1c:	e013      	b.n	8003d46 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d1e:	4b56      	ldr	r3, [pc, #344]	; (8003e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10f      	bne.n	8003d4a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d2a:	4b53      	ldr	r3, [pc, #332]	; (8003e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d109      	bne.n	8003d4a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d3a:	e006      	b.n	8003d4a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d40:	e004      	b.n	8003d4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d42:	bf00      	nop
 8003d44:	e002      	b.n	8003d4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d46:	bf00      	nop
 8003d48:	e000      	b.n	8003d4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d4c:	7bfb      	ldrb	r3, [r7, #15]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d10d      	bne.n	8003d6e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d52:	4b49      	ldr	r3, [pc, #292]	; (8003e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6819      	ldr	r1, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	3b01      	subs	r3, #1
 8003d64:	011b      	lsls	r3, r3, #4
 8003d66:	430b      	orrs	r3, r1
 8003d68:	4943      	ldr	r1, [pc, #268]	; (8003e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d6e:	7bfb      	ldrb	r3, [r7, #15]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d17c      	bne.n	8003e6e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d74:	4b40      	ldr	r3, [pc, #256]	; (8003e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a3f      	ldr	r2, [pc, #252]	; (8003e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d80:	f7fd fbbc 	bl	80014fc <HAL_GetTick>
 8003d84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d86:	e009      	b.n	8003d9c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d88:	f7fd fbb8 	bl	80014fc <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d902      	bls.n	8003d9c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	73fb      	strb	r3, [r7, #15]
        break;
 8003d9a:	e005      	b.n	8003da8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d9c:	4b36      	ldr	r3, [pc, #216]	; (8003e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1ef      	bne.n	8003d88 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003da8:	7bfb      	ldrb	r3, [r7, #15]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d15f      	bne.n	8003e6e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d110      	bne.n	8003dd6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003db4:	4b30      	ldr	r3, [pc, #192]	; (8003e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003dbc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6892      	ldr	r2, [r2, #8]
 8003dc4:	0211      	lsls	r1, r2, #8
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	68d2      	ldr	r2, [r2, #12]
 8003dca:	06d2      	lsls	r2, r2, #27
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	492a      	ldr	r1, [pc, #168]	; (8003e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	610b      	str	r3, [r1, #16]
 8003dd4:	e027      	b.n	8003e26 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d112      	bne.n	8003e02 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ddc:	4b26      	ldr	r3, [pc, #152]	; (8003e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003de4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	6892      	ldr	r2, [r2, #8]
 8003dec:	0211      	lsls	r1, r2, #8
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	6912      	ldr	r2, [r2, #16]
 8003df2:	0852      	lsrs	r2, r2, #1
 8003df4:	3a01      	subs	r2, #1
 8003df6:	0552      	lsls	r2, r2, #21
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	491f      	ldr	r1, [pc, #124]	; (8003e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	610b      	str	r3, [r1, #16]
 8003e00:	e011      	b.n	8003e26 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e02:	4b1d      	ldr	r3, [pc, #116]	; (8003e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e0a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6892      	ldr	r2, [r2, #8]
 8003e12:	0211      	lsls	r1, r2, #8
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	6952      	ldr	r2, [r2, #20]
 8003e18:	0852      	lsrs	r2, r2, #1
 8003e1a:	3a01      	subs	r2, #1
 8003e1c:	0652      	lsls	r2, r2, #25
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	4915      	ldr	r1, [pc, #84]	; (8003e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e26:	4b14      	ldr	r3, [pc, #80]	; (8003e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a13      	ldr	r2, [pc, #76]	; (8003e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e30:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e32:	f7fd fb63 	bl	80014fc <HAL_GetTick>
 8003e36:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e38:	e009      	b.n	8003e4e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e3a:	f7fd fb5f 	bl	80014fc <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d902      	bls.n	8003e4e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	73fb      	strb	r3, [r7, #15]
          break;
 8003e4c:	e005      	b.n	8003e5a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e4e:	4b0a      	ldr	r3, [pc, #40]	; (8003e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d0ef      	beq.n	8003e3a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003e5a:	7bfb      	ldrb	r3, [r7, #15]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d106      	bne.n	8003e6e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003e60:	4b05      	ldr	r3, [pc, #20]	; (8003e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e62:	691a      	ldr	r2, [r3, #16]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	4903      	ldr	r1, [pc, #12]	; (8003e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	40021000 	.word	0x40021000

08003e7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e095      	b.n	8003fba <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d108      	bne.n	8003ea8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e9e:	d009      	beq.n	8003eb4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	61da      	str	r2, [r3, #28]
 8003ea6:	e005      	b.n	8003eb4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d106      	bne.n	8003ed4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7fd f92c 	bl	800112c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ef4:	d902      	bls.n	8003efc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	60fb      	str	r3, [r7, #12]
 8003efa:	e002      	b.n	8003f02 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003efc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f00:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003f0a:	d007      	beq.n	8003f1c <HAL_SPI_Init+0xa0>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f14:	d002      	beq.n	8003f1c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	431a      	orrs	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	431a      	orrs	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	69db      	ldr	r3, [r3, #28]
 8003f50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f54:	431a      	orrs	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f5e:	ea42 0103 	orr.w	r1, r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f66:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	0c1b      	lsrs	r3, r3, #16
 8003f78:	f003 0204 	and.w	r2, r3, #4
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f80:	f003 0310 	and.w	r3, r3, #16
 8003f84:	431a      	orrs	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f8a:	f003 0308 	and.w	r3, r3, #8
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003f98:	ea42 0103 	orr.w	r1, r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b082      	sub	sp, #8
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e049      	b.n	8004068 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d106      	bne.n	8003fee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 f841 	bl	8004070 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2202      	movs	r2, #2
 8003ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	3304      	adds	r3, #4
 8003ffe:	4619      	mov	r1, r3
 8004000:	4610      	mov	r0, r2
 8004002:	f000 fb45 	bl	8004690 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b01      	cmp	r3, #1
 8004096:	d001      	beq.n	800409c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e03b      	b.n	8004114 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2202      	movs	r2, #2
 80040a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68da      	ldr	r2, [r3, #12]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f042 0201 	orr.w	r2, r2, #1
 80040b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a19      	ldr	r2, [pc, #100]	; (8004120 <HAL_TIM_Base_Start_IT+0x9c>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d009      	beq.n	80040d2 <HAL_TIM_Base_Start_IT+0x4e>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040c6:	d004      	beq.n	80040d2 <HAL_TIM_Base_Start_IT+0x4e>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a15      	ldr	r2, [pc, #84]	; (8004124 <HAL_TIM_Base_Start_IT+0xa0>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d115      	bne.n	80040fe <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	4b13      	ldr	r3, [pc, #76]	; (8004128 <HAL_TIM_Base_Start_IT+0xa4>)
 80040da:	4013      	ands	r3, r2
 80040dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2b06      	cmp	r3, #6
 80040e2:	d015      	beq.n	8004110 <HAL_TIM_Base_Start_IT+0x8c>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ea:	d011      	beq.n	8004110 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f042 0201 	orr.w	r2, r2, #1
 80040fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040fc:	e008      	b.n	8004110 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f042 0201 	orr.w	r2, r2, #1
 800410c:	601a      	str	r2, [r3, #0]
 800410e:	e000      	b.n	8004112 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004110:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3714      	adds	r7, #20
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr
 8004120:	40012c00 	.word	0x40012c00
 8004124:	40014000 	.word	0x40014000
 8004128:	00010007 	.word	0x00010007

0800412c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e049      	b.n	80041d2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d106      	bne.n	8004158 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7fd f82e 	bl	80011b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2202      	movs	r2, #2
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	3304      	adds	r3, #4
 8004168:	4619      	mov	r1, r3
 800416a:	4610      	mov	r0, r2
 800416c:	f000 fa90 	bl	8004690 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b082      	sub	sp, #8
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	f003 0302 	and.w	r3, r3, #2
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d122      	bne.n	8004236 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	f003 0302 	and.w	r3, r3, #2
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d11b      	bne.n	8004236 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f06f 0202 	mvn.w	r2, #2
 8004206:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	f003 0303 	and.w	r3, r3, #3
 8004218:	2b00      	cmp	r3, #0
 800421a:	d003      	beq.n	8004224 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 fa19 	bl	8004654 <HAL_TIM_IC_CaptureCallback>
 8004222:	e005      	b.n	8004230 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 fa0b 	bl	8004640 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 fa1c 	bl	8004668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	f003 0304 	and.w	r3, r3, #4
 8004240:	2b04      	cmp	r3, #4
 8004242:	d122      	bne.n	800428a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	f003 0304 	and.w	r3, r3, #4
 800424e:	2b04      	cmp	r3, #4
 8004250:	d11b      	bne.n	800428a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f06f 0204 	mvn.w	r2, #4
 800425a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2202      	movs	r2, #2
 8004260:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800426c:	2b00      	cmp	r3, #0
 800426e:	d003      	beq.n	8004278 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f9ef 	bl	8004654 <HAL_TIM_IC_CaptureCallback>
 8004276:	e005      	b.n	8004284 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 f9e1 	bl	8004640 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 f9f2 	bl	8004668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	f003 0308 	and.w	r3, r3, #8
 8004294:	2b08      	cmp	r3, #8
 8004296:	d122      	bne.n	80042de <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	f003 0308 	and.w	r3, r3, #8
 80042a2:	2b08      	cmp	r3, #8
 80042a4:	d11b      	bne.n	80042de <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f06f 0208 	mvn.w	r2, #8
 80042ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2204      	movs	r2, #4
 80042b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	69db      	ldr	r3, [r3, #28]
 80042bc:	f003 0303 	and.w	r3, r3, #3
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d003      	beq.n	80042cc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f000 f9c5 	bl	8004654 <HAL_TIM_IC_CaptureCallback>
 80042ca:	e005      	b.n	80042d8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 f9b7 	bl	8004640 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f9c8 	bl	8004668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	f003 0310 	and.w	r3, r3, #16
 80042e8:	2b10      	cmp	r3, #16
 80042ea:	d122      	bne.n	8004332 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	f003 0310 	and.w	r3, r3, #16
 80042f6:	2b10      	cmp	r3, #16
 80042f8:	d11b      	bne.n	8004332 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f06f 0210 	mvn.w	r2, #16
 8004302:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2208      	movs	r2, #8
 8004308:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	69db      	ldr	r3, [r3, #28]
 8004310:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004314:	2b00      	cmp	r3, #0
 8004316:	d003      	beq.n	8004320 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 f99b 	bl	8004654 <HAL_TIM_IC_CaptureCallback>
 800431e:	e005      	b.n	800432c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f98d 	bl	8004640 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f99e 	bl	8004668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b01      	cmp	r3, #1
 800433e:	d10e      	bne.n	800435e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b01      	cmp	r3, #1
 800434c:	d107      	bne.n	800435e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f06f 0201 	mvn.w	r2, #1
 8004356:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f7fc fdc9 	bl	8000ef0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004368:	2b80      	cmp	r3, #128	; 0x80
 800436a:	d10e      	bne.n	800438a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004376:	2b80      	cmp	r3, #128	; 0x80
 8004378:	d107      	bne.n	800438a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004382:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 fcd5 	bl	8004d34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004394:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004398:	d10e      	bne.n	80043b8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a4:	2b80      	cmp	r3, #128	; 0x80
 80043a6:	d107      	bne.n	80043b8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80043b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 fcc8 	bl	8004d48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c2:	2b40      	cmp	r3, #64	; 0x40
 80043c4:	d10e      	bne.n	80043e4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d0:	2b40      	cmp	r3, #64	; 0x40
 80043d2:	d107      	bne.n	80043e4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f94c 	bl	800467c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	f003 0320 	and.w	r3, r3, #32
 80043ee:	2b20      	cmp	r3, #32
 80043f0:	d10e      	bne.n	8004410 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	f003 0320 	and.w	r3, r3, #32
 80043fc:	2b20      	cmp	r3, #32
 80043fe:	d107      	bne.n	8004410 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f06f 0220 	mvn.w	r2, #32
 8004408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 fc88 	bl	8004d20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004410:	bf00      	nop
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004424:	2300      	movs	r3, #0
 8004426:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800442e:	2b01      	cmp	r3, #1
 8004430:	d101      	bne.n	8004436 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004432:	2302      	movs	r3, #2
 8004434:	e0ff      	b.n	8004636 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b14      	cmp	r3, #20
 8004442:	f200 80f0 	bhi.w	8004626 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004446:	a201      	add	r2, pc, #4	; (adr r2, 800444c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444c:	080044a1 	.word	0x080044a1
 8004450:	08004627 	.word	0x08004627
 8004454:	08004627 	.word	0x08004627
 8004458:	08004627 	.word	0x08004627
 800445c:	080044e1 	.word	0x080044e1
 8004460:	08004627 	.word	0x08004627
 8004464:	08004627 	.word	0x08004627
 8004468:	08004627 	.word	0x08004627
 800446c:	08004523 	.word	0x08004523
 8004470:	08004627 	.word	0x08004627
 8004474:	08004627 	.word	0x08004627
 8004478:	08004627 	.word	0x08004627
 800447c:	08004563 	.word	0x08004563
 8004480:	08004627 	.word	0x08004627
 8004484:	08004627 	.word	0x08004627
 8004488:	08004627 	.word	0x08004627
 800448c:	080045a5 	.word	0x080045a5
 8004490:	08004627 	.word	0x08004627
 8004494:	08004627 	.word	0x08004627
 8004498:	08004627 	.word	0x08004627
 800449c:	080045e5 	.word	0x080045e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68b9      	ldr	r1, [r7, #8]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 f956 	bl	8004758 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	699a      	ldr	r2, [r3, #24]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 0208 	orr.w	r2, r2, #8
 80044ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	699a      	ldr	r2, [r3, #24]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 0204 	bic.w	r2, r2, #4
 80044ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6999      	ldr	r1, [r3, #24]
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	691a      	ldr	r2, [r3, #16]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	430a      	orrs	r2, r1
 80044dc:	619a      	str	r2, [r3, #24]
      break;
 80044de:	e0a5      	b.n	800462c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68b9      	ldr	r1, [r7, #8]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 f9b2 	bl	8004850 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	699a      	ldr	r2, [r3, #24]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	699a      	ldr	r2, [r3, #24]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800450a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6999      	ldr	r1, [r3, #24]
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	021a      	lsls	r2, r3, #8
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	430a      	orrs	r2, r1
 800451e:	619a      	str	r2, [r3, #24]
      break;
 8004520:	e084      	b.n	800462c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68b9      	ldr	r1, [r7, #8]
 8004528:	4618      	mov	r0, r3
 800452a:	f000 fa0b 	bl	8004944 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	69da      	ldr	r2, [r3, #28]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f042 0208 	orr.w	r2, r2, #8
 800453c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	69da      	ldr	r2, [r3, #28]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f022 0204 	bic.w	r2, r2, #4
 800454c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	69d9      	ldr	r1, [r3, #28]
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	691a      	ldr	r2, [r3, #16]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	430a      	orrs	r2, r1
 800455e:	61da      	str	r2, [r3, #28]
      break;
 8004560:	e064      	b.n	800462c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68b9      	ldr	r1, [r7, #8]
 8004568:	4618      	mov	r0, r3
 800456a:	f000 fa63 	bl	8004a34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	69da      	ldr	r2, [r3, #28]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800457c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	69da      	ldr	r2, [r3, #28]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800458c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	69d9      	ldr	r1, [r3, #28]
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	021a      	lsls	r2, r3, #8
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	430a      	orrs	r2, r1
 80045a0:	61da      	str	r2, [r3, #28]
      break;
 80045a2:	e043      	b.n	800462c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68b9      	ldr	r1, [r7, #8]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 faa0 	bl	8004af0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f042 0208 	orr.w	r2, r2, #8
 80045be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 0204 	bic.w	r2, r2, #4
 80045ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	691a      	ldr	r2, [r3, #16]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80045e2:	e023      	b.n	800462c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68b9      	ldr	r1, [r7, #8]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 fad8 	bl	8004ba0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800460e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	021a      	lsls	r2, r3, #8
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	430a      	orrs	r2, r1
 8004622:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004624:	e002      	b.n	800462c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	75fb      	strb	r3, [r7, #23]
      break;
 800462a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004634:	7dfb      	ldrb	r3, [r7, #23]
}
 8004636:	4618      	mov	r0, r3
 8004638:	3718      	adds	r7, #24
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop

08004640 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a2a      	ldr	r2, [pc, #168]	; (800474c <TIM_Base_SetConfig+0xbc>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d003      	beq.n	80046b0 <TIM_Base_SetConfig+0x20>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ae:	d108      	bne.n	80046c2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	4313      	orrs	r3, r2
 80046c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a21      	ldr	r2, [pc, #132]	; (800474c <TIM_Base_SetConfig+0xbc>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d00b      	beq.n	80046e2 <TIM_Base_SetConfig+0x52>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d0:	d007      	beq.n	80046e2 <TIM_Base_SetConfig+0x52>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a1e      	ldr	r2, [pc, #120]	; (8004750 <TIM_Base_SetConfig+0xc0>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d003      	beq.n	80046e2 <TIM_Base_SetConfig+0x52>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a1d      	ldr	r2, [pc, #116]	; (8004754 <TIM_Base_SetConfig+0xc4>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d108      	bne.n	80046f4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	4313      	orrs	r3, r2
 8004700:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	689a      	ldr	r2, [r3, #8]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a0c      	ldr	r2, [pc, #48]	; (800474c <TIM_Base_SetConfig+0xbc>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d007      	beq.n	8004730 <TIM_Base_SetConfig+0xa0>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a0b      	ldr	r2, [pc, #44]	; (8004750 <TIM_Base_SetConfig+0xc0>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d003      	beq.n	8004730 <TIM_Base_SetConfig+0xa0>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a0a      	ldr	r2, [pc, #40]	; (8004754 <TIM_Base_SetConfig+0xc4>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d103      	bne.n	8004738 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	691a      	ldr	r2, [r3, #16]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	615a      	str	r2, [r3, #20]
}
 800473e:	bf00      	nop
 8004740:	3714      	adds	r7, #20
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	40012c00 	.word	0x40012c00
 8004750:	40014000 	.word	0x40014000
 8004754:	40014400 	.word	0x40014400

08004758 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004758:	b480      	push	{r7}
 800475a:	b087      	sub	sp, #28
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	f023 0201 	bic.w	r2, r3, #1
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a1b      	ldr	r3, [r3, #32]
 8004772:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800478a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f023 0303 	bic.w	r3, r3, #3
 8004792:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	4313      	orrs	r3, r2
 800479c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f023 0302 	bic.w	r3, r3, #2
 80047a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a24      	ldr	r2, [pc, #144]	; (8004844 <TIM_OC1_SetConfig+0xec>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d007      	beq.n	80047c8 <TIM_OC1_SetConfig+0x70>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a23      	ldr	r2, [pc, #140]	; (8004848 <TIM_OC1_SetConfig+0xf0>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d003      	beq.n	80047c8 <TIM_OC1_SetConfig+0x70>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a22      	ldr	r2, [pc, #136]	; (800484c <TIM_OC1_SetConfig+0xf4>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d10c      	bne.n	80047e2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	f023 0308 	bic.w	r3, r3, #8
 80047ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	697a      	ldr	r2, [r7, #20]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	f023 0304 	bic.w	r3, r3, #4
 80047e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a17      	ldr	r2, [pc, #92]	; (8004844 <TIM_OC1_SetConfig+0xec>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d007      	beq.n	80047fa <TIM_OC1_SetConfig+0xa2>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a16      	ldr	r2, [pc, #88]	; (8004848 <TIM_OC1_SetConfig+0xf0>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d003      	beq.n	80047fa <TIM_OC1_SetConfig+0xa2>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a15      	ldr	r2, [pc, #84]	; (800484c <TIM_OC1_SetConfig+0xf4>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d111      	bne.n	800481e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004800:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004808:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	4313      	orrs	r3, r2
 8004812:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	4313      	orrs	r3, r2
 800481c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685a      	ldr	r2, [r3, #4]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	621a      	str	r2, [r3, #32]
}
 8004838:	bf00      	nop
 800483a:	371c      	adds	r7, #28
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr
 8004844:	40012c00 	.word	0x40012c00
 8004848:	40014000 	.word	0x40014000
 800484c:	40014400 	.word	0x40014400

08004850 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004850:	b480      	push	{r7}
 8004852:	b087      	sub	sp, #28
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	f023 0210 	bic.w	r2, r3, #16
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800487e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800488a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	021b      	lsls	r3, r3, #8
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	4313      	orrs	r3, r2
 8004896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	f023 0320 	bic.w	r3, r3, #32
 800489e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	011b      	lsls	r3, r3, #4
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a22      	ldr	r2, [pc, #136]	; (8004938 <TIM_OC2_SetConfig+0xe8>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d10d      	bne.n	80048d0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	011b      	lsls	r3, r3, #4
 80048c2:	697a      	ldr	r2, [r7, #20]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a19      	ldr	r2, [pc, #100]	; (8004938 <TIM_OC2_SetConfig+0xe8>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d007      	beq.n	80048e8 <TIM_OC2_SetConfig+0x98>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a18      	ldr	r2, [pc, #96]	; (800493c <TIM_OC2_SetConfig+0xec>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d003      	beq.n	80048e8 <TIM_OC2_SetConfig+0x98>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a17      	ldr	r2, [pc, #92]	; (8004940 <TIM_OC2_SetConfig+0xf0>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d113      	bne.n	8004910 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	4313      	orrs	r3, r2
 8004902:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	4313      	orrs	r3, r2
 800490e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685a      	ldr	r2, [r3, #4]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	621a      	str	r2, [r3, #32]
}
 800492a:	bf00      	nop
 800492c:	371c      	adds	r7, #28
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	40012c00 	.word	0x40012c00
 800493c:	40014000 	.word	0x40014000
 8004940:	40014400 	.word	0x40014400

08004944 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004944:	b480      	push	{r7}
 8004946:	b087      	sub	sp, #28
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f023 0303 	bic.w	r3, r3, #3
 800497e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	4313      	orrs	r3, r2
 8004988:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004990:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	021b      	lsls	r3, r3, #8
 8004998:	697a      	ldr	r2, [r7, #20]
 800499a:	4313      	orrs	r3, r2
 800499c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a21      	ldr	r2, [pc, #132]	; (8004a28 <TIM_OC3_SetConfig+0xe4>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d10d      	bne.n	80049c2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	021b      	lsls	r3, r3, #8
 80049b4:	697a      	ldr	r2, [r7, #20]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a18      	ldr	r2, [pc, #96]	; (8004a28 <TIM_OC3_SetConfig+0xe4>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d007      	beq.n	80049da <TIM_OC3_SetConfig+0x96>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a17      	ldr	r2, [pc, #92]	; (8004a2c <TIM_OC3_SetConfig+0xe8>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d003      	beq.n	80049da <TIM_OC3_SetConfig+0x96>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a16      	ldr	r2, [pc, #88]	; (8004a30 <TIM_OC3_SetConfig+0xec>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d113      	bne.n	8004a02 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	011b      	lsls	r3, r3, #4
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	011b      	lsls	r3, r3, #4
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	685a      	ldr	r2, [r3, #4]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	621a      	str	r2, [r3, #32]
}
 8004a1c:	bf00      	nop
 8004a1e:	371c      	adds	r7, #28
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr
 8004a28:	40012c00 	.word	0x40012c00
 8004a2c:	40014000 	.word	0x40014000
 8004a30:	40014400 	.word	0x40014400

08004a34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b087      	sub	sp, #28
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	69db      	ldr	r3, [r3, #28]
 8004a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	021b      	lsls	r3, r3, #8
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	031b      	lsls	r3, r3, #12
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a14      	ldr	r2, [pc, #80]	; (8004ae4 <TIM_OC4_SetConfig+0xb0>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d007      	beq.n	8004aa8 <TIM_OC4_SetConfig+0x74>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a13      	ldr	r2, [pc, #76]	; (8004ae8 <TIM_OC4_SetConfig+0xb4>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d003      	beq.n	8004aa8 <TIM_OC4_SetConfig+0x74>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a12      	ldr	r2, [pc, #72]	; (8004aec <TIM_OC4_SetConfig+0xb8>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d109      	bne.n	8004abc <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004aae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	019b      	lsls	r3, r3, #6
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	693a      	ldr	r2, [r7, #16]
 8004ad4:	621a      	str	r2, [r3, #32]
}
 8004ad6:	bf00      	nop
 8004ad8:	371c      	adds	r7, #28
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	40012c00 	.word	0x40012c00
 8004ae8:	40014000 	.word	0x40014000
 8004aec:	40014400 	.word	0x40014400

08004af0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b087      	sub	sp, #28
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004b34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	041b      	lsls	r3, r3, #16
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a13      	ldr	r2, [pc, #76]	; (8004b94 <TIM_OC5_SetConfig+0xa4>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d007      	beq.n	8004b5a <TIM_OC5_SetConfig+0x6a>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a12      	ldr	r2, [pc, #72]	; (8004b98 <TIM_OC5_SetConfig+0xa8>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d003      	beq.n	8004b5a <TIM_OC5_SetConfig+0x6a>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a11      	ldr	r2, [pc, #68]	; (8004b9c <TIM_OC5_SetConfig+0xac>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d109      	bne.n	8004b6e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	021b      	lsls	r3, r3, #8
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	621a      	str	r2, [r3, #32]
}
 8004b88:	bf00      	nop
 8004b8a:	371c      	adds	r7, #28
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	40012c00 	.word	0x40012c00
 8004b98:	40014000 	.word	0x40014000
 8004b9c:	40014400 	.word	0x40014400

08004ba0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b087      	sub	sp, #28
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	021b      	lsls	r3, r3, #8
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004be6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	051b      	lsls	r3, r3, #20
 8004bee:	693a      	ldr	r2, [r7, #16]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a14      	ldr	r2, [pc, #80]	; (8004c48 <TIM_OC6_SetConfig+0xa8>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d007      	beq.n	8004c0c <TIM_OC6_SetConfig+0x6c>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a13      	ldr	r2, [pc, #76]	; (8004c4c <TIM_OC6_SetConfig+0xac>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d003      	beq.n	8004c0c <TIM_OC6_SetConfig+0x6c>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a12      	ldr	r2, [pc, #72]	; (8004c50 <TIM_OC6_SetConfig+0xb0>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d109      	bne.n	8004c20 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	695b      	ldr	r3, [r3, #20]
 8004c18:	029b      	lsls	r3, r3, #10
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	685a      	ldr	r2, [r3, #4]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	621a      	str	r2, [r3, #32]
}
 8004c3a:	bf00      	nop
 8004c3c:	371c      	adds	r7, #28
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	40012c00 	.word	0x40012c00
 8004c4c:	40014000 	.word	0x40014000
 8004c50:	40014400 	.word	0x40014400

08004c54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d101      	bne.n	8004c6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c68:	2302      	movs	r3, #2
 8004c6a:	e04f      	b.n	8004d0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2202      	movs	r2, #2
 8004c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a21      	ldr	r2, [pc, #132]	; (8004d18 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d108      	bne.n	8004ca8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004c9c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a14      	ldr	r2, [pc, #80]	; (8004d18 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d009      	beq.n	8004ce0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cd4:	d004      	beq.n	8004ce0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a10      	ldr	r2, [pc, #64]	; (8004d1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d10c      	bne.n	8004cfa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ce6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68ba      	ldr	r2, [r7, #8]
 8004cf8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3714      	adds	r7, #20
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr
 8004d18:	40012c00 	.word	0x40012c00
 8004d1c:	40014000 	.word	0x40014000

08004d20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d3c:	bf00      	nop
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e040      	b.n	8004df0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d106      	bne.n	8004d84 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f7fc fa6c 	bl	800125c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2224      	movs	r2, #36	; 0x24
 8004d88:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 0201 	bic.w	r2, r2, #1
 8004d98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 f8c0 	bl	8004f20 <UART_SetConfig>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d101      	bne.n	8004daa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e022      	b.n	8004df0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d002      	beq.n	8004db8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 fb0e 	bl	80053d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	689a      	ldr	r2, [r3, #8]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dd6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f042 0201 	orr.w	r2, r2, #1
 8004de6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 fb95 	bl	8005518 <UART_CheckIdleState>
 8004dee:	4603      	mov	r3, r0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3708      	adds	r7, #8
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b08a      	sub	sp, #40	; 0x28
 8004dfc:	af02      	add	r7, sp, #8
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	603b      	str	r3, [r7, #0]
 8004e04:	4613      	mov	r3, r2
 8004e06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e0c:	2b20      	cmp	r3, #32
 8004e0e:	f040 8082 	bne.w	8004f16 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d002      	beq.n	8004e1e <HAL_UART_Transmit+0x26>
 8004e18:	88fb      	ldrh	r3, [r7, #6]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e07a      	b.n	8004f18 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d101      	bne.n	8004e30 <HAL_UART_Transmit+0x38>
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	e073      	b.n	8004f18 <HAL_UART_Transmit+0x120>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2221      	movs	r2, #33	; 0x21
 8004e44:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e46:	f7fc fb59 	bl	80014fc <HAL_GetTick>
 8004e4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	88fa      	ldrh	r2, [r7, #6]
 8004e50:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	88fa      	ldrh	r2, [r7, #6]
 8004e58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e64:	d108      	bne.n	8004e78 <HAL_UART_Transmit+0x80>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d104      	bne.n	8004e78 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	61bb      	str	r3, [r7, #24]
 8004e76:	e003      	b.n	8004e80 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004e88:	e02d      	b.n	8004ee6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	9300      	str	r3, [sp, #0]
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	2200      	movs	r2, #0
 8004e92:	2180      	movs	r1, #128	; 0x80
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f000 fb88 	bl	80055aa <UART_WaitOnFlagUntilTimeout>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d001      	beq.n	8004ea4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e039      	b.n	8004f18 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10b      	bne.n	8004ec2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	881a      	ldrh	r2, [r3, #0]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004eb6:	b292      	uxth	r2, r2
 8004eb8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	3302      	adds	r3, #2
 8004ebe:	61bb      	str	r3, [r7, #24]
 8004ec0:	e008      	b.n	8004ed4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	781a      	ldrb	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	b292      	uxth	r2, r2
 8004ecc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	3b01      	subs	r3, #1
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1cb      	bne.n	8004e8a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	9300      	str	r3, [sp, #0]
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	2140      	movs	r1, #64	; 0x40
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f000 fb54 	bl	80055aa <UART_WaitOnFlagUntilTimeout>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d001      	beq.n	8004f0c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e005      	b.n	8004f18 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2220      	movs	r2, #32
 8004f10:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004f12:	2300      	movs	r3, #0
 8004f14:	e000      	b.n	8004f18 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004f16:	2302      	movs	r3, #2
  }
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3720      	adds	r7, #32
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f24:	b08a      	sub	sp, #40	; 0x28
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	689a      	ldr	r2, [r3, #8]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	431a      	orrs	r2, r3
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	431a      	orrs	r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	69db      	ldr	r3, [r3, #28]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	4b9e      	ldr	r3, [pc, #632]	; (80051c8 <UART_SetConfig+0x2a8>)
 8004f50:	4013      	ands	r3, r2
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	6812      	ldr	r2, [r2, #0]
 8004f56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f58:	430b      	orrs	r3, r1
 8004f5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	68da      	ldr	r2, [r3, #12]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a93      	ldr	r2, [pc, #588]	; (80051cc <UART_SetConfig+0x2ac>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d004      	beq.n	8004f8c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a8a      	ldr	r2, [pc, #552]	; (80051d0 <UART_SetConfig+0x2b0>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d126      	bne.n	8004ff8 <UART_SetConfig+0xd8>
 8004faa:	4b8a      	ldr	r3, [pc, #552]	; (80051d4 <UART_SetConfig+0x2b4>)
 8004fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb0:	f003 0303 	and.w	r3, r3, #3
 8004fb4:	2b03      	cmp	r3, #3
 8004fb6:	d81b      	bhi.n	8004ff0 <UART_SetConfig+0xd0>
 8004fb8:	a201      	add	r2, pc, #4	; (adr r2, 8004fc0 <UART_SetConfig+0xa0>)
 8004fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fbe:	bf00      	nop
 8004fc0:	08004fd1 	.word	0x08004fd1
 8004fc4:	08004fe1 	.word	0x08004fe1
 8004fc8:	08004fd9 	.word	0x08004fd9
 8004fcc:	08004fe9 	.word	0x08004fe9
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fd6:	e0ab      	b.n	8005130 <UART_SetConfig+0x210>
 8004fd8:	2302      	movs	r3, #2
 8004fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fde:	e0a7      	b.n	8005130 <UART_SetConfig+0x210>
 8004fe0:	2304      	movs	r3, #4
 8004fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fe6:	e0a3      	b.n	8005130 <UART_SetConfig+0x210>
 8004fe8:	2308      	movs	r3, #8
 8004fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fee:	e09f      	b.n	8005130 <UART_SetConfig+0x210>
 8004ff0:	2310      	movs	r3, #16
 8004ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ff6:	e09b      	b.n	8005130 <UART_SetConfig+0x210>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a76      	ldr	r2, [pc, #472]	; (80051d8 <UART_SetConfig+0x2b8>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d138      	bne.n	8005074 <UART_SetConfig+0x154>
 8005002:	4b74      	ldr	r3, [pc, #464]	; (80051d4 <UART_SetConfig+0x2b4>)
 8005004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005008:	f003 030c 	and.w	r3, r3, #12
 800500c:	2b0c      	cmp	r3, #12
 800500e:	d82d      	bhi.n	800506c <UART_SetConfig+0x14c>
 8005010:	a201      	add	r2, pc, #4	; (adr r2, 8005018 <UART_SetConfig+0xf8>)
 8005012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005016:	bf00      	nop
 8005018:	0800504d 	.word	0x0800504d
 800501c:	0800506d 	.word	0x0800506d
 8005020:	0800506d 	.word	0x0800506d
 8005024:	0800506d 	.word	0x0800506d
 8005028:	0800505d 	.word	0x0800505d
 800502c:	0800506d 	.word	0x0800506d
 8005030:	0800506d 	.word	0x0800506d
 8005034:	0800506d 	.word	0x0800506d
 8005038:	08005055 	.word	0x08005055
 800503c:	0800506d 	.word	0x0800506d
 8005040:	0800506d 	.word	0x0800506d
 8005044:	0800506d 	.word	0x0800506d
 8005048:	08005065 	.word	0x08005065
 800504c:	2300      	movs	r3, #0
 800504e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005052:	e06d      	b.n	8005130 <UART_SetConfig+0x210>
 8005054:	2302      	movs	r3, #2
 8005056:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800505a:	e069      	b.n	8005130 <UART_SetConfig+0x210>
 800505c:	2304      	movs	r3, #4
 800505e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005062:	e065      	b.n	8005130 <UART_SetConfig+0x210>
 8005064:	2308      	movs	r3, #8
 8005066:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800506a:	e061      	b.n	8005130 <UART_SetConfig+0x210>
 800506c:	2310      	movs	r3, #16
 800506e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005072:	e05d      	b.n	8005130 <UART_SetConfig+0x210>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a58      	ldr	r2, [pc, #352]	; (80051dc <UART_SetConfig+0x2bc>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d125      	bne.n	80050ca <UART_SetConfig+0x1aa>
 800507e:	4b55      	ldr	r3, [pc, #340]	; (80051d4 <UART_SetConfig+0x2b4>)
 8005080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005084:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005088:	2b30      	cmp	r3, #48	; 0x30
 800508a:	d016      	beq.n	80050ba <UART_SetConfig+0x19a>
 800508c:	2b30      	cmp	r3, #48	; 0x30
 800508e:	d818      	bhi.n	80050c2 <UART_SetConfig+0x1a2>
 8005090:	2b20      	cmp	r3, #32
 8005092:	d00a      	beq.n	80050aa <UART_SetConfig+0x18a>
 8005094:	2b20      	cmp	r3, #32
 8005096:	d814      	bhi.n	80050c2 <UART_SetConfig+0x1a2>
 8005098:	2b00      	cmp	r3, #0
 800509a:	d002      	beq.n	80050a2 <UART_SetConfig+0x182>
 800509c:	2b10      	cmp	r3, #16
 800509e:	d008      	beq.n	80050b2 <UART_SetConfig+0x192>
 80050a0:	e00f      	b.n	80050c2 <UART_SetConfig+0x1a2>
 80050a2:	2300      	movs	r3, #0
 80050a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050a8:	e042      	b.n	8005130 <UART_SetConfig+0x210>
 80050aa:	2302      	movs	r3, #2
 80050ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050b0:	e03e      	b.n	8005130 <UART_SetConfig+0x210>
 80050b2:	2304      	movs	r3, #4
 80050b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050b8:	e03a      	b.n	8005130 <UART_SetConfig+0x210>
 80050ba:	2308      	movs	r3, #8
 80050bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050c0:	e036      	b.n	8005130 <UART_SetConfig+0x210>
 80050c2:	2310      	movs	r3, #16
 80050c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050c8:	e032      	b.n	8005130 <UART_SetConfig+0x210>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a3f      	ldr	r2, [pc, #252]	; (80051cc <UART_SetConfig+0x2ac>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d12a      	bne.n	800512a <UART_SetConfig+0x20a>
 80050d4:	4b3f      	ldr	r3, [pc, #252]	; (80051d4 <UART_SetConfig+0x2b4>)
 80050d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050da:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80050de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050e2:	d01a      	beq.n	800511a <UART_SetConfig+0x1fa>
 80050e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050e8:	d81b      	bhi.n	8005122 <UART_SetConfig+0x202>
 80050ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050ee:	d00c      	beq.n	800510a <UART_SetConfig+0x1ea>
 80050f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050f4:	d815      	bhi.n	8005122 <UART_SetConfig+0x202>
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <UART_SetConfig+0x1e2>
 80050fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050fe:	d008      	beq.n	8005112 <UART_SetConfig+0x1f2>
 8005100:	e00f      	b.n	8005122 <UART_SetConfig+0x202>
 8005102:	2300      	movs	r3, #0
 8005104:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005108:	e012      	b.n	8005130 <UART_SetConfig+0x210>
 800510a:	2302      	movs	r3, #2
 800510c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005110:	e00e      	b.n	8005130 <UART_SetConfig+0x210>
 8005112:	2304      	movs	r3, #4
 8005114:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005118:	e00a      	b.n	8005130 <UART_SetConfig+0x210>
 800511a:	2308      	movs	r3, #8
 800511c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005120:	e006      	b.n	8005130 <UART_SetConfig+0x210>
 8005122:	2310      	movs	r3, #16
 8005124:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005128:	e002      	b.n	8005130 <UART_SetConfig+0x210>
 800512a:	2310      	movs	r3, #16
 800512c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a25      	ldr	r2, [pc, #148]	; (80051cc <UART_SetConfig+0x2ac>)
 8005136:	4293      	cmp	r3, r2
 8005138:	f040 808a 	bne.w	8005250 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800513c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005140:	2b08      	cmp	r3, #8
 8005142:	d824      	bhi.n	800518e <UART_SetConfig+0x26e>
 8005144:	a201      	add	r2, pc, #4	; (adr r2, 800514c <UART_SetConfig+0x22c>)
 8005146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800514a:	bf00      	nop
 800514c:	08005171 	.word	0x08005171
 8005150:	0800518f 	.word	0x0800518f
 8005154:	08005179 	.word	0x08005179
 8005158:	0800518f 	.word	0x0800518f
 800515c:	0800517f 	.word	0x0800517f
 8005160:	0800518f 	.word	0x0800518f
 8005164:	0800518f 	.word	0x0800518f
 8005168:	0800518f 	.word	0x0800518f
 800516c:	08005187 	.word	0x08005187
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005170:	f7fe fabc 	bl	80036ec <HAL_RCC_GetPCLK1Freq>
 8005174:	61f8      	str	r0, [r7, #28]
        break;
 8005176:	e010      	b.n	800519a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005178:	4b19      	ldr	r3, [pc, #100]	; (80051e0 <UART_SetConfig+0x2c0>)
 800517a:	61fb      	str	r3, [r7, #28]
        break;
 800517c:	e00d      	b.n	800519a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800517e:	f7fe fa1d 	bl	80035bc <HAL_RCC_GetSysClockFreq>
 8005182:	61f8      	str	r0, [r7, #28]
        break;
 8005184:	e009      	b.n	800519a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005186:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800518a:	61fb      	str	r3, [r7, #28]
        break;
 800518c:	e005      	b.n	800519a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800518e:	2300      	movs	r3, #0
 8005190:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005198:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	2b00      	cmp	r3, #0
 800519e:	f000 8109 	beq.w	80053b4 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	685a      	ldr	r2, [r3, #4]
 80051a6:	4613      	mov	r3, r2
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	4413      	add	r3, r2
 80051ac:	69fa      	ldr	r2, [r7, #28]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d305      	bcc.n	80051be <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051b8:	69fa      	ldr	r2, [r7, #28]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d912      	bls.n	80051e4 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80051c4:	e0f6      	b.n	80053b4 <UART_SetConfig+0x494>
 80051c6:	bf00      	nop
 80051c8:	efff69f3 	.word	0xefff69f3
 80051cc:	40008000 	.word	0x40008000
 80051d0:	40013800 	.word	0x40013800
 80051d4:	40021000 	.word	0x40021000
 80051d8:	40004400 	.word	0x40004400
 80051dc:	40004800 	.word	0x40004800
 80051e0:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	2200      	movs	r2, #0
 80051e8:	461c      	mov	r4, r3
 80051ea:	4615      	mov	r5, r2
 80051ec:	f04f 0200 	mov.w	r2, #0
 80051f0:	f04f 0300 	mov.w	r3, #0
 80051f4:	022b      	lsls	r3, r5, #8
 80051f6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80051fa:	0222      	lsls	r2, r4, #8
 80051fc:	68f9      	ldr	r1, [r7, #12]
 80051fe:	6849      	ldr	r1, [r1, #4]
 8005200:	0849      	lsrs	r1, r1, #1
 8005202:	2000      	movs	r0, #0
 8005204:	4688      	mov	r8, r1
 8005206:	4681      	mov	r9, r0
 8005208:	eb12 0a08 	adds.w	sl, r2, r8
 800520c:	eb43 0b09 	adc.w	fp, r3, r9
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	603b      	str	r3, [r7, #0]
 8005218:	607a      	str	r2, [r7, #4]
 800521a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800521e:	4650      	mov	r0, sl
 8005220:	4659      	mov	r1, fp
 8005222:	f7fa ffd5 	bl	80001d0 <__aeabi_uldivmod>
 8005226:	4602      	mov	r2, r0
 8005228:	460b      	mov	r3, r1
 800522a:	4613      	mov	r3, r2
 800522c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005234:	d308      	bcc.n	8005248 <UART_SetConfig+0x328>
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800523c:	d204      	bcs.n	8005248 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	69ba      	ldr	r2, [r7, #24]
 8005244:	60da      	str	r2, [r3, #12]
 8005246:	e0b5      	b.n	80053b4 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800524e:	e0b1      	b.n	80053b4 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	69db      	ldr	r3, [r3, #28]
 8005254:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005258:	d15d      	bne.n	8005316 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800525a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800525e:	2b08      	cmp	r3, #8
 8005260:	d827      	bhi.n	80052b2 <UART_SetConfig+0x392>
 8005262:	a201      	add	r2, pc, #4	; (adr r2, 8005268 <UART_SetConfig+0x348>)
 8005264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005268:	0800528d 	.word	0x0800528d
 800526c:	08005295 	.word	0x08005295
 8005270:	0800529d 	.word	0x0800529d
 8005274:	080052b3 	.word	0x080052b3
 8005278:	080052a3 	.word	0x080052a3
 800527c:	080052b3 	.word	0x080052b3
 8005280:	080052b3 	.word	0x080052b3
 8005284:	080052b3 	.word	0x080052b3
 8005288:	080052ab 	.word	0x080052ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800528c:	f7fe fa2e 	bl	80036ec <HAL_RCC_GetPCLK1Freq>
 8005290:	61f8      	str	r0, [r7, #28]
        break;
 8005292:	e014      	b.n	80052be <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005294:	f7fe fa40 	bl	8003718 <HAL_RCC_GetPCLK2Freq>
 8005298:	61f8      	str	r0, [r7, #28]
        break;
 800529a:	e010      	b.n	80052be <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800529c:	4b4c      	ldr	r3, [pc, #304]	; (80053d0 <UART_SetConfig+0x4b0>)
 800529e:	61fb      	str	r3, [r7, #28]
        break;
 80052a0:	e00d      	b.n	80052be <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052a2:	f7fe f98b 	bl	80035bc <HAL_RCC_GetSysClockFreq>
 80052a6:	61f8      	str	r0, [r7, #28]
        break;
 80052a8:	e009      	b.n	80052be <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052ae:	61fb      	str	r3, [r7, #28]
        break;
 80052b0:	e005      	b.n	80052be <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80052b2:	2300      	movs	r3, #0
 80052b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80052bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d077      	beq.n	80053b4 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	005a      	lsls	r2, r3, #1
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	085b      	lsrs	r3, r3, #1
 80052ce:	441a      	add	r2, r3
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	2b0f      	cmp	r3, #15
 80052de:	d916      	bls.n	800530e <UART_SetConfig+0x3ee>
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052e6:	d212      	bcs.n	800530e <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	f023 030f 	bic.w	r3, r3, #15
 80052f0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	085b      	lsrs	r3, r3, #1
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	f003 0307 	and.w	r3, r3, #7
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	8afb      	ldrh	r3, [r7, #22]
 8005300:	4313      	orrs	r3, r2
 8005302:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	8afa      	ldrh	r2, [r7, #22]
 800530a:	60da      	str	r2, [r3, #12]
 800530c:	e052      	b.n	80053b4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005314:	e04e      	b.n	80053b4 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005316:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800531a:	2b08      	cmp	r3, #8
 800531c:	d827      	bhi.n	800536e <UART_SetConfig+0x44e>
 800531e:	a201      	add	r2, pc, #4	; (adr r2, 8005324 <UART_SetConfig+0x404>)
 8005320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005324:	08005349 	.word	0x08005349
 8005328:	08005351 	.word	0x08005351
 800532c:	08005359 	.word	0x08005359
 8005330:	0800536f 	.word	0x0800536f
 8005334:	0800535f 	.word	0x0800535f
 8005338:	0800536f 	.word	0x0800536f
 800533c:	0800536f 	.word	0x0800536f
 8005340:	0800536f 	.word	0x0800536f
 8005344:	08005367 	.word	0x08005367
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005348:	f7fe f9d0 	bl	80036ec <HAL_RCC_GetPCLK1Freq>
 800534c:	61f8      	str	r0, [r7, #28]
        break;
 800534e:	e014      	b.n	800537a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005350:	f7fe f9e2 	bl	8003718 <HAL_RCC_GetPCLK2Freq>
 8005354:	61f8      	str	r0, [r7, #28]
        break;
 8005356:	e010      	b.n	800537a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005358:	4b1d      	ldr	r3, [pc, #116]	; (80053d0 <UART_SetConfig+0x4b0>)
 800535a:	61fb      	str	r3, [r7, #28]
        break;
 800535c:	e00d      	b.n	800537a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800535e:	f7fe f92d 	bl	80035bc <HAL_RCC_GetSysClockFreq>
 8005362:	61f8      	str	r0, [r7, #28]
        break;
 8005364:	e009      	b.n	800537a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800536a:	61fb      	str	r3, [r7, #28]
        break;
 800536c:	e005      	b.n	800537a <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800536e:	2300      	movs	r3, #0
 8005370:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005378:	bf00      	nop
    }

    if (pclk != 0U)
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d019      	beq.n	80053b4 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	085a      	lsrs	r2, r3, #1
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	441a      	add	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005392:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	2b0f      	cmp	r3, #15
 8005398:	d909      	bls.n	80053ae <UART_SetConfig+0x48e>
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053a0:	d205      	bcs.n	80053ae <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	b29a      	uxth	r2, r3
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	60da      	str	r2, [r3, #12]
 80053ac:	e002      	b.n	80053b4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80053c0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3728      	adds	r7, #40	; 0x28
 80053c8:	46bd      	mov	sp, r7
 80053ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053ce:	bf00      	nop
 80053d0:	00f42400 	.word	0x00f42400

080053d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e0:	f003 0301 	and.w	r3, r3, #1
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00a      	beq.n	80053fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	430a      	orrs	r2, r1
 80053fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00a      	beq.n	8005420 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	430a      	orrs	r2, r1
 800541e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005424:	f003 0304 	and.w	r3, r3, #4
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00a      	beq.n	8005442 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	430a      	orrs	r2, r1
 8005440:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005446:	f003 0308 	and.w	r3, r3, #8
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00a      	beq.n	8005464 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	430a      	orrs	r2, r1
 8005462:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005468:	f003 0310 	and.w	r3, r3, #16
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00a      	beq.n	8005486 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	430a      	orrs	r2, r1
 8005484:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548a:	f003 0320 	and.w	r3, r3, #32
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00a      	beq.n	80054a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	430a      	orrs	r2, r1
 80054a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d01a      	beq.n	80054ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	430a      	orrs	r2, r1
 80054c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054d2:	d10a      	bne.n	80054ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	430a      	orrs	r2, r1
 80054e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00a      	beq.n	800550c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	430a      	orrs	r2, r1
 800550a:	605a      	str	r2, [r3, #4]
  }
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b086      	sub	sp, #24
 800551c:	af02      	add	r7, sp, #8
 800551e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005528:	f7fb ffe8 	bl	80014fc <HAL_GetTick>
 800552c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0308 	and.w	r3, r3, #8
 8005538:	2b08      	cmp	r3, #8
 800553a:	d10e      	bne.n	800555a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800553c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005540:	9300      	str	r3, [sp, #0]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f82d 	bl	80055aa <UART_WaitOnFlagUntilTimeout>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d001      	beq.n	800555a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e023      	b.n	80055a2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0304 	and.w	r3, r3, #4
 8005564:	2b04      	cmp	r3, #4
 8005566:	d10e      	bne.n	8005586 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005568:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800556c:	9300      	str	r3, [sp, #0]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f817 	bl	80055aa <UART_WaitOnFlagUntilTimeout>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d001      	beq.n	8005586 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e00d      	b.n	80055a2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2220      	movs	r2, #32
 800558a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2220      	movs	r2, #32
 8005590:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3710      	adds	r7, #16
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b09c      	sub	sp, #112	; 0x70
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	60f8      	str	r0, [r7, #12]
 80055b2:	60b9      	str	r1, [r7, #8]
 80055b4:	603b      	str	r3, [r7, #0]
 80055b6:	4613      	mov	r3, r2
 80055b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055ba:	e0a5      	b.n	8005708 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055c2:	f000 80a1 	beq.w	8005708 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055c6:	f7fb ff99 	bl	80014fc <HAL_GetTick>
 80055ca:	4602      	mov	r2, r0
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d302      	bcc.n	80055dc <UART_WaitOnFlagUntilTimeout+0x32>
 80055d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d13e      	bne.n	800565a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055e4:	e853 3f00 	ldrex	r3, [r3]
 80055e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80055ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055f0:	667b      	str	r3, [r7, #100]	; 0x64
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	461a      	mov	r2, r3
 80055f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055fc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005600:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005602:	e841 2300 	strex	r3, r2, [r1]
 8005606:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005608:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1e6      	bne.n	80055dc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	3308      	adds	r3, #8
 8005614:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005618:	e853 3f00 	ldrex	r3, [r3]
 800561c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800561e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005620:	f023 0301 	bic.w	r3, r3, #1
 8005624:	663b      	str	r3, [r7, #96]	; 0x60
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	3308      	adds	r3, #8
 800562c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800562e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005630:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005632:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005634:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005636:	e841 2300 	strex	r3, r2, [r1]
 800563a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800563c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1e5      	bne.n	800560e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2220      	movs	r2, #32
 8005646:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2220      	movs	r2, #32
 800564c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e067      	b.n	800572a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0304 	and.w	r3, r3, #4
 8005664:	2b00      	cmp	r3, #0
 8005666:	d04f      	beq.n	8005708 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	69db      	ldr	r3, [r3, #28]
 800566e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005672:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005676:	d147      	bne.n	8005708 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005680:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568a:	e853 3f00 	ldrex	r3, [r3]
 800568e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005692:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005696:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	461a      	mov	r2, r3
 800569e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056a0:	637b      	str	r3, [r7, #52]	; 0x34
 80056a2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056a8:	e841 2300 	strex	r3, r2, [r1]
 80056ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80056ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1e6      	bne.n	8005682 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	3308      	adds	r3, #8
 80056ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	e853 3f00 	ldrex	r3, [r3]
 80056c2:	613b      	str	r3, [r7, #16]
   return(result);
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	f023 0301 	bic.w	r3, r3, #1
 80056ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	3308      	adds	r3, #8
 80056d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80056d4:	623a      	str	r2, [r7, #32]
 80056d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d8:	69f9      	ldr	r1, [r7, #28]
 80056da:	6a3a      	ldr	r2, [r7, #32]
 80056dc:	e841 2300 	strex	r3, r2, [r1]
 80056e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1e5      	bne.n	80056b4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2220      	movs	r2, #32
 80056ec:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2220      	movs	r2, #32
 80056f2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2220      	movs	r2, #32
 80056f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e010      	b.n	800572a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	69da      	ldr	r2, [r3, #28]
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	4013      	ands	r3, r2
 8005712:	68ba      	ldr	r2, [r7, #8]
 8005714:	429a      	cmp	r2, r3
 8005716:	bf0c      	ite	eq
 8005718:	2301      	moveq	r3, #1
 800571a:	2300      	movne	r3, #0
 800571c:	b2db      	uxtb	r3, r3
 800571e:	461a      	mov	r2, r3
 8005720:	79fb      	ldrb	r3, [r7, #7]
 8005722:	429a      	cmp	r2, r3
 8005724:	f43f af4a 	beq.w	80055bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3770      	adds	r7, #112	; 0x70
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
	...

08005734 <__NVIC_SetPriority>:
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	4603      	mov	r3, r0
 800573c:	6039      	str	r1, [r7, #0]
 800573e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005744:	2b00      	cmp	r3, #0
 8005746:	db0a      	blt.n	800575e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	b2da      	uxtb	r2, r3
 800574c:	490c      	ldr	r1, [pc, #48]	; (8005780 <__NVIC_SetPriority+0x4c>)
 800574e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005752:	0112      	lsls	r2, r2, #4
 8005754:	b2d2      	uxtb	r2, r2
 8005756:	440b      	add	r3, r1
 8005758:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800575c:	e00a      	b.n	8005774 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	b2da      	uxtb	r2, r3
 8005762:	4908      	ldr	r1, [pc, #32]	; (8005784 <__NVIC_SetPriority+0x50>)
 8005764:	79fb      	ldrb	r3, [r7, #7]
 8005766:	f003 030f 	and.w	r3, r3, #15
 800576a:	3b04      	subs	r3, #4
 800576c:	0112      	lsls	r2, r2, #4
 800576e:	b2d2      	uxtb	r2, r2
 8005770:	440b      	add	r3, r1
 8005772:	761a      	strb	r2, [r3, #24]
}
 8005774:	bf00      	nop
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr
 8005780:	e000e100 	.word	0xe000e100
 8005784:	e000ed00 	.word	0xe000ed00

08005788 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005788:	b580      	push	{r7, lr}
 800578a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800578c:	4b05      	ldr	r3, [pc, #20]	; (80057a4 <SysTick_Handler+0x1c>)
 800578e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005790:	f001 fdc0 	bl	8007314 <xTaskGetSchedulerState>
 8005794:	4603      	mov	r3, r0
 8005796:	2b01      	cmp	r3, #1
 8005798:	d001      	beq.n	800579e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800579a:	f002 fba5 	bl	8007ee8 <xPortSysTickHandler>
  }
}
 800579e:	bf00      	nop
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	e000e010 	.word	0xe000e010

080057a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80057a8:	b580      	push	{r7, lr}
 80057aa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80057ac:	2100      	movs	r1, #0
 80057ae:	f06f 0004 	mvn.w	r0, #4
 80057b2:	f7ff ffbf 	bl	8005734 <__NVIC_SetPriority>
#endif
}
 80057b6:	bf00      	nop
 80057b8:	bd80      	pop	{r7, pc}
	...

080057bc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057c2:	f3ef 8305 	mrs	r3, IPSR
 80057c6:	603b      	str	r3, [r7, #0]
  return(result);
 80057c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d003      	beq.n	80057d6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80057ce:	f06f 0305 	mvn.w	r3, #5
 80057d2:	607b      	str	r3, [r7, #4]
 80057d4:	e00c      	b.n	80057f0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80057d6:	4b0a      	ldr	r3, [pc, #40]	; (8005800 <osKernelInitialize+0x44>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d105      	bne.n	80057ea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80057de:	4b08      	ldr	r3, [pc, #32]	; (8005800 <osKernelInitialize+0x44>)
 80057e0:	2201      	movs	r2, #1
 80057e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80057e4:	2300      	movs	r3, #0
 80057e6:	607b      	str	r3, [r7, #4]
 80057e8:	e002      	b.n	80057f0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80057ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80057f0:	687b      	ldr	r3, [r7, #4]
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	370c      	adds	r7, #12
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	20000388 	.word	0x20000388

08005804 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005804:	b580      	push	{r7, lr}
 8005806:	b082      	sub	sp, #8
 8005808:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800580a:	f3ef 8305 	mrs	r3, IPSR
 800580e:	603b      	str	r3, [r7, #0]
  return(result);
 8005810:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005812:	2b00      	cmp	r3, #0
 8005814:	d003      	beq.n	800581e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005816:	f06f 0305 	mvn.w	r3, #5
 800581a:	607b      	str	r3, [r7, #4]
 800581c:	e010      	b.n	8005840 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800581e:	4b0b      	ldr	r3, [pc, #44]	; (800584c <osKernelStart+0x48>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d109      	bne.n	800583a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005826:	f7ff ffbf 	bl	80057a8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800582a:	4b08      	ldr	r3, [pc, #32]	; (800584c <osKernelStart+0x48>)
 800582c:	2202      	movs	r2, #2
 800582e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005830:	f001 f912 	bl	8006a58 <vTaskStartScheduler>
      stat = osOK;
 8005834:	2300      	movs	r3, #0
 8005836:	607b      	str	r3, [r7, #4]
 8005838:	e002      	b.n	8005840 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800583a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800583e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005840:	687b      	ldr	r3, [r7, #4]
}
 8005842:	4618      	mov	r0, r3
 8005844:	3708      	adds	r7, #8
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	20000388 	.word	0x20000388

08005850 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005850:	b580      	push	{r7, lr}
 8005852:	b08e      	sub	sp, #56	; 0x38
 8005854:	af04      	add	r7, sp, #16
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800585c:	2300      	movs	r3, #0
 800585e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005860:	f3ef 8305 	mrs	r3, IPSR
 8005864:	617b      	str	r3, [r7, #20]
  return(result);
 8005866:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005868:	2b00      	cmp	r3, #0
 800586a:	d17e      	bne.n	800596a <osThreadNew+0x11a>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d07b      	beq.n	800596a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005872:	2380      	movs	r3, #128	; 0x80
 8005874:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005876:	2318      	movs	r3, #24
 8005878:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800587a:	2300      	movs	r3, #0
 800587c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800587e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005882:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d045      	beq.n	8005916 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d002      	beq.n	8005898 <osThreadNew+0x48>
        name = attr->name;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d002      	beq.n	80058a6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d008      	beq.n	80058be <osThreadNew+0x6e>
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	2b38      	cmp	r3, #56	; 0x38
 80058b0:	d805      	bhi.n	80058be <osThreadNew+0x6e>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f003 0301 	and.w	r3, r3, #1
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d001      	beq.n	80058c2 <osThreadNew+0x72>
        return (NULL);
 80058be:	2300      	movs	r3, #0
 80058c0:	e054      	b.n	800596c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d003      	beq.n	80058d2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	089b      	lsrs	r3, r3, #2
 80058d0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00e      	beq.n	80058f8 <osThreadNew+0xa8>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	2bbb      	cmp	r3, #187	; 0xbb
 80058e0:	d90a      	bls.n	80058f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d006      	beq.n	80058f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d002      	beq.n	80058f8 <osThreadNew+0xa8>
        mem = 1;
 80058f2:	2301      	movs	r3, #1
 80058f4:	61bb      	str	r3, [r7, #24]
 80058f6:	e010      	b.n	800591a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d10c      	bne.n	800591a <osThreadNew+0xca>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d108      	bne.n	800591a <osThreadNew+0xca>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d104      	bne.n	800591a <osThreadNew+0xca>
          mem = 0;
 8005910:	2300      	movs	r3, #0
 8005912:	61bb      	str	r3, [r7, #24]
 8005914:	e001      	b.n	800591a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005916:	2300      	movs	r3, #0
 8005918:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d110      	bne.n	8005942 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005928:	9202      	str	r2, [sp, #8]
 800592a:	9301      	str	r3, [sp, #4]
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	9300      	str	r3, [sp, #0]
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	6a3a      	ldr	r2, [r7, #32]
 8005934:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	f000 fe2c 	bl	8006594 <xTaskCreateStatic>
 800593c:	4603      	mov	r3, r0
 800593e:	613b      	str	r3, [r7, #16]
 8005940:	e013      	b.n	800596a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d110      	bne.n	800596a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005948:	6a3b      	ldr	r3, [r7, #32]
 800594a:	b29a      	uxth	r2, r3
 800594c:	f107 0310 	add.w	r3, r7, #16
 8005950:	9301      	str	r3, [sp, #4]
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	9300      	str	r3, [sp, #0]
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800595a:	68f8      	ldr	r0, [r7, #12]
 800595c:	f000 fe77 	bl	800664e <xTaskCreate>
 8005960:	4603      	mov	r3, r0
 8005962:	2b01      	cmp	r3, #1
 8005964:	d001      	beq.n	800596a <osThreadNew+0x11a>
            hTask = NULL;
 8005966:	2300      	movs	r3, #0
 8005968:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800596a:	693b      	ldr	r3, [r7, #16]
}
 800596c:	4618      	mov	r0, r3
 800596e:	3728      	adds	r7, #40	; 0x28
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8005974:	b580      	push	{r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005980:	f3ef 8305 	mrs	r3, IPSR
 8005984:	60fb      	str	r3, [r7, #12]
  return(result);
 8005986:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005988:	2b00      	cmp	r3, #0
 800598a:	d003      	beq.n	8005994 <osThreadSuspend+0x20>
    stat = osErrorISR;
 800598c:	f06f 0305 	mvn.w	r3, #5
 8005990:	617b      	str	r3, [r7, #20]
 8005992:	e00b      	b.n	80059ac <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d103      	bne.n	80059a2 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 800599a:	f06f 0303 	mvn.w	r3, #3
 800599e:	617b      	str	r3, [r7, #20]
 80059a0:	e004      	b.n	80059ac <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 80059a2:	2300      	movs	r3, #0
 80059a4:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 80059a6:	6938      	ldr	r0, [r7, #16]
 80059a8:	f000 ffe0 	bl	800696c <vTaskSuspend>
  }

  return (stat);
 80059ac:	697b      	ldr	r3, [r7, #20]
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3718      	adds	r7, #24
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}

080059b6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80059b6:	b580      	push	{r7, lr}
 80059b8:	b084      	sub	sp, #16
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059be:	f3ef 8305 	mrs	r3, IPSR
 80059c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80059c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d003      	beq.n	80059d2 <osDelay+0x1c>
    stat = osErrorISR;
 80059ca:	f06f 0305 	mvn.w	r3, #5
 80059ce:	60fb      	str	r3, [r7, #12]
 80059d0:	e007      	b.n	80059e2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80059d2:	2300      	movs	r3, #0
 80059d4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d002      	beq.n	80059e2 <osDelay+0x2c>
      vTaskDelay(ticks);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 ff91 	bl	8006904 <vTaskDelay>
    }
  }

  return (stat);
 80059e2:	68fb      	ldr	r3, [r7, #12]
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3710      	adds	r7, #16
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80059ec:	b480      	push	{r7}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	4a07      	ldr	r2, [pc, #28]	; (8005a18 <vApplicationGetIdleTaskMemory+0x2c>)
 80059fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	4a06      	ldr	r2, [pc, #24]	; (8005a1c <vApplicationGetIdleTaskMemory+0x30>)
 8005a02:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2280      	movs	r2, #128	; 0x80
 8005a08:	601a      	str	r2, [r3, #0]
}
 8005a0a:	bf00      	nop
 8005a0c:	3714      	adds	r7, #20
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr
 8005a16:	bf00      	nop
 8005a18:	2000038c 	.word	0x2000038c
 8005a1c:	20000448 	.word	0x20000448

08005a20 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	4a07      	ldr	r2, [pc, #28]	; (8005a4c <vApplicationGetTimerTaskMemory+0x2c>)
 8005a30:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	4a06      	ldr	r2, [pc, #24]	; (8005a50 <vApplicationGetTimerTaskMemory+0x30>)
 8005a36:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a3e:	601a      	str	r2, [r3, #0]
}
 8005a40:	bf00      	nop
 8005a42:	3714      	adds	r7, #20
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr
 8005a4c:	20000648 	.word	0x20000648
 8005a50:	20000704 	.word	0x20000704

08005a54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f103 0208 	add.w	r2, r3, #8
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a6c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f103 0208 	add.w	r2, r3, #8
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f103 0208 	add.w	r2, r3, #8
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005aa2:	bf00      	nop
 8005aa4:	370c      	adds	r7, #12
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr

08005aae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005aae:	b480      	push	{r7}
 8005ab0:	b085      	sub	sp, #20
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
 8005ab6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	689a      	ldr	r2, [r3, #8]
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	683a      	ldr	r2, [r7, #0]
 8005ad2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	683a      	ldr	r2, [r7, #0]
 8005ad8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	1c5a      	adds	r2, r3, #1
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	601a      	str	r2, [r3, #0]
}
 8005aea:	bf00      	nop
 8005aec:	3714      	adds	r7, #20
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr

08005af6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005af6:	b480      	push	{r7}
 8005af8:	b085      	sub	sp, #20
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
 8005afe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b0c:	d103      	bne.n	8005b16 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	60fb      	str	r3, [r7, #12]
 8005b14:	e00c      	b.n	8005b30 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	3308      	adds	r3, #8
 8005b1a:	60fb      	str	r3, [r7, #12]
 8005b1c:	e002      	b.n	8005b24 <vListInsert+0x2e>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	60fb      	str	r3, [r7, #12]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d2f6      	bcs.n	8005b1e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	685a      	ldr	r2, [r3, #4]
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	683a      	ldr	r2, [r7, #0]
 8005b3e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	683a      	ldr	r2, [r7, #0]
 8005b4a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	1c5a      	adds	r2, r3, #1
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	601a      	str	r2, [r3, #0]
}
 8005b5c:	bf00      	nop
 8005b5e:	3714      	adds	r7, #20
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	6892      	ldr	r2, [r2, #8]
 8005b7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	6852      	ldr	r2, [r2, #4]
 8005b88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d103      	bne.n	8005b9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689a      	ldr	r2, [r3, #8]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	1e5a      	subs	r2, r3, #1
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3714      	adds	r7, #20
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d10a      	bne.n	8005be6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd4:	f383 8811 	msr	BASEPRI, r3
 8005bd8:	f3bf 8f6f 	isb	sy
 8005bdc:	f3bf 8f4f 	dsb	sy
 8005be0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005be2:	bf00      	nop
 8005be4:	e7fe      	b.n	8005be4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005be6:	f002 f8ed 	bl	8007dc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bf2:	68f9      	ldr	r1, [r7, #12]
 8005bf4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005bf6:	fb01 f303 	mul.w	r3, r1, r3
 8005bfa:	441a      	add	r2, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c16:	3b01      	subs	r3, #1
 8005c18:	68f9      	ldr	r1, [r7, #12]
 8005c1a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005c1c:	fb01 f303 	mul.w	r3, r1, r3
 8005c20:	441a      	add	r2, r3
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	22ff      	movs	r2, #255	; 0xff
 8005c2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	22ff      	movs	r2, #255	; 0xff
 8005c32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d114      	bne.n	8005c66 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d01a      	beq.n	8005c7a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	3310      	adds	r3, #16
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f001 f99f 	bl	8006f8c <xTaskRemoveFromEventList>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d012      	beq.n	8005c7a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005c54:	4b0c      	ldr	r3, [pc, #48]	; (8005c88 <xQueueGenericReset+0xcc>)
 8005c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c5a:	601a      	str	r2, [r3, #0]
 8005c5c:	f3bf 8f4f 	dsb	sy
 8005c60:	f3bf 8f6f 	isb	sy
 8005c64:	e009      	b.n	8005c7a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	3310      	adds	r3, #16
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7ff fef2 	bl	8005a54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	3324      	adds	r3, #36	; 0x24
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7ff feed 	bl	8005a54 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005c7a:	f002 f8d3 	bl	8007e24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005c7e:	2301      	movs	r3, #1
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	e000ed04 	.word	0xe000ed04

08005c8c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b08e      	sub	sp, #56	; 0x38
 8005c90:	af02      	add	r7, sp, #8
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]
 8005c98:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d10a      	bne.n	8005cb6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca4:	f383 8811 	msr	BASEPRI, r3
 8005ca8:	f3bf 8f6f 	isb	sy
 8005cac:	f3bf 8f4f 	dsb	sy
 8005cb0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005cb2:	bf00      	nop
 8005cb4:	e7fe      	b.n	8005cb4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10a      	bne.n	8005cd2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc0:	f383 8811 	msr	BASEPRI, r3
 8005cc4:	f3bf 8f6f 	isb	sy
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005cce:	bf00      	nop
 8005cd0:	e7fe      	b.n	8005cd0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d002      	beq.n	8005cde <xQueueGenericCreateStatic+0x52>
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d001      	beq.n	8005ce2 <xQueueGenericCreateStatic+0x56>
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e000      	b.n	8005ce4 <xQueueGenericCreateStatic+0x58>
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d10a      	bne.n	8005cfe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cec:	f383 8811 	msr	BASEPRI, r3
 8005cf0:	f3bf 8f6f 	isb	sy
 8005cf4:	f3bf 8f4f 	dsb	sy
 8005cf8:	623b      	str	r3, [r7, #32]
}
 8005cfa:	bf00      	nop
 8005cfc:	e7fe      	b.n	8005cfc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d102      	bne.n	8005d0a <xQueueGenericCreateStatic+0x7e>
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d101      	bne.n	8005d0e <xQueueGenericCreateStatic+0x82>
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e000      	b.n	8005d10 <xQueueGenericCreateStatic+0x84>
 8005d0e:	2300      	movs	r3, #0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10a      	bne.n	8005d2a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d18:	f383 8811 	msr	BASEPRI, r3
 8005d1c:	f3bf 8f6f 	isb	sy
 8005d20:	f3bf 8f4f 	dsb	sy
 8005d24:	61fb      	str	r3, [r7, #28]
}
 8005d26:	bf00      	nop
 8005d28:	e7fe      	b.n	8005d28 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005d2a:	2350      	movs	r3, #80	; 0x50
 8005d2c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	2b50      	cmp	r3, #80	; 0x50
 8005d32:	d00a      	beq.n	8005d4a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d38:	f383 8811 	msr	BASEPRI, r3
 8005d3c:	f3bf 8f6f 	isb	sy
 8005d40:	f3bf 8f4f 	dsb	sy
 8005d44:	61bb      	str	r3, [r7, #24]
}
 8005d46:	bf00      	nop
 8005d48:	e7fe      	b.n	8005d48 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005d4a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00d      	beq.n	8005d72 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005d5e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d64:	9300      	str	r3, [sp, #0]
 8005d66:	4613      	mov	r3, r2
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	68b9      	ldr	r1, [r7, #8]
 8005d6c:	68f8      	ldr	r0, [r7, #12]
 8005d6e:	f000 f805 	bl	8005d7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3730      	adds	r7, #48	; 0x30
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
 8005d88:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d103      	bne.n	8005d98 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	69ba      	ldr	r2, [r7, #24]
 8005d94:	601a      	str	r2, [r3, #0]
 8005d96:	e002      	b.n	8005d9e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005daa:	2101      	movs	r1, #1
 8005dac:	69b8      	ldr	r0, [r7, #24]
 8005dae:	f7ff ff05 	bl	8005bbc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	78fa      	ldrb	r2, [r7, #3]
 8005db6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005dba:	bf00      	nop
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
	...

08005dc4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b08e      	sub	sp, #56	; 0x38
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
 8005dd0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d10a      	bne.n	8005df6 <xQueueGenericSend+0x32>
	__asm volatile
 8005de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de4:	f383 8811 	msr	BASEPRI, r3
 8005de8:	f3bf 8f6f 	isb	sy
 8005dec:	f3bf 8f4f 	dsb	sy
 8005df0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005df2:	bf00      	nop
 8005df4:	e7fe      	b.n	8005df4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d103      	bne.n	8005e04 <xQueueGenericSend+0x40>
 8005dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d101      	bne.n	8005e08 <xQueueGenericSend+0x44>
 8005e04:	2301      	movs	r3, #1
 8005e06:	e000      	b.n	8005e0a <xQueueGenericSend+0x46>
 8005e08:	2300      	movs	r3, #0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10a      	bne.n	8005e24 <xQueueGenericSend+0x60>
	__asm volatile
 8005e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e12:	f383 8811 	msr	BASEPRI, r3
 8005e16:	f3bf 8f6f 	isb	sy
 8005e1a:	f3bf 8f4f 	dsb	sy
 8005e1e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005e20:	bf00      	nop
 8005e22:	e7fe      	b.n	8005e22 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d103      	bne.n	8005e32 <xQueueGenericSend+0x6e>
 8005e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d101      	bne.n	8005e36 <xQueueGenericSend+0x72>
 8005e32:	2301      	movs	r3, #1
 8005e34:	e000      	b.n	8005e38 <xQueueGenericSend+0x74>
 8005e36:	2300      	movs	r3, #0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10a      	bne.n	8005e52 <xQueueGenericSend+0x8e>
	__asm volatile
 8005e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e40:	f383 8811 	msr	BASEPRI, r3
 8005e44:	f3bf 8f6f 	isb	sy
 8005e48:	f3bf 8f4f 	dsb	sy
 8005e4c:	623b      	str	r3, [r7, #32]
}
 8005e4e:	bf00      	nop
 8005e50:	e7fe      	b.n	8005e50 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e52:	f001 fa5f 	bl	8007314 <xTaskGetSchedulerState>
 8005e56:	4603      	mov	r3, r0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d102      	bne.n	8005e62 <xQueueGenericSend+0x9e>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d101      	bne.n	8005e66 <xQueueGenericSend+0xa2>
 8005e62:	2301      	movs	r3, #1
 8005e64:	e000      	b.n	8005e68 <xQueueGenericSend+0xa4>
 8005e66:	2300      	movs	r3, #0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d10a      	bne.n	8005e82 <xQueueGenericSend+0xbe>
	__asm volatile
 8005e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e70:	f383 8811 	msr	BASEPRI, r3
 8005e74:	f3bf 8f6f 	isb	sy
 8005e78:	f3bf 8f4f 	dsb	sy
 8005e7c:	61fb      	str	r3, [r7, #28]
}
 8005e7e:	bf00      	nop
 8005e80:	e7fe      	b.n	8005e80 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e82:	f001 ff9f 	bl	8007dc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d302      	bcc.n	8005e98 <xQueueGenericSend+0xd4>
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d129      	bne.n	8005eec <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e98:	683a      	ldr	r2, [r7, #0]
 8005e9a:	68b9      	ldr	r1, [r7, #8]
 8005e9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e9e:	f000 fa0b 	bl	80062b8 <prvCopyDataToQueue>
 8005ea2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d010      	beq.n	8005ece <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eae:	3324      	adds	r3, #36	; 0x24
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f001 f86b 	bl	8006f8c <xTaskRemoveFromEventList>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d013      	beq.n	8005ee4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005ebc:	4b3f      	ldr	r3, [pc, #252]	; (8005fbc <xQueueGenericSend+0x1f8>)
 8005ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ec2:	601a      	str	r2, [r3, #0]
 8005ec4:	f3bf 8f4f 	dsb	sy
 8005ec8:	f3bf 8f6f 	isb	sy
 8005ecc:	e00a      	b.n	8005ee4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d007      	beq.n	8005ee4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005ed4:	4b39      	ldr	r3, [pc, #228]	; (8005fbc <xQueueGenericSend+0x1f8>)
 8005ed6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eda:	601a      	str	r2, [r3, #0]
 8005edc:	f3bf 8f4f 	dsb	sy
 8005ee0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005ee4:	f001 ff9e 	bl	8007e24 <vPortExitCritical>
				return pdPASS;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e063      	b.n	8005fb4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d103      	bne.n	8005efa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ef2:	f001 ff97 	bl	8007e24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	e05c      	b.n	8005fb4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d106      	bne.n	8005f0e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f00:	f107 0314 	add.w	r3, r7, #20
 8005f04:	4618      	mov	r0, r3
 8005f06:	f001 f8a5 	bl	8007054 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f0e:	f001 ff89 	bl	8007e24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f12:	f000 fe11 	bl	8006b38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f16:	f001 ff55 	bl	8007dc4 <vPortEnterCritical>
 8005f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f20:	b25b      	sxtb	r3, r3
 8005f22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f26:	d103      	bne.n	8005f30 <xQueueGenericSend+0x16c>
 8005f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f36:	b25b      	sxtb	r3, r3
 8005f38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f3c:	d103      	bne.n	8005f46 <xQueueGenericSend+0x182>
 8005f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f46:	f001 ff6d 	bl	8007e24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f4a:	1d3a      	adds	r2, r7, #4
 8005f4c:	f107 0314 	add.w	r3, r7, #20
 8005f50:	4611      	mov	r1, r2
 8005f52:	4618      	mov	r0, r3
 8005f54:	f001 f894 	bl	8007080 <xTaskCheckForTimeOut>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d124      	bne.n	8005fa8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005f5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f60:	f000 faa2 	bl	80064a8 <prvIsQueueFull>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d018      	beq.n	8005f9c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6c:	3310      	adds	r3, #16
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	4611      	mov	r1, r2
 8005f72:	4618      	mov	r0, r3
 8005f74:	f000 ffba 	bl	8006eec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005f78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f7a:	f000 fa2d 	bl	80063d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005f7e:	f000 fde9 	bl	8006b54 <xTaskResumeAll>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f47f af7c 	bne.w	8005e82 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005f8a:	4b0c      	ldr	r3, [pc, #48]	; (8005fbc <xQueueGenericSend+0x1f8>)
 8005f8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f90:	601a      	str	r2, [r3, #0]
 8005f92:	f3bf 8f4f 	dsb	sy
 8005f96:	f3bf 8f6f 	isb	sy
 8005f9a:	e772      	b.n	8005e82 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005f9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f9e:	f000 fa1b 	bl	80063d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005fa2:	f000 fdd7 	bl	8006b54 <xTaskResumeAll>
 8005fa6:	e76c      	b.n	8005e82 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005fa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005faa:	f000 fa15 	bl	80063d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005fae:	f000 fdd1 	bl	8006b54 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005fb2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3738      	adds	r7, #56	; 0x38
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	e000ed04 	.word	0xe000ed04

08005fc0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b090      	sub	sp, #64	; 0x40
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
 8005fcc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d10a      	bne.n	8005fee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fdc:	f383 8811 	msr	BASEPRI, r3
 8005fe0:	f3bf 8f6f 	isb	sy
 8005fe4:	f3bf 8f4f 	dsb	sy
 8005fe8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005fea:	bf00      	nop
 8005fec:	e7fe      	b.n	8005fec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d103      	bne.n	8005ffc <xQueueGenericSendFromISR+0x3c>
 8005ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d101      	bne.n	8006000 <xQueueGenericSendFromISR+0x40>
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e000      	b.n	8006002 <xQueueGenericSendFromISR+0x42>
 8006000:	2300      	movs	r3, #0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d10a      	bne.n	800601c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600a:	f383 8811 	msr	BASEPRI, r3
 800600e:	f3bf 8f6f 	isb	sy
 8006012:	f3bf 8f4f 	dsb	sy
 8006016:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006018:	bf00      	nop
 800601a:	e7fe      	b.n	800601a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	2b02      	cmp	r3, #2
 8006020:	d103      	bne.n	800602a <xQueueGenericSendFromISR+0x6a>
 8006022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006026:	2b01      	cmp	r3, #1
 8006028:	d101      	bne.n	800602e <xQueueGenericSendFromISR+0x6e>
 800602a:	2301      	movs	r3, #1
 800602c:	e000      	b.n	8006030 <xQueueGenericSendFromISR+0x70>
 800602e:	2300      	movs	r3, #0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d10a      	bne.n	800604a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006038:	f383 8811 	msr	BASEPRI, r3
 800603c:	f3bf 8f6f 	isb	sy
 8006040:	f3bf 8f4f 	dsb	sy
 8006044:	623b      	str	r3, [r7, #32]
}
 8006046:	bf00      	nop
 8006048:	e7fe      	b.n	8006048 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800604a:	f001 ff9d 	bl	8007f88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800604e:	f3ef 8211 	mrs	r2, BASEPRI
 8006052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006056:	f383 8811 	msr	BASEPRI, r3
 800605a:	f3bf 8f6f 	isb	sy
 800605e:	f3bf 8f4f 	dsb	sy
 8006062:	61fa      	str	r2, [r7, #28]
 8006064:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006066:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006068:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800606a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800606c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800606e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006072:	429a      	cmp	r2, r3
 8006074:	d302      	bcc.n	800607c <xQueueGenericSendFromISR+0xbc>
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	2b02      	cmp	r3, #2
 800607a:	d12f      	bne.n	80060dc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800607c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800608a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800608c:	683a      	ldr	r2, [r7, #0]
 800608e:	68b9      	ldr	r1, [r7, #8]
 8006090:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006092:	f000 f911 	bl	80062b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006096:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800609a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800609e:	d112      	bne.n	80060c6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d016      	beq.n	80060d6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060aa:	3324      	adds	r3, #36	; 0x24
 80060ac:	4618      	mov	r0, r3
 80060ae:	f000 ff6d 	bl	8006f8c <xTaskRemoveFromEventList>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00e      	beq.n	80060d6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00b      	beq.n	80060d6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2201      	movs	r2, #1
 80060c2:	601a      	str	r2, [r3, #0]
 80060c4:	e007      	b.n	80060d6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80060c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80060ca:	3301      	adds	r3, #1
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	b25a      	sxtb	r2, r3
 80060d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80060d6:	2301      	movs	r3, #1
 80060d8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80060da:	e001      	b.n	80060e0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80060dc:	2300      	movs	r3, #0
 80060de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060e2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80060ea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80060ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3740      	adds	r7, #64	; 0x40
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
	...

080060f8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b08c      	sub	sp, #48	; 0x30
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006104:	2300      	movs	r3, #0
 8006106:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800610c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610e:	2b00      	cmp	r3, #0
 8006110:	d10a      	bne.n	8006128 <xQueueReceive+0x30>
	__asm volatile
 8006112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006116:	f383 8811 	msr	BASEPRI, r3
 800611a:	f3bf 8f6f 	isb	sy
 800611e:	f3bf 8f4f 	dsb	sy
 8006122:	623b      	str	r3, [r7, #32]
}
 8006124:	bf00      	nop
 8006126:	e7fe      	b.n	8006126 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d103      	bne.n	8006136 <xQueueReceive+0x3e>
 800612e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006132:	2b00      	cmp	r3, #0
 8006134:	d101      	bne.n	800613a <xQueueReceive+0x42>
 8006136:	2301      	movs	r3, #1
 8006138:	e000      	b.n	800613c <xQueueReceive+0x44>
 800613a:	2300      	movs	r3, #0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d10a      	bne.n	8006156 <xQueueReceive+0x5e>
	__asm volatile
 8006140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006144:	f383 8811 	msr	BASEPRI, r3
 8006148:	f3bf 8f6f 	isb	sy
 800614c:	f3bf 8f4f 	dsb	sy
 8006150:	61fb      	str	r3, [r7, #28]
}
 8006152:	bf00      	nop
 8006154:	e7fe      	b.n	8006154 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006156:	f001 f8dd 	bl	8007314 <xTaskGetSchedulerState>
 800615a:	4603      	mov	r3, r0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d102      	bne.n	8006166 <xQueueReceive+0x6e>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d101      	bne.n	800616a <xQueueReceive+0x72>
 8006166:	2301      	movs	r3, #1
 8006168:	e000      	b.n	800616c <xQueueReceive+0x74>
 800616a:	2300      	movs	r3, #0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d10a      	bne.n	8006186 <xQueueReceive+0x8e>
	__asm volatile
 8006170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006174:	f383 8811 	msr	BASEPRI, r3
 8006178:	f3bf 8f6f 	isb	sy
 800617c:	f3bf 8f4f 	dsb	sy
 8006180:	61bb      	str	r3, [r7, #24]
}
 8006182:	bf00      	nop
 8006184:	e7fe      	b.n	8006184 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006186:	f001 fe1d 	bl	8007dc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800618a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006192:	2b00      	cmp	r3, #0
 8006194:	d01f      	beq.n	80061d6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006196:	68b9      	ldr	r1, [r7, #8]
 8006198:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800619a:	f000 f8f7 	bl	800638c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800619e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a0:	1e5a      	subs	r2, r3, #1
 80061a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00f      	beq.n	80061ce <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b0:	3310      	adds	r3, #16
 80061b2:	4618      	mov	r0, r3
 80061b4:	f000 feea 	bl	8006f8c <xTaskRemoveFromEventList>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d007      	beq.n	80061ce <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80061be:	4b3d      	ldr	r3, [pc, #244]	; (80062b4 <xQueueReceive+0x1bc>)
 80061c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061c4:	601a      	str	r2, [r3, #0]
 80061c6:	f3bf 8f4f 	dsb	sy
 80061ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80061ce:	f001 fe29 	bl	8007e24 <vPortExitCritical>
				return pdPASS;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e069      	b.n	80062aa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d103      	bne.n	80061e4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80061dc:	f001 fe22 	bl	8007e24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80061e0:	2300      	movs	r3, #0
 80061e2:	e062      	b.n	80062aa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80061e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d106      	bne.n	80061f8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80061ea:	f107 0310 	add.w	r3, r7, #16
 80061ee:	4618      	mov	r0, r3
 80061f0:	f000 ff30 	bl	8007054 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80061f4:	2301      	movs	r3, #1
 80061f6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80061f8:	f001 fe14 	bl	8007e24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80061fc:	f000 fc9c 	bl	8006b38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006200:	f001 fde0 	bl	8007dc4 <vPortEnterCritical>
 8006204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006206:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800620a:	b25b      	sxtb	r3, r3
 800620c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006210:	d103      	bne.n	800621a <xQueueReceive+0x122>
 8006212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006214:	2200      	movs	r2, #0
 8006216:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800621a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006220:	b25b      	sxtb	r3, r3
 8006222:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006226:	d103      	bne.n	8006230 <xQueueReceive+0x138>
 8006228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622a:	2200      	movs	r2, #0
 800622c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006230:	f001 fdf8 	bl	8007e24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006234:	1d3a      	adds	r2, r7, #4
 8006236:	f107 0310 	add.w	r3, r7, #16
 800623a:	4611      	mov	r1, r2
 800623c:	4618      	mov	r0, r3
 800623e:	f000 ff1f 	bl	8007080 <xTaskCheckForTimeOut>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d123      	bne.n	8006290 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006248:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800624a:	f000 f917 	bl	800647c <prvIsQueueEmpty>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d017      	beq.n	8006284 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006256:	3324      	adds	r3, #36	; 0x24
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	4611      	mov	r1, r2
 800625c:	4618      	mov	r0, r3
 800625e:	f000 fe45 	bl	8006eec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006262:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006264:	f000 f8b8 	bl	80063d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006268:	f000 fc74 	bl	8006b54 <xTaskResumeAll>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d189      	bne.n	8006186 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006272:	4b10      	ldr	r3, [pc, #64]	; (80062b4 <xQueueReceive+0x1bc>)
 8006274:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006278:	601a      	str	r2, [r3, #0]
 800627a:	f3bf 8f4f 	dsb	sy
 800627e:	f3bf 8f6f 	isb	sy
 8006282:	e780      	b.n	8006186 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006284:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006286:	f000 f8a7 	bl	80063d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800628a:	f000 fc63 	bl	8006b54 <xTaskResumeAll>
 800628e:	e77a      	b.n	8006186 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006290:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006292:	f000 f8a1 	bl	80063d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006296:	f000 fc5d 	bl	8006b54 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800629a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800629c:	f000 f8ee 	bl	800647c <prvIsQueueEmpty>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f43f af6f 	beq.w	8006186 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80062a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3730      	adds	r7, #48	; 0x30
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	e000ed04 	.word	0xe000ed04

080062b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b086      	sub	sp, #24
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80062c4:	2300      	movs	r3, #0
 80062c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d10d      	bne.n	80062f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d14d      	bne.n	800637a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	4618      	mov	r0, r3
 80062e4:	f001 f834 	bl	8007350 <xTaskPriorityDisinherit>
 80062e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	609a      	str	r2, [r3, #8]
 80062f0:	e043      	b.n	800637a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d119      	bne.n	800632c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6858      	ldr	r0, [r3, #4]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006300:	461a      	mov	r2, r3
 8006302:	68b9      	ldr	r1, [r7, #8]
 8006304:	f002 f890 	bl	8008428 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006310:	441a      	add	r2, r3
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	685a      	ldr	r2, [r3, #4]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	429a      	cmp	r2, r3
 8006320:	d32b      	bcc.n	800637a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	605a      	str	r2, [r3, #4]
 800632a:	e026      	b.n	800637a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	68d8      	ldr	r0, [r3, #12]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006334:	461a      	mov	r2, r3
 8006336:	68b9      	ldr	r1, [r7, #8]
 8006338:	f002 f876 	bl	8008428 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	68da      	ldr	r2, [r3, #12]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006344:	425b      	negs	r3, r3
 8006346:	441a      	add	r2, r3
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	68da      	ldr	r2, [r3, #12]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	429a      	cmp	r2, r3
 8006356:	d207      	bcs.n	8006368 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	689a      	ldr	r2, [r3, #8]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006360:	425b      	negs	r3, r3
 8006362:	441a      	add	r2, r3
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2b02      	cmp	r3, #2
 800636c:	d105      	bne.n	800637a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d002      	beq.n	800637a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	3b01      	subs	r3, #1
 8006378:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	1c5a      	adds	r2, r3, #1
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006382:	697b      	ldr	r3, [r7, #20]
}
 8006384:	4618      	mov	r0, r3
 8006386:	3718      	adds	r7, #24
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639a:	2b00      	cmp	r3, #0
 800639c:	d018      	beq.n	80063d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	68da      	ldr	r2, [r3, #12]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a6:	441a      	add	r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	68da      	ldr	r2, [r3, #12]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d303      	bcc.n	80063c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	68d9      	ldr	r1, [r3, #12]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c8:	461a      	mov	r2, r3
 80063ca:	6838      	ldr	r0, [r7, #0]
 80063cc:	f002 f82c 	bl	8008428 <memcpy>
	}
}
 80063d0:	bf00      	nop
 80063d2:	3708      	adds	r7, #8
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80063e0:	f001 fcf0 	bl	8007dc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80063ec:	e011      	b.n	8006412 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d012      	beq.n	800641c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	3324      	adds	r3, #36	; 0x24
 80063fa:	4618      	mov	r0, r3
 80063fc:	f000 fdc6 	bl	8006f8c <xTaskRemoveFromEventList>
 8006400:	4603      	mov	r3, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d001      	beq.n	800640a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006406:	f000 fe9d 	bl	8007144 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800640a:	7bfb      	ldrb	r3, [r7, #15]
 800640c:	3b01      	subs	r3, #1
 800640e:	b2db      	uxtb	r3, r3
 8006410:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006416:	2b00      	cmp	r3, #0
 8006418:	dce9      	bgt.n	80063ee <prvUnlockQueue+0x16>
 800641a:	e000      	b.n	800641e <prvUnlockQueue+0x46>
					break;
 800641c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	22ff      	movs	r2, #255	; 0xff
 8006422:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006426:	f001 fcfd 	bl	8007e24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800642a:	f001 fccb 	bl	8007dc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006434:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006436:	e011      	b.n	800645c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d012      	beq.n	8006466 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	3310      	adds	r3, #16
 8006444:	4618      	mov	r0, r3
 8006446:	f000 fda1 	bl	8006f8c <xTaskRemoveFromEventList>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d001      	beq.n	8006454 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006450:	f000 fe78 	bl	8007144 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006454:	7bbb      	ldrb	r3, [r7, #14]
 8006456:	3b01      	subs	r3, #1
 8006458:	b2db      	uxtb	r3, r3
 800645a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800645c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006460:	2b00      	cmp	r3, #0
 8006462:	dce9      	bgt.n	8006438 <prvUnlockQueue+0x60>
 8006464:	e000      	b.n	8006468 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006466:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	22ff      	movs	r2, #255	; 0xff
 800646c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006470:	f001 fcd8 	bl	8007e24 <vPortExitCritical>
}
 8006474:	bf00      	nop
 8006476:	3710      	adds	r7, #16
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006484:	f001 fc9e 	bl	8007dc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648c:	2b00      	cmp	r3, #0
 800648e:	d102      	bne.n	8006496 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006490:	2301      	movs	r3, #1
 8006492:	60fb      	str	r3, [r7, #12]
 8006494:	e001      	b.n	800649a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006496:	2300      	movs	r3, #0
 8006498:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800649a:	f001 fcc3 	bl	8007e24 <vPortExitCritical>

	return xReturn;
 800649e:	68fb      	ldr	r3, [r7, #12]
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3710      	adds	r7, #16
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80064b0:	f001 fc88 	bl	8007dc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064bc:	429a      	cmp	r2, r3
 80064be:	d102      	bne.n	80064c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80064c0:	2301      	movs	r3, #1
 80064c2:	60fb      	str	r3, [r7, #12]
 80064c4:	e001      	b.n	80064ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80064c6:	2300      	movs	r3, #0
 80064c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80064ca:	f001 fcab 	bl	8007e24 <vPortExitCritical>

	return xReturn;
 80064ce:	68fb      	ldr	r3, [r7, #12]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80064d8:	b480      	push	{r7}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80064e2:	2300      	movs	r3, #0
 80064e4:	60fb      	str	r3, [r7, #12]
 80064e6:	e014      	b.n	8006512 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80064e8:	4a0f      	ldr	r2, [pc, #60]	; (8006528 <vQueueAddToRegistry+0x50>)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d10b      	bne.n	800650c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80064f4:	490c      	ldr	r1, [pc, #48]	; (8006528 <vQueueAddToRegistry+0x50>)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	683a      	ldr	r2, [r7, #0]
 80064fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80064fe:	4a0a      	ldr	r2, [pc, #40]	; (8006528 <vQueueAddToRegistry+0x50>)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	00db      	lsls	r3, r3, #3
 8006504:	4413      	add	r3, r2
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800650a:	e006      	b.n	800651a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	3301      	adds	r3, #1
 8006510:	60fb      	str	r3, [r7, #12]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2b07      	cmp	r3, #7
 8006516:	d9e7      	bls.n	80064e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006518:	bf00      	nop
 800651a:	bf00      	nop
 800651c:	3714      	adds	r7, #20
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	20000b04 	.word	0x20000b04

0800652c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800652c:	b580      	push	{r7, lr}
 800652e:	b086      	sub	sp, #24
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800653c:	f001 fc42 	bl	8007dc4 <vPortEnterCritical>
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006546:	b25b      	sxtb	r3, r3
 8006548:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800654c:	d103      	bne.n	8006556 <vQueueWaitForMessageRestricted+0x2a>
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800655c:	b25b      	sxtb	r3, r3
 800655e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006562:	d103      	bne.n	800656c <vQueueWaitForMessageRestricted+0x40>
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	2200      	movs	r2, #0
 8006568:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800656c:	f001 fc5a 	bl	8007e24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006574:	2b00      	cmp	r3, #0
 8006576:	d106      	bne.n	8006586 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	3324      	adds	r3, #36	; 0x24
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	68b9      	ldr	r1, [r7, #8]
 8006580:	4618      	mov	r0, r3
 8006582:	f000 fcd7 	bl	8006f34 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006586:	6978      	ldr	r0, [r7, #20]
 8006588:	f7ff ff26 	bl	80063d8 <prvUnlockQueue>
	}
 800658c:	bf00      	nop
 800658e:	3718      	adds	r7, #24
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006594:	b580      	push	{r7, lr}
 8006596:	b08e      	sub	sp, #56	; 0x38
 8006598:	af04      	add	r7, sp, #16
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	607a      	str	r2, [r7, #4]
 80065a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80065a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d10a      	bne.n	80065be <xTaskCreateStatic+0x2a>
	__asm volatile
 80065a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ac:	f383 8811 	msr	BASEPRI, r3
 80065b0:	f3bf 8f6f 	isb	sy
 80065b4:	f3bf 8f4f 	dsb	sy
 80065b8:	623b      	str	r3, [r7, #32]
}
 80065ba:	bf00      	nop
 80065bc:	e7fe      	b.n	80065bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80065be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d10a      	bne.n	80065da <xTaskCreateStatic+0x46>
	__asm volatile
 80065c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c8:	f383 8811 	msr	BASEPRI, r3
 80065cc:	f3bf 8f6f 	isb	sy
 80065d0:	f3bf 8f4f 	dsb	sy
 80065d4:	61fb      	str	r3, [r7, #28]
}
 80065d6:	bf00      	nop
 80065d8:	e7fe      	b.n	80065d8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80065da:	23bc      	movs	r3, #188	; 0xbc
 80065dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	2bbc      	cmp	r3, #188	; 0xbc
 80065e2:	d00a      	beq.n	80065fa <xTaskCreateStatic+0x66>
	__asm volatile
 80065e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e8:	f383 8811 	msr	BASEPRI, r3
 80065ec:	f3bf 8f6f 	isb	sy
 80065f0:	f3bf 8f4f 	dsb	sy
 80065f4:	61bb      	str	r3, [r7, #24]
}
 80065f6:	bf00      	nop
 80065f8:	e7fe      	b.n	80065f8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80065fa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80065fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d01e      	beq.n	8006640 <xTaskCreateStatic+0xac>
 8006602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006604:	2b00      	cmp	r3, #0
 8006606:	d01b      	beq.n	8006640 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800660a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800660c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006610:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006614:	2202      	movs	r2, #2
 8006616:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800661a:	2300      	movs	r3, #0
 800661c:	9303      	str	r3, [sp, #12]
 800661e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006620:	9302      	str	r3, [sp, #8]
 8006622:	f107 0314 	add.w	r3, r7, #20
 8006626:	9301      	str	r3, [sp, #4]
 8006628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662a:	9300      	str	r3, [sp, #0]
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	68b9      	ldr	r1, [r7, #8]
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f000 f850 	bl	80066d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006638:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800663a:	f000 f8f3 	bl	8006824 <prvAddNewTaskToReadyList>
 800663e:	e001      	b.n	8006644 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006640:	2300      	movs	r3, #0
 8006642:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006644:	697b      	ldr	r3, [r7, #20]
	}
 8006646:	4618      	mov	r0, r3
 8006648:	3728      	adds	r7, #40	; 0x28
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800664e:	b580      	push	{r7, lr}
 8006650:	b08c      	sub	sp, #48	; 0x30
 8006652:	af04      	add	r7, sp, #16
 8006654:	60f8      	str	r0, [r7, #12]
 8006656:	60b9      	str	r1, [r7, #8]
 8006658:	603b      	str	r3, [r7, #0]
 800665a:	4613      	mov	r3, r2
 800665c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800665e:	88fb      	ldrh	r3, [r7, #6]
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	4618      	mov	r0, r3
 8006664:	f001 fcd0 	bl	8008008 <pvPortMalloc>
 8006668:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00e      	beq.n	800668e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006670:	20bc      	movs	r0, #188	; 0xbc
 8006672:	f001 fcc9 	bl	8008008 <pvPortMalloc>
 8006676:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d003      	beq.n	8006686 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	697a      	ldr	r2, [r7, #20]
 8006682:	631a      	str	r2, [r3, #48]	; 0x30
 8006684:	e005      	b.n	8006692 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006686:	6978      	ldr	r0, [r7, #20]
 8006688:	f001 fd8a 	bl	80081a0 <vPortFree>
 800668c:	e001      	b.n	8006692 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800668e:	2300      	movs	r3, #0
 8006690:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d017      	beq.n	80066c8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80066a0:	88fa      	ldrh	r2, [r7, #6]
 80066a2:	2300      	movs	r3, #0
 80066a4:	9303      	str	r3, [sp, #12]
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	9302      	str	r3, [sp, #8]
 80066aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ac:	9301      	str	r3, [sp, #4]
 80066ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b0:	9300      	str	r3, [sp, #0]
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	68b9      	ldr	r1, [r7, #8]
 80066b6:	68f8      	ldr	r0, [r7, #12]
 80066b8:	f000 f80e 	bl	80066d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066bc:	69f8      	ldr	r0, [r7, #28]
 80066be:	f000 f8b1 	bl	8006824 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80066c2:	2301      	movs	r3, #1
 80066c4:	61bb      	str	r3, [r7, #24]
 80066c6:	e002      	b.n	80066ce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80066c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80066ce:	69bb      	ldr	r3, [r7, #24]
	}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3720      	adds	r7, #32
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b088      	sub	sp, #32
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]
 80066e4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80066e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	461a      	mov	r2, r3
 80066f0:	21a5      	movs	r1, #165	; 0xa5
 80066f2:	f001 fea7 	bl	8008444 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80066f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006700:	3b01      	subs	r3, #1
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	4413      	add	r3, r2
 8006706:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	f023 0307 	bic.w	r3, r3, #7
 800670e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	f003 0307 	and.w	r3, r3, #7
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00a      	beq.n	8006730 <prvInitialiseNewTask+0x58>
	__asm volatile
 800671a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671e:	f383 8811 	msr	BASEPRI, r3
 8006722:	f3bf 8f6f 	isb	sy
 8006726:	f3bf 8f4f 	dsb	sy
 800672a:	617b      	str	r3, [r7, #20]
}
 800672c:	bf00      	nop
 800672e:	e7fe      	b.n	800672e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d01f      	beq.n	8006776 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006736:	2300      	movs	r3, #0
 8006738:	61fb      	str	r3, [r7, #28]
 800673a:	e012      	b.n	8006762 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800673c:	68ba      	ldr	r2, [r7, #8]
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	4413      	add	r3, r2
 8006742:	7819      	ldrb	r1, [r3, #0]
 8006744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	4413      	add	r3, r2
 800674a:	3334      	adds	r3, #52	; 0x34
 800674c:	460a      	mov	r2, r1
 800674e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006750:	68ba      	ldr	r2, [r7, #8]
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	4413      	add	r3, r2
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d006      	beq.n	800676a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	3301      	adds	r3, #1
 8006760:	61fb      	str	r3, [r7, #28]
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	2b0f      	cmp	r3, #15
 8006766:	d9e9      	bls.n	800673c <prvInitialiseNewTask+0x64>
 8006768:	e000      	b.n	800676c <prvInitialiseNewTask+0x94>
			{
				break;
 800676a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800676c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676e:	2200      	movs	r2, #0
 8006770:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006774:	e003      	b.n	800677e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006778:	2200      	movs	r2, #0
 800677a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800677e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006780:	2b37      	cmp	r3, #55	; 0x37
 8006782:	d901      	bls.n	8006788 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006784:	2337      	movs	r3, #55	; 0x37
 8006786:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800678c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800678e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006790:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006792:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006796:	2200      	movs	r2, #0
 8006798:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800679a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679c:	3304      	adds	r3, #4
 800679e:	4618      	mov	r0, r3
 80067a0:	f7ff f978 	bl	8005a94 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80067a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a6:	3318      	adds	r3, #24
 80067a8:	4618      	mov	r0, r3
 80067aa:	f7ff f973 	bl	8005a94 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80067ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80067ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80067be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80067c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c6:	2200      	movs	r2, #0
 80067c8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80067cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80067d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d6:	3354      	adds	r3, #84	; 0x54
 80067d8:	2260      	movs	r2, #96	; 0x60
 80067da:	2100      	movs	r1, #0
 80067dc:	4618      	mov	r0, r3
 80067de:	f001 fe31 	bl	8008444 <memset>
 80067e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e4:	4a0c      	ldr	r2, [pc, #48]	; (8006818 <prvInitialiseNewTask+0x140>)
 80067e6:	659a      	str	r2, [r3, #88]	; 0x58
 80067e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ea:	4a0c      	ldr	r2, [pc, #48]	; (800681c <prvInitialiseNewTask+0x144>)
 80067ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80067ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f0:	4a0b      	ldr	r2, [pc, #44]	; (8006820 <prvInitialiseNewTask+0x148>)
 80067f2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80067f4:	683a      	ldr	r2, [r7, #0]
 80067f6:	68f9      	ldr	r1, [r7, #12]
 80067f8:	69b8      	ldr	r0, [r7, #24]
 80067fa:	f001 f9b9 	bl	8007b70 <pxPortInitialiseStack>
 80067fe:	4602      	mov	r2, r0
 8006800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006802:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006806:	2b00      	cmp	r3, #0
 8006808:	d002      	beq.n	8006810 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800680a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800680e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006810:	bf00      	nop
 8006812:	3720      	adds	r7, #32
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	08008704 	.word	0x08008704
 800681c:	08008724 	.word	0x08008724
 8006820:	080086e4 	.word	0x080086e4

08006824 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b082      	sub	sp, #8
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800682c:	f001 faca 	bl	8007dc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006830:	4b2d      	ldr	r3, [pc, #180]	; (80068e8 <prvAddNewTaskToReadyList+0xc4>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	3301      	adds	r3, #1
 8006836:	4a2c      	ldr	r2, [pc, #176]	; (80068e8 <prvAddNewTaskToReadyList+0xc4>)
 8006838:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800683a:	4b2c      	ldr	r3, [pc, #176]	; (80068ec <prvAddNewTaskToReadyList+0xc8>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d109      	bne.n	8006856 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006842:	4a2a      	ldr	r2, [pc, #168]	; (80068ec <prvAddNewTaskToReadyList+0xc8>)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006848:	4b27      	ldr	r3, [pc, #156]	; (80068e8 <prvAddNewTaskToReadyList+0xc4>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d110      	bne.n	8006872 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006850:	f000 fc9e 	bl	8007190 <prvInitialiseTaskLists>
 8006854:	e00d      	b.n	8006872 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006856:	4b26      	ldr	r3, [pc, #152]	; (80068f0 <prvAddNewTaskToReadyList+0xcc>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d109      	bne.n	8006872 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800685e:	4b23      	ldr	r3, [pc, #140]	; (80068ec <prvAddNewTaskToReadyList+0xc8>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006868:	429a      	cmp	r2, r3
 800686a:	d802      	bhi.n	8006872 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800686c:	4a1f      	ldr	r2, [pc, #124]	; (80068ec <prvAddNewTaskToReadyList+0xc8>)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006872:	4b20      	ldr	r3, [pc, #128]	; (80068f4 <prvAddNewTaskToReadyList+0xd0>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	3301      	adds	r3, #1
 8006878:	4a1e      	ldr	r2, [pc, #120]	; (80068f4 <prvAddNewTaskToReadyList+0xd0>)
 800687a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800687c:	4b1d      	ldr	r3, [pc, #116]	; (80068f4 <prvAddNewTaskToReadyList+0xd0>)
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006888:	4b1b      	ldr	r3, [pc, #108]	; (80068f8 <prvAddNewTaskToReadyList+0xd4>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	429a      	cmp	r2, r3
 800688e:	d903      	bls.n	8006898 <prvAddNewTaskToReadyList+0x74>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006894:	4a18      	ldr	r2, [pc, #96]	; (80068f8 <prvAddNewTaskToReadyList+0xd4>)
 8006896:	6013      	str	r3, [r2, #0]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800689c:	4613      	mov	r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	4413      	add	r3, r2
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4a15      	ldr	r2, [pc, #84]	; (80068fc <prvAddNewTaskToReadyList+0xd8>)
 80068a6:	441a      	add	r2, r3
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	3304      	adds	r3, #4
 80068ac:	4619      	mov	r1, r3
 80068ae:	4610      	mov	r0, r2
 80068b0:	f7ff f8fd 	bl	8005aae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80068b4:	f001 fab6 	bl	8007e24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80068b8:	4b0d      	ldr	r3, [pc, #52]	; (80068f0 <prvAddNewTaskToReadyList+0xcc>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d00e      	beq.n	80068de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80068c0:	4b0a      	ldr	r3, [pc, #40]	; (80068ec <prvAddNewTaskToReadyList+0xc8>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d207      	bcs.n	80068de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80068ce:	4b0c      	ldr	r3, [pc, #48]	; (8006900 <prvAddNewTaskToReadyList+0xdc>)
 80068d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068d4:	601a      	str	r2, [r3, #0]
 80068d6:	f3bf 8f4f 	dsb	sy
 80068da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068de:	bf00      	nop
 80068e0:	3708      	adds	r7, #8
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	20001018 	.word	0x20001018
 80068ec:	20000b44 	.word	0x20000b44
 80068f0:	20001024 	.word	0x20001024
 80068f4:	20001034 	.word	0x20001034
 80068f8:	20001020 	.word	0x20001020
 80068fc:	20000b48 	.word	0x20000b48
 8006900:	e000ed04 	.word	0xe000ed04

08006904 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800690c:	2300      	movs	r3, #0
 800690e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d017      	beq.n	8006946 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006916:	4b13      	ldr	r3, [pc, #76]	; (8006964 <vTaskDelay+0x60>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00a      	beq.n	8006934 <vTaskDelay+0x30>
	__asm volatile
 800691e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006922:	f383 8811 	msr	BASEPRI, r3
 8006926:	f3bf 8f6f 	isb	sy
 800692a:	f3bf 8f4f 	dsb	sy
 800692e:	60bb      	str	r3, [r7, #8]
}
 8006930:	bf00      	nop
 8006932:	e7fe      	b.n	8006932 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006934:	f000 f900 	bl	8006b38 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006938:	2100      	movs	r1, #0
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 fd76 	bl	800742c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006940:	f000 f908 	bl	8006b54 <xTaskResumeAll>
 8006944:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d107      	bne.n	800695c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800694c:	4b06      	ldr	r3, [pc, #24]	; (8006968 <vTaskDelay+0x64>)
 800694e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006952:	601a      	str	r2, [r3, #0]
 8006954:	f3bf 8f4f 	dsb	sy
 8006958:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800695c:	bf00      	nop
 800695e:	3710      	adds	r7, #16
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	20001040 	.word	0x20001040
 8006968:	e000ed04 	.word	0xe000ed04

0800696c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006974:	f001 fa26 	bl	8007dc4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d102      	bne.n	8006984 <vTaskSuspend+0x18>
 800697e:	4b30      	ldr	r3, [pc, #192]	; (8006a40 <vTaskSuspend+0xd4>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	e000      	b.n	8006986 <vTaskSuspend+0x1a>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	3304      	adds	r3, #4
 800698c:	4618      	mov	r0, r3
 800698e:	f7ff f8eb 	bl	8005b68 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006996:	2b00      	cmp	r3, #0
 8006998:	d004      	beq.n	80069a4 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	3318      	adds	r3, #24
 800699e:	4618      	mov	r0, r3
 80069a0:	f7ff f8e2 	bl	8005b68 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	3304      	adds	r3, #4
 80069a8:	4619      	mov	r1, r3
 80069aa:	4826      	ldr	r0, [pc, #152]	; (8006a44 <vTaskSuspend+0xd8>)
 80069ac:	f7ff f87f 	bl	8005aae <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d103      	bne.n	80069c4 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80069c4:	f001 fa2e 	bl	8007e24 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80069c8:	4b1f      	ldr	r3, [pc, #124]	; (8006a48 <vTaskSuspend+0xdc>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d005      	beq.n	80069dc <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80069d0:	f001 f9f8 	bl	8007dc4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80069d4:	f000 fc7e 	bl	80072d4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80069d8:	f001 fa24 	bl	8007e24 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80069dc:	4b18      	ldr	r3, [pc, #96]	; (8006a40 <vTaskSuspend+0xd4>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d127      	bne.n	8006a36 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 80069e6:	4b18      	ldr	r3, [pc, #96]	; (8006a48 <vTaskSuspend+0xdc>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d017      	beq.n	8006a1e <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80069ee:	4b17      	ldr	r3, [pc, #92]	; (8006a4c <vTaskSuspend+0xe0>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00a      	beq.n	8006a0c <vTaskSuspend+0xa0>
	__asm volatile
 80069f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fa:	f383 8811 	msr	BASEPRI, r3
 80069fe:	f3bf 8f6f 	isb	sy
 8006a02:	f3bf 8f4f 	dsb	sy
 8006a06:	60bb      	str	r3, [r7, #8]
}
 8006a08:	bf00      	nop
 8006a0a:	e7fe      	b.n	8006a0a <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8006a0c:	4b10      	ldr	r3, [pc, #64]	; (8006a50 <vTaskSuspend+0xe4>)
 8006a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a12:	601a      	str	r2, [r3, #0]
 8006a14:	f3bf 8f4f 	dsb	sy
 8006a18:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a1c:	e00b      	b.n	8006a36 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8006a1e:	4b09      	ldr	r3, [pc, #36]	; (8006a44 <vTaskSuspend+0xd8>)
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	4b0c      	ldr	r3, [pc, #48]	; (8006a54 <vTaskSuspend+0xe8>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d103      	bne.n	8006a32 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8006a2a:	4b05      	ldr	r3, [pc, #20]	; (8006a40 <vTaskSuspend+0xd4>)
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	601a      	str	r2, [r3, #0]
	}
 8006a30:	e001      	b.n	8006a36 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8006a32:	f000 f9f7 	bl	8006e24 <vTaskSwitchContext>
	}
 8006a36:	bf00      	nop
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	20000b44 	.word	0x20000b44
 8006a44:	20001004 	.word	0x20001004
 8006a48:	20001024 	.word	0x20001024
 8006a4c:	20001040 	.word	0x20001040
 8006a50:	e000ed04 	.word	0xe000ed04
 8006a54:	20001018 	.word	0x20001018

08006a58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b08a      	sub	sp, #40	; 0x28
 8006a5c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006a62:	2300      	movs	r3, #0
 8006a64:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006a66:	463a      	mov	r2, r7
 8006a68:	1d39      	adds	r1, r7, #4
 8006a6a:	f107 0308 	add.w	r3, r7, #8
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f7fe ffbc 	bl	80059ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006a74:	6839      	ldr	r1, [r7, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	68ba      	ldr	r2, [r7, #8]
 8006a7a:	9202      	str	r2, [sp, #8]
 8006a7c:	9301      	str	r3, [sp, #4]
 8006a7e:	2300      	movs	r3, #0
 8006a80:	9300      	str	r3, [sp, #0]
 8006a82:	2300      	movs	r3, #0
 8006a84:	460a      	mov	r2, r1
 8006a86:	4924      	ldr	r1, [pc, #144]	; (8006b18 <vTaskStartScheduler+0xc0>)
 8006a88:	4824      	ldr	r0, [pc, #144]	; (8006b1c <vTaskStartScheduler+0xc4>)
 8006a8a:	f7ff fd83 	bl	8006594 <xTaskCreateStatic>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	4a23      	ldr	r2, [pc, #140]	; (8006b20 <vTaskStartScheduler+0xc8>)
 8006a92:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006a94:	4b22      	ldr	r3, [pc, #136]	; (8006b20 <vTaskStartScheduler+0xc8>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d002      	beq.n	8006aa2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	617b      	str	r3, [r7, #20]
 8006aa0:	e001      	b.n	8006aa6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d102      	bne.n	8006ab2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006aac:	f000 fd12 	bl	80074d4 <xTimerCreateTimerTask>
 8006ab0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d11b      	bne.n	8006af0 <vTaskStartScheduler+0x98>
	__asm volatile
 8006ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006abc:	f383 8811 	msr	BASEPRI, r3
 8006ac0:	f3bf 8f6f 	isb	sy
 8006ac4:	f3bf 8f4f 	dsb	sy
 8006ac8:	613b      	str	r3, [r7, #16]
}
 8006aca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006acc:	4b15      	ldr	r3, [pc, #84]	; (8006b24 <vTaskStartScheduler+0xcc>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	3354      	adds	r3, #84	; 0x54
 8006ad2:	4a15      	ldr	r2, [pc, #84]	; (8006b28 <vTaskStartScheduler+0xd0>)
 8006ad4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006ad6:	4b15      	ldr	r3, [pc, #84]	; (8006b2c <vTaskStartScheduler+0xd4>)
 8006ad8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006adc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006ade:	4b14      	ldr	r3, [pc, #80]	; (8006b30 <vTaskStartScheduler+0xd8>)
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006ae4:	4b13      	ldr	r3, [pc, #76]	; (8006b34 <vTaskStartScheduler+0xdc>)
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006aea:	f001 f8c9 	bl	8007c80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006aee:	e00e      	b.n	8006b0e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006af6:	d10a      	bne.n	8006b0e <vTaskStartScheduler+0xb6>
	__asm volatile
 8006af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afc:	f383 8811 	msr	BASEPRI, r3
 8006b00:	f3bf 8f6f 	isb	sy
 8006b04:	f3bf 8f4f 	dsb	sy
 8006b08:	60fb      	str	r3, [r7, #12]
}
 8006b0a:	bf00      	nop
 8006b0c:	e7fe      	b.n	8006b0c <vTaskStartScheduler+0xb4>
}
 8006b0e:	bf00      	nop
 8006b10:	3718      	adds	r7, #24
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	08008614 	.word	0x08008614
 8006b1c:	0800715d 	.word	0x0800715d
 8006b20:	2000103c 	.word	0x2000103c
 8006b24:	20000b44 	.word	0x20000b44
 8006b28:	20000010 	.word	0x20000010
 8006b2c:	20001038 	.word	0x20001038
 8006b30:	20001024 	.word	0x20001024
 8006b34:	2000101c 	.word	0x2000101c

08006b38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006b38:	b480      	push	{r7}
 8006b3a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006b3c:	4b04      	ldr	r3, [pc, #16]	; (8006b50 <vTaskSuspendAll+0x18>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	3301      	adds	r3, #1
 8006b42:	4a03      	ldr	r2, [pc, #12]	; (8006b50 <vTaskSuspendAll+0x18>)
 8006b44:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006b46:	bf00      	nop
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr
 8006b50:	20001040 	.word	0x20001040

08006b54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006b62:	4b42      	ldr	r3, [pc, #264]	; (8006c6c <xTaskResumeAll+0x118>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d10a      	bne.n	8006b80 <xTaskResumeAll+0x2c>
	__asm volatile
 8006b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6e:	f383 8811 	msr	BASEPRI, r3
 8006b72:	f3bf 8f6f 	isb	sy
 8006b76:	f3bf 8f4f 	dsb	sy
 8006b7a:	603b      	str	r3, [r7, #0]
}
 8006b7c:	bf00      	nop
 8006b7e:	e7fe      	b.n	8006b7e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006b80:	f001 f920 	bl	8007dc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006b84:	4b39      	ldr	r3, [pc, #228]	; (8006c6c <xTaskResumeAll+0x118>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	4a38      	ldr	r2, [pc, #224]	; (8006c6c <xTaskResumeAll+0x118>)
 8006b8c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b8e:	4b37      	ldr	r3, [pc, #220]	; (8006c6c <xTaskResumeAll+0x118>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d162      	bne.n	8006c5c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006b96:	4b36      	ldr	r3, [pc, #216]	; (8006c70 <xTaskResumeAll+0x11c>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d05e      	beq.n	8006c5c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b9e:	e02f      	b.n	8006c00 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ba0:	4b34      	ldr	r3, [pc, #208]	; (8006c74 <xTaskResumeAll+0x120>)
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	3318      	adds	r3, #24
 8006bac:	4618      	mov	r0, r3
 8006bae:	f7fe ffdb 	bl	8005b68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	3304      	adds	r3, #4
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7fe ffd6 	bl	8005b68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bc0:	4b2d      	ldr	r3, [pc, #180]	; (8006c78 <xTaskResumeAll+0x124>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d903      	bls.n	8006bd0 <xTaskResumeAll+0x7c>
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bcc:	4a2a      	ldr	r2, [pc, #168]	; (8006c78 <xTaskResumeAll+0x124>)
 8006bce:	6013      	str	r3, [r2, #0]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	4413      	add	r3, r2
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	4a27      	ldr	r2, [pc, #156]	; (8006c7c <xTaskResumeAll+0x128>)
 8006bde:	441a      	add	r2, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	3304      	adds	r3, #4
 8006be4:	4619      	mov	r1, r3
 8006be6:	4610      	mov	r0, r2
 8006be8:	f7fe ff61 	bl	8005aae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bf0:	4b23      	ldr	r3, [pc, #140]	; (8006c80 <xTaskResumeAll+0x12c>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d302      	bcc.n	8006c00 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006bfa:	4b22      	ldr	r3, [pc, #136]	; (8006c84 <xTaskResumeAll+0x130>)
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c00:	4b1c      	ldr	r3, [pc, #112]	; (8006c74 <xTaskResumeAll+0x120>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d1cb      	bne.n	8006ba0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d001      	beq.n	8006c12 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006c0e:	f000 fb61 	bl	80072d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006c12:	4b1d      	ldr	r3, [pc, #116]	; (8006c88 <xTaskResumeAll+0x134>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d010      	beq.n	8006c40 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006c1e:	f000 f847 	bl	8006cb0 <xTaskIncrementTick>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d002      	beq.n	8006c2e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006c28:	4b16      	ldr	r3, [pc, #88]	; (8006c84 <xTaskResumeAll+0x130>)
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	3b01      	subs	r3, #1
 8006c32:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d1f1      	bne.n	8006c1e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006c3a:	4b13      	ldr	r3, [pc, #76]	; (8006c88 <xTaskResumeAll+0x134>)
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006c40:	4b10      	ldr	r3, [pc, #64]	; (8006c84 <xTaskResumeAll+0x130>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d009      	beq.n	8006c5c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006c4c:	4b0f      	ldr	r3, [pc, #60]	; (8006c8c <xTaskResumeAll+0x138>)
 8006c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c52:	601a      	str	r2, [r3, #0]
 8006c54:	f3bf 8f4f 	dsb	sy
 8006c58:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c5c:	f001 f8e2 	bl	8007e24 <vPortExitCritical>

	return xAlreadyYielded;
 8006c60:	68bb      	ldr	r3, [r7, #8]
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	20001040 	.word	0x20001040
 8006c70:	20001018 	.word	0x20001018
 8006c74:	20000fd8 	.word	0x20000fd8
 8006c78:	20001020 	.word	0x20001020
 8006c7c:	20000b48 	.word	0x20000b48
 8006c80:	20000b44 	.word	0x20000b44
 8006c84:	2000102c 	.word	0x2000102c
 8006c88:	20001028 	.word	0x20001028
 8006c8c:	e000ed04 	.word	0xe000ed04

08006c90 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006c96:	4b05      	ldr	r3, [pc, #20]	; (8006cac <xTaskGetTickCount+0x1c>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006c9c:	687b      	ldr	r3, [r7, #4]
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	370c      	adds	r7, #12
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	2000101c 	.word	0x2000101c

08006cb0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b086      	sub	sp, #24
 8006cb4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cba:	4b4f      	ldr	r3, [pc, #316]	; (8006df8 <xTaskIncrementTick+0x148>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	f040 808f 	bne.w	8006de2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006cc4:	4b4d      	ldr	r3, [pc, #308]	; (8006dfc <xTaskIncrementTick+0x14c>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	3301      	adds	r3, #1
 8006cca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006ccc:	4a4b      	ldr	r2, [pc, #300]	; (8006dfc <xTaskIncrementTick+0x14c>)
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d120      	bne.n	8006d1a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006cd8:	4b49      	ldr	r3, [pc, #292]	; (8006e00 <xTaskIncrementTick+0x150>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00a      	beq.n	8006cf8 <xTaskIncrementTick+0x48>
	__asm volatile
 8006ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce6:	f383 8811 	msr	BASEPRI, r3
 8006cea:	f3bf 8f6f 	isb	sy
 8006cee:	f3bf 8f4f 	dsb	sy
 8006cf2:	603b      	str	r3, [r7, #0]
}
 8006cf4:	bf00      	nop
 8006cf6:	e7fe      	b.n	8006cf6 <xTaskIncrementTick+0x46>
 8006cf8:	4b41      	ldr	r3, [pc, #260]	; (8006e00 <xTaskIncrementTick+0x150>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	60fb      	str	r3, [r7, #12]
 8006cfe:	4b41      	ldr	r3, [pc, #260]	; (8006e04 <xTaskIncrementTick+0x154>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a3f      	ldr	r2, [pc, #252]	; (8006e00 <xTaskIncrementTick+0x150>)
 8006d04:	6013      	str	r3, [r2, #0]
 8006d06:	4a3f      	ldr	r2, [pc, #252]	; (8006e04 <xTaskIncrementTick+0x154>)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6013      	str	r3, [r2, #0]
 8006d0c:	4b3e      	ldr	r3, [pc, #248]	; (8006e08 <xTaskIncrementTick+0x158>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	3301      	adds	r3, #1
 8006d12:	4a3d      	ldr	r2, [pc, #244]	; (8006e08 <xTaskIncrementTick+0x158>)
 8006d14:	6013      	str	r3, [r2, #0]
 8006d16:	f000 fadd 	bl	80072d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006d1a:	4b3c      	ldr	r3, [pc, #240]	; (8006e0c <xTaskIncrementTick+0x15c>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	693a      	ldr	r2, [r7, #16]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d349      	bcc.n	8006db8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d24:	4b36      	ldr	r3, [pc, #216]	; (8006e00 <xTaskIncrementTick+0x150>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d104      	bne.n	8006d38 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d2e:	4b37      	ldr	r3, [pc, #220]	; (8006e0c <xTaskIncrementTick+0x15c>)
 8006d30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d34:	601a      	str	r2, [r3, #0]
					break;
 8006d36:	e03f      	b.n	8006db8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d38:	4b31      	ldr	r3, [pc, #196]	; (8006e00 <xTaskIncrementTick+0x150>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006d48:	693a      	ldr	r2, [r7, #16]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d203      	bcs.n	8006d58 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006d50:	4a2e      	ldr	r2, [pc, #184]	; (8006e0c <xTaskIncrementTick+0x15c>)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006d56:	e02f      	b.n	8006db8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	3304      	adds	r3, #4
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f7fe ff03 	bl	8005b68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d004      	beq.n	8006d74 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	3318      	adds	r3, #24
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7fe fefa 	bl	8005b68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d78:	4b25      	ldr	r3, [pc, #148]	; (8006e10 <xTaskIncrementTick+0x160>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d903      	bls.n	8006d88 <xTaskIncrementTick+0xd8>
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d84:	4a22      	ldr	r2, [pc, #136]	; (8006e10 <xTaskIncrementTick+0x160>)
 8006d86:	6013      	str	r3, [r2, #0]
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	4413      	add	r3, r2
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	4a1f      	ldr	r2, [pc, #124]	; (8006e14 <xTaskIncrementTick+0x164>)
 8006d96:	441a      	add	r2, r3
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	3304      	adds	r3, #4
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	4610      	mov	r0, r2
 8006da0:	f7fe fe85 	bl	8005aae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006da8:	4b1b      	ldr	r3, [pc, #108]	; (8006e18 <xTaskIncrementTick+0x168>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d3b8      	bcc.n	8006d24 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006db2:	2301      	movs	r3, #1
 8006db4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006db6:	e7b5      	b.n	8006d24 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006db8:	4b17      	ldr	r3, [pc, #92]	; (8006e18 <xTaskIncrementTick+0x168>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dbe:	4915      	ldr	r1, [pc, #84]	; (8006e14 <xTaskIncrementTick+0x164>)
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	4413      	add	r3, r2
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	440b      	add	r3, r1
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d901      	bls.n	8006dd4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006dd4:	4b11      	ldr	r3, [pc, #68]	; (8006e1c <xTaskIncrementTick+0x16c>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d007      	beq.n	8006dec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	617b      	str	r3, [r7, #20]
 8006de0:	e004      	b.n	8006dec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006de2:	4b0f      	ldr	r3, [pc, #60]	; (8006e20 <xTaskIncrementTick+0x170>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	3301      	adds	r3, #1
 8006de8:	4a0d      	ldr	r2, [pc, #52]	; (8006e20 <xTaskIncrementTick+0x170>)
 8006dea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006dec:	697b      	ldr	r3, [r7, #20]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3718      	adds	r7, #24
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	20001040 	.word	0x20001040
 8006dfc:	2000101c 	.word	0x2000101c
 8006e00:	20000fd0 	.word	0x20000fd0
 8006e04:	20000fd4 	.word	0x20000fd4
 8006e08:	20001030 	.word	0x20001030
 8006e0c:	20001038 	.word	0x20001038
 8006e10:	20001020 	.word	0x20001020
 8006e14:	20000b48 	.word	0x20000b48
 8006e18:	20000b44 	.word	0x20000b44
 8006e1c:	2000102c 	.word	0x2000102c
 8006e20:	20001028 	.word	0x20001028

08006e24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006e24:	b480      	push	{r7}
 8006e26:	b085      	sub	sp, #20
 8006e28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006e2a:	4b2a      	ldr	r3, [pc, #168]	; (8006ed4 <vTaskSwitchContext+0xb0>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d003      	beq.n	8006e3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006e32:	4b29      	ldr	r3, [pc, #164]	; (8006ed8 <vTaskSwitchContext+0xb4>)
 8006e34:	2201      	movs	r2, #1
 8006e36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006e38:	e046      	b.n	8006ec8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006e3a:	4b27      	ldr	r3, [pc, #156]	; (8006ed8 <vTaskSwitchContext+0xb4>)
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e40:	4b26      	ldr	r3, [pc, #152]	; (8006edc <vTaskSwitchContext+0xb8>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	60fb      	str	r3, [r7, #12]
 8006e46:	e010      	b.n	8006e6a <vTaskSwitchContext+0x46>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d10a      	bne.n	8006e64 <vTaskSwitchContext+0x40>
	__asm volatile
 8006e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e52:	f383 8811 	msr	BASEPRI, r3
 8006e56:	f3bf 8f6f 	isb	sy
 8006e5a:	f3bf 8f4f 	dsb	sy
 8006e5e:	607b      	str	r3, [r7, #4]
}
 8006e60:	bf00      	nop
 8006e62:	e7fe      	b.n	8006e62 <vTaskSwitchContext+0x3e>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	3b01      	subs	r3, #1
 8006e68:	60fb      	str	r3, [r7, #12]
 8006e6a:	491d      	ldr	r1, [pc, #116]	; (8006ee0 <vTaskSwitchContext+0xbc>)
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	4613      	mov	r3, r2
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	4413      	add	r3, r2
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	440b      	add	r3, r1
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d0e4      	beq.n	8006e48 <vTaskSwitchContext+0x24>
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	4613      	mov	r3, r2
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	4413      	add	r3, r2
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	4a15      	ldr	r2, [pc, #84]	; (8006ee0 <vTaskSwitchContext+0xbc>)
 8006e8a:	4413      	add	r3, r2
 8006e8c:	60bb      	str	r3, [r7, #8]
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	685a      	ldr	r2, [r3, #4]
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	605a      	str	r2, [r3, #4]
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	685a      	ldr	r2, [r3, #4]
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	3308      	adds	r3, #8
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d104      	bne.n	8006eae <vTaskSwitchContext+0x8a>
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	685a      	ldr	r2, [r3, #4]
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	605a      	str	r2, [r3, #4]
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	4a0b      	ldr	r2, [pc, #44]	; (8006ee4 <vTaskSwitchContext+0xc0>)
 8006eb6:	6013      	str	r3, [r2, #0]
 8006eb8:	4a08      	ldr	r2, [pc, #32]	; (8006edc <vTaskSwitchContext+0xb8>)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006ebe:	4b09      	ldr	r3, [pc, #36]	; (8006ee4 <vTaskSwitchContext+0xc0>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	3354      	adds	r3, #84	; 0x54
 8006ec4:	4a08      	ldr	r2, [pc, #32]	; (8006ee8 <vTaskSwitchContext+0xc4>)
 8006ec6:	6013      	str	r3, [r2, #0]
}
 8006ec8:	bf00      	nop
 8006eca:	3714      	adds	r7, #20
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr
 8006ed4:	20001040 	.word	0x20001040
 8006ed8:	2000102c 	.word	0x2000102c
 8006edc:	20001020 	.word	0x20001020
 8006ee0:	20000b48 	.word	0x20000b48
 8006ee4:	20000b44 	.word	0x20000b44
 8006ee8:	20000010 	.word	0x20000010

08006eec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d10a      	bne.n	8006f12 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f00:	f383 8811 	msr	BASEPRI, r3
 8006f04:	f3bf 8f6f 	isb	sy
 8006f08:	f3bf 8f4f 	dsb	sy
 8006f0c:	60fb      	str	r3, [r7, #12]
}
 8006f0e:	bf00      	nop
 8006f10:	e7fe      	b.n	8006f10 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f12:	4b07      	ldr	r3, [pc, #28]	; (8006f30 <vTaskPlaceOnEventList+0x44>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	3318      	adds	r3, #24
 8006f18:	4619      	mov	r1, r3
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f7fe fdeb 	bl	8005af6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006f20:	2101      	movs	r1, #1
 8006f22:	6838      	ldr	r0, [r7, #0]
 8006f24:	f000 fa82 	bl	800742c <prvAddCurrentTaskToDelayedList>
}
 8006f28:	bf00      	nop
 8006f2a:	3710      	adds	r7, #16
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	20000b44 	.word	0x20000b44

08006f34 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b086      	sub	sp, #24
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d10a      	bne.n	8006f5c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4a:	f383 8811 	msr	BASEPRI, r3
 8006f4e:	f3bf 8f6f 	isb	sy
 8006f52:	f3bf 8f4f 	dsb	sy
 8006f56:	617b      	str	r3, [r7, #20]
}
 8006f58:	bf00      	nop
 8006f5a:	e7fe      	b.n	8006f5a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f5c:	4b0a      	ldr	r3, [pc, #40]	; (8006f88 <vTaskPlaceOnEventListRestricted+0x54>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	3318      	adds	r3, #24
 8006f62:	4619      	mov	r1, r3
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	f7fe fda2 	bl	8005aae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d002      	beq.n	8006f76 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006f70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f74:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006f76:	6879      	ldr	r1, [r7, #4]
 8006f78:	68b8      	ldr	r0, [r7, #8]
 8006f7a:	f000 fa57 	bl	800742c <prvAddCurrentTaskToDelayedList>
	}
 8006f7e:	bf00      	nop
 8006f80:	3718      	adds	r7, #24
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	20000b44 	.word	0x20000b44

08006f8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b086      	sub	sp, #24
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d10a      	bne.n	8006fb8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa6:	f383 8811 	msr	BASEPRI, r3
 8006faa:	f3bf 8f6f 	isb	sy
 8006fae:	f3bf 8f4f 	dsb	sy
 8006fb2:	60fb      	str	r3, [r7, #12]
}
 8006fb4:	bf00      	nop
 8006fb6:	e7fe      	b.n	8006fb6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	3318      	adds	r3, #24
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f7fe fdd3 	bl	8005b68 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fc2:	4b1e      	ldr	r3, [pc, #120]	; (800703c <xTaskRemoveFromEventList+0xb0>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d11d      	bne.n	8007006 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	3304      	adds	r3, #4
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f7fe fdca 	bl	8005b68 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fd8:	4b19      	ldr	r3, [pc, #100]	; (8007040 <xTaskRemoveFromEventList+0xb4>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d903      	bls.n	8006fe8 <xTaskRemoveFromEventList+0x5c>
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe4:	4a16      	ldr	r2, [pc, #88]	; (8007040 <xTaskRemoveFromEventList+0xb4>)
 8006fe6:	6013      	str	r3, [r2, #0]
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fec:	4613      	mov	r3, r2
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	4413      	add	r3, r2
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	4a13      	ldr	r2, [pc, #76]	; (8007044 <xTaskRemoveFromEventList+0xb8>)
 8006ff6:	441a      	add	r2, r3
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	3304      	adds	r3, #4
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	4610      	mov	r0, r2
 8007000:	f7fe fd55 	bl	8005aae <vListInsertEnd>
 8007004:	e005      	b.n	8007012 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	3318      	adds	r3, #24
 800700a:	4619      	mov	r1, r3
 800700c:	480e      	ldr	r0, [pc, #56]	; (8007048 <xTaskRemoveFromEventList+0xbc>)
 800700e:	f7fe fd4e 	bl	8005aae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007016:	4b0d      	ldr	r3, [pc, #52]	; (800704c <xTaskRemoveFromEventList+0xc0>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701c:	429a      	cmp	r2, r3
 800701e:	d905      	bls.n	800702c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007020:	2301      	movs	r3, #1
 8007022:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007024:	4b0a      	ldr	r3, [pc, #40]	; (8007050 <xTaskRemoveFromEventList+0xc4>)
 8007026:	2201      	movs	r2, #1
 8007028:	601a      	str	r2, [r3, #0]
 800702a:	e001      	b.n	8007030 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800702c:	2300      	movs	r3, #0
 800702e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007030:	697b      	ldr	r3, [r7, #20]
}
 8007032:	4618      	mov	r0, r3
 8007034:	3718      	adds	r7, #24
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	20001040 	.word	0x20001040
 8007040:	20001020 	.word	0x20001020
 8007044:	20000b48 	.word	0x20000b48
 8007048:	20000fd8 	.word	0x20000fd8
 800704c:	20000b44 	.word	0x20000b44
 8007050:	2000102c 	.word	0x2000102c

08007054 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800705c:	4b06      	ldr	r3, [pc, #24]	; (8007078 <vTaskInternalSetTimeOutState+0x24>)
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007064:	4b05      	ldr	r3, [pc, #20]	; (800707c <vTaskInternalSetTimeOutState+0x28>)
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	605a      	str	r2, [r3, #4]
}
 800706c:	bf00      	nop
 800706e:	370c      	adds	r7, #12
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr
 8007078:	20001030 	.word	0x20001030
 800707c:	2000101c 	.word	0x2000101c

08007080 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b088      	sub	sp, #32
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d10a      	bne.n	80070a6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007094:	f383 8811 	msr	BASEPRI, r3
 8007098:	f3bf 8f6f 	isb	sy
 800709c:	f3bf 8f4f 	dsb	sy
 80070a0:	613b      	str	r3, [r7, #16]
}
 80070a2:	bf00      	nop
 80070a4:	e7fe      	b.n	80070a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d10a      	bne.n	80070c2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80070ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b0:	f383 8811 	msr	BASEPRI, r3
 80070b4:	f3bf 8f6f 	isb	sy
 80070b8:	f3bf 8f4f 	dsb	sy
 80070bc:	60fb      	str	r3, [r7, #12]
}
 80070be:	bf00      	nop
 80070c0:	e7fe      	b.n	80070c0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80070c2:	f000 fe7f 	bl	8007dc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80070c6:	4b1d      	ldr	r3, [pc, #116]	; (800713c <xTaskCheckForTimeOut+0xbc>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	69ba      	ldr	r2, [r7, #24]
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070de:	d102      	bne.n	80070e6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80070e0:	2300      	movs	r3, #0
 80070e2:	61fb      	str	r3, [r7, #28]
 80070e4:	e023      	b.n	800712e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	4b15      	ldr	r3, [pc, #84]	; (8007140 <xTaskCheckForTimeOut+0xc0>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d007      	beq.n	8007102 <xTaskCheckForTimeOut+0x82>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	69ba      	ldr	r2, [r7, #24]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d302      	bcc.n	8007102 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80070fc:	2301      	movs	r3, #1
 80070fe:	61fb      	str	r3, [r7, #28]
 8007100:	e015      	b.n	800712e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	697a      	ldr	r2, [r7, #20]
 8007108:	429a      	cmp	r2, r3
 800710a:	d20b      	bcs.n	8007124 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	1ad2      	subs	r2, r2, r3
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f7ff ff9b 	bl	8007054 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800711e:	2300      	movs	r3, #0
 8007120:	61fb      	str	r3, [r7, #28]
 8007122:	e004      	b.n	800712e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	2200      	movs	r2, #0
 8007128:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800712a:	2301      	movs	r3, #1
 800712c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800712e:	f000 fe79 	bl	8007e24 <vPortExitCritical>

	return xReturn;
 8007132:	69fb      	ldr	r3, [r7, #28]
}
 8007134:	4618      	mov	r0, r3
 8007136:	3720      	adds	r7, #32
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}
 800713c:	2000101c 	.word	0x2000101c
 8007140:	20001030 	.word	0x20001030

08007144 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007144:	b480      	push	{r7}
 8007146:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007148:	4b03      	ldr	r3, [pc, #12]	; (8007158 <vTaskMissedYield+0x14>)
 800714a:	2201      	movs	r2, #1
 800714c:	601a      	str	r2, [r3, #0]
}
 800714e:	bf00      	nop
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr
 8007158:	2000102c 	.word	0x2000102c

0800715c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007164:	f000 f854 	bl	8007210 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007168:	4b07      	ldr	r3, [pc, #28]	; (8007188 <prvIdleTask+0x2c>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2b01      	cmp	r3, #1
 800716e:	d907      	bls.n	8007180 <prvIdleTask+0x24>
			{
				taskYIELD();
 8007170:	4b06      	ldr	r3, [pc, #24]	; (800718c <prvIdleTask+0x30>)
 8007172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007176:	601a      	str	r2, [r3, #0]
 8007178:	f3bf 8f4f 	dsb	sy
 800717c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8007180:	f7f9 fb60 	bl	8000844 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8007184:	e7ee      	b.n	8007164 <prvIdleTask+0x8>
 8007186:	bf00      	nop
 8007188:	20000b48 	.word	0x20000b48
 800718c:	e000ed04 	.word	0xe000ed04

08007190 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007196:	2300      	movs	r3, #0
 8007198:	607b      	str	r3, [r7, #4]
 800719a:	e00c      	b.n	80071b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	4613      	mov	r3, r2
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	4413      	add	r3, r2
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	4a12      	ldr	r2, [pc, #72]	; (80071f0 <prvInitialiseTaskLists+0x60>)
 80071a8:	4413      	add	r3, r2
 80071aa:	4618      	mov	r0, r3
 80071ac:	f7fe fc52 	bl	8005a54 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	3301      	adds	r3, #1
 80071b4:	607b      	str	r3, [r7, #4]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2b37      	cmp	r3, #55	; 0x37
 80071ba:	d9ef      	bls.n	800719c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80071bc:	480d      	ldr	r0, [pc, #52]	; (80071f4 <prvInitialiseTaskLists+0x64>)
 80071be:	f7fe fc49 	bl	8005a54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80071c2:	480d      	ldr	r0, [pc, #52]	; (80071f8 <prvInitialiseTaskLists+0x68>)
 80071c4:	f7fe fc46 	bl	8005a54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80071c8:	480c      	ldr	r0, [pc, #48]	; (80071fc <prvInitialiseTaskLists+0x6c>)
 80071ca:	f7fe fc43 	bl	8005a54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80071ce:	480c      	ldr	r0, [pc, #48]	; (8007200 <prvInitialiseTaskLists+0x70>)
 80071d0:	f7fe fc40 	bl	8005a54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80071d4:	480b      	ldr	r0, [pc, #44]	; (8007204 <prvInitialiseTaskLists+0x74>)
 80071d6:	f7fe fc3d 	bl	8005a54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80071da:	4b0b      	ldr	r3, [pc, #44]	; (8007208 <prvInitialiseTaskLists+0x78>)
 80071dc:	4a05      	ldr	r2, [pc, #20]	; (80071f4 <prvInitialiseTaskLists+0x64>)
 80071de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80071e0:	4b0a      	ldr	r3, [pc, #40]	; (800720c <prvInitialiseTaskLists+0x7c>)
 80071e2:	4a05      	ldr	r2, [pc, #20]	; (80071f8 <prvInitialiseTaskLists+0x68>)
 80071e4:	601a      	str	r2, [r3, #0]
}
 80071e6:	bf00      	nop
 80071e8:	3708      	adds	r7, #8
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	20000b48 	.word	0x20000b48
 80071f4:	20000fa8 	.word	0x20000fa8
 80071f8:	20000fbc 	.word	0x20000fbc
 80071fc:	20000fd8 	.word	0x20000fd8
 8007200:	20000fec 	.word	0x20000fec
 8007204:	20001004 	.word	0x20001004
 8007208:	20000fd0 	.word	0x20000fd0
 800720c:	20000fd4 	.word	0x20000fd4

08007210 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007216:	e019      	b.n	800724c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007218:	f000 fdd4 	bl	8007dc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800721c:	4b10      	ldr	r3, [pc, #64]	; (8007260 <prvCheckTasksWaitingTermination+0x50>)
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	3304      	adds	r3, #4
 8007228:	4618      	mov	r0, r3
 800722a:	f7fe fc9d 	bl	8005b68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800722e:	4b0d      	ldr	r3, [pc, #52]	; (8007264 <prvCheckTasksWaitingTermination+0x54>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	3b01      	subs	r3, #1
 8007234:	4a0b      	ldr	r2, [pc, #44]	; (8007264 <prvCheckTasksWaitingTermination+0x54>)
 8007236:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007238:	4b0b      	ldr	r3, [pc, #44]	; (8007268 <prvCheckTasksWaitingTermination+0x58>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	3b01      	subs	r3, #1
 800723e:	4a0a      	ldr	r2, [pc, #40]	; (8007268 <prvCheckTasksWaitingTermination+0x58>)
 8007240:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007242:	f000 fdef 	bl	8007e24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 f810 	bl	800726c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800724c:	4b06      	ldr	r3, [pc, #24]	; (8007268 <prvCheckTasksWaitingTermination+0x58>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d1e1      	bne.n	8007218 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007254:	bf00      	nop
 8007256:	bf00      	nop
 8007258:	3708      	adds	r7, #8
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	20000fec 	.word	0x20000fec
 8007264:	20001018 	.word	0x20001018
 8007268:	20001000 	.word	0x20001000

0800726c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	3354      	adds	r3, #84	; 0x54
 8007278:	4618      	mov	r0, r3
 800727a:	f001 f8f9 	bl	8008470 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007284:	2b00      	cmp	r3, #0
 8007286:	d108      	bne.n	800729a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800728c:	4618      	mov	r0, r3
 800728e:	f000 ff87 	bl	80081a0 <vPortFree>
				vPortFree( pxTCB );
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 ff84 	bl	80081a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007298:	e018      	b.n	80072cc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d103      	bne.n	80072ac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 ff7b 	bl	80081a0 <vPortFree>
	}
 80072aa:	e00f      	b.n	80072cc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80072b2:	2b02      	cmp	r3, #2
 80072b4:	d00a      	beq.n	80072cc <prvDeleteTCB+0x60>
	__asm volatile
 80072b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ba:	f383 8811 	msr	BASEPRI, r3
 80072be:	f3bf 8f6f 	isb	sy
 80072c2:	f3bf 8f4f 	dsb	sy
 80072c6:	60fb      	str	r3, [r7, #12]
}
 80072c8:	bf00      	nop
 80072ca:	e7fe      	b.n	80072ca <prvDeleteTCB+0x5e>
	}
 80072cc:	bf00      	nop
 80072ce:	3710      	adds	r7, #16
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072da:	4b0c      	ldr	r3, [pc, #48]	; (800730c <prvResetNextTaskUnblockTime+0x38>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d104      	bne.n	80072ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80072e4:	4b0a      	ldr	r3, [pc, #40]	; (8007310 <prvResetNextTaskUnblockTime+0x3c>)
 80072e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80072ec:	e008      	b.n	8007300 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072ee:	4b07      	ldr	r3, [pc, #28]	; (800730c <prvResetNextTaskUnblockTime+0x38>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	4a04      	ldr	r2, [pc, #16]	; (8007310 <prvResetNextTaskUnblockTime+0x3c>)
 80072fe:	6013      	str	r3, [r2, #0]
}
 8007300:	bf00      	nop
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr
 800730c:	20000fd0 	.word	0x20000fd0
 8007310:	20001038 	.word	0x20001038

08007314 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800731a:	4b0b      	ldr	r3, [pc, #44]	; (8007348 <xTaskGetSchedulerState+0x34>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d102      	bne.n	8007328 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007322:	2301      	movs	r3, #1
 8007324:	607b      	str	r3, [r7, #4]
 8007326:	e008      	b.n	800733a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007328:	4b08      	ldr	r3, [pc, #32]	; (800734c <xTaskGetSchedulerState+0x38>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d102      	bne.n	8007336 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007330:	2302      	movs	r3, #2
 8007332:	607b      	str	r3, [r7, #4]
 8007334:	e001      	b.n	800733a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007336:	2300      	movs	r3, #0
 8007338:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800733a:	687b      	ldr	r3, [r7, #4]
	}
 800733c:	4618      	mov	r0, r3
 800733e:	370c      	adds	r7, #12
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr
 8007348:	20001024 	.word	0x20001024
 800734c:	20001040 	.word	0x20001040

08007350 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007350:	b580      	push	{r7, lr}
 8007352:	b086      	sub	sp, #24
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800735c:	2300      	movs	r3, #0
 800735e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d056      	beq.n	8007414 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007366:	4b2e      	ldr	r3, [pc, #184]	; (8007420 <xTaskPriorityDisinherit+0xd0>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	693a      	ldr	r2, [r7, #16]
 800736c:	429a      	cmp	r2, r3
 800736e:	d00a      	beq.n	8007386 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007374:	f383 8811 	msr	BASEPRI, r3
 8007378:	f3bf 8f6f 	isb	sy
 800737c:	f3bf 8f4f 	dsb	sy
 8007380:	60fb      	str	r3, [r7, #12]
}
 8007382:	bf00      	nop
 8007384:	e7fe      	b.n	8007384 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800738a:	2b00      	cmp	r3, #0
 800738c:	d10a      	bne.n	80073a4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800738e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007392:	f383 8811 	msr	BASEPRI, r3
 8007396:	f3bf 8f6f 	isb	sy
 800739a:	f3bf 8f4f 	dsb	sy
 800739e:	60bb      	str	r3, [r7, #8]
}
 80073a0:	bf00      	nop
 80073a2:	e7fe      	b.n	80073a2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073a8:	1e5a      	subs	r2, r3, #1
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d02c      	beq.n	8007414 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d128      	bne.n	8007414 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	3304      	adds	r3, #4
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7fe fbce 	bl	8005b68 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073e4:	4b0f      	ldr	r3, [pc, #60]	; (8007424 <xTaskPriorityDisinherit+0xd4>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d903      	bls.n	80073f4 <xTaskPriorityDisinherit+0xa4>
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f0:	4a0c      	ldr	r2, [pc, #48]	; (8007424 <xTaskPriorityDisinherit+0xd4>)
 80073f2:	6013      	str	r3, [r2, #0]
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073f8:	4613      	mov	r3, r2
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	4413      	add	r3, r2
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	4a09      	ldr	r2, [pc, #36]	; (8007428 <xTaskPriorityDisinherit+0xd8>)
 8007402:	441a      	add	r2, r3
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	3304      	adds	r3, #4
 8007408:	4619      	mov	r1, r3
 800740a:	4610      	mov	r0, r2
 800740c:	f7fe fb4f 	bl	8005aae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007410:	2301      	movs	r3, #1
 8007412:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007414:	697b      	ldr	r3, [r7, #20]
	}
 8007416:	4618      	mov	r0, r3
 8007418:	3718      	adds	r7, #24
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	20000b44 	.word	0x20000b44
 8007424:	20001020 	.word	0x20001020
 8007428:	20000b48 	.word	0x20000b48

0800742c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007436:	4b21      	ldr	r3, [pc, #132]	; (80074bc <prvAddCurrentTaskToDelayedList+0x90>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800743c:	4b20      	ldr	r3, [pc, #128]	; (80074c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	3304      	adds	r3, #4
 8007442:	4618      	mov	r0, r3
 8007444:	f7fe fb90 	bl	8005b68 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800744e:	d10a      	bne.n	8007466 <prvAddCurrentTaskToDelayedList+0x3a>
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d007      	beq.n	8007466 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007456:	4b1a      	ldr	r3, [pc, #104]	; (80074c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	3304      	adds	r3, #4
 800745c:	4619      	mov	r1, r3
 800745e:	4819      	ldr	r0, [pc, #100]	; (80074c4 <prvAddCurrentTaskToDelayedList+0x98>)
 8007460:	f7fe fb25 	bl	8005aae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007464:	e026      	b.n	80074b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007466:	68fa      	ldr	r2, [r7, #12]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	4413      	add	r3, r2
 800746c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800746e:	4b14      	ldr	r3, [pc, #80]	; (80074c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	68ba      	ldr	r2, [r7, #8]
 8007474:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007476:	68ba      	ldr	r2, [r7, #8]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	429a      	cmp	r2, r3
 800747c:	d209      	bcs.n	8007492 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800747e:	4b12      	ldr	r3, [pc, #72]	; (80074c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	4b0f      	ldr	r3, [pc, #60]	; (80074c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	3304      	adds	r3, #4
 8007488:	4619      	mov	r1, r3
 800748a:	4610      	mov	r0, r2
 800748c:	f7fe fb33 	bl	8005af6 <vListInsert>
}
 8007490:	e010      	b.n	80074b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007492:	4b0e      	ldr	r3, [pc, #56]	; (80074cc <prvAddCurrentTaskToDelayedList+0xa0>)
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	4b0a      	ldr	r3, [pc, #40]	; (80074c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	3304      	adds	r3, #4
 800749c:	4619      	mov	r1, r3
 800749e:	4610      	mov	r0, r2
 80074a0:	f7fe fb29 	bl	8005af6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80074a4:	4b0a      	ldr	r3, [pc, #40]	; (80074d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	68ba      	ldr	r2, [r7, #8]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d202      	bcs.n	80074b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80074ae:	4a08      	ldr	r2, [pc, #32]	; (80074d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	6013      	str	r3, [r2, #0]
}
 80074b4:	bf00      	nop
 80074b6:	3710      	adds	r7, #16
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	2000101c 	.word	0x2000101c
 80074c0:	20000b44 	.word	0x20000b44
 80074c4:	20001004 	.word	0x20001004
 80074c8:	20000fd4 	.word	0x20000fd4
 80074cc:	20000fd0 	.word	0x20000fd0
 80074d0:	20001038 	.word	0x20001038

080074d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b08a      	sub	sp, #40	; 0x28
 80074d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80074da:	2300      	movs	r3, #0
 80074dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80074de:	f000 fb07 	bl	8007af0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80074e2:	4b1c      	ldr	r3, [pc, #112]	; (8007554 <xTimerCreateTimerTask+0x80>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d021      	beq.n	800752e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80074ea:	2300      	movs	r3, #0
 80074ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80074ee:	2300      	movs	r3, #0
 80074f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80074f2:	1d3a      	adds	r2, r7, #4
 80074f4:	f107 0108 	add.w	r1, r7, #8
 80074f8:	f107 030c 	add.w	r3, r7, #12
 80074fc:	4618      	mov	r0, r3
 80074fe:	f7fe fa8f 	bl	8005a20 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007502:	6879      	ldr	r1, [r7, #4]
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	68fa      	ldr	r2, [r7, #12]
 8007508:	9202      	str	r2, [sp, #8]
 800750a:	9301      	str	r3, [sp, #4]
 800750c:	2302      	movs	r3, #2
 800750e:	9300      	str	r3, [sp, #0]
 8007510:	2300      	movs	r3, #0
 8007512:	460a      	mov	r2, r1
 8007514:	4910      	ldr	r1, [pc, #64]	; (8007558 <xTimerCreateTimerTask+0x84>)
 8007516:	4811      	ldr	r0, [pc, #68]	; (800755c <xTimerCreateTimerTask+0x88>)
 8007518:	f7ff f83c 	bl	8006594 <xTaskCreateStatic>
 800751c:	4603      	mov	r3, r0
 800751e:	4a10      	ldr	r2, [pc, #64]	; (8007560 <xTimerCreateTimerTask+0x8c>)
 8007520:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007522:	4b0f      	ldr	r3, [pc, #60]	; (8007560 <xTimerCreateTimerTask+0x8c>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d001      	beq.n	800752e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800752a:	2301      	movs	r3, #1
 800752c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d10a      	bne.n	800754a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007538:	f383 8811 	msr	BASEPRI, r3
 800753c:	f3bf 8f6f 	isb	sy
 8007540:	f3bf 8f4f 	dsb	sy
 8007544:	613b      	str	r3, [r7, #16]
}
 8007546:	bf00      	nop
 8007548:	e7fe      	b.n	8007548 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800754a:	697b      	ldr	r3, [r7, #20]
}
 800754c:	4618      	mov	r0, r3
 800754e:	3718      	adds	r7, #24
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}
 8007554:	20001074 	.word	0x20001074
 8007558:	0800861c 	.word	0x0800861c
 800755c:	08007699 	.word	0x08007699
 8007560:	20001078 	.word	0x20001078

08007564 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b08a      	sub	sp, #40	; 0x28
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	607a      	str	r2, [r7, #4]
 8007570:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007572:	2300      	movs	r3, #0
 8007574:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d10a      	bne.n	8007592 <xTimerGenericCommand+0x2e>
	__asm volatile
 800757c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007580:	f383 8811 	msr	BASEPRI, r3
 8007584:	f3bf 8f6f 	isb	sy
 8007588:	f3bf 8f4f 	dsb	sy
 800758c:	623b      	str	r3, [r7, #32]
}
 800758e:	bf00      	nop
 8007590:	e7fe      	b.n	8007590 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007592:	4b1a      	ldr	r3, [pc, #104]	; (80075fc <xTimerGenericCommand+0x98>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d02a      	beq.n	80075f0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	2b05      	cmp	r3, #5
 80075aa:	dc18      	bgt.n	80075de <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80075ac:	f7ff feb2 	bl	8007314 <xTaskGetSchedulerState>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b02      	cmp	r3, #2
 80075b4:	d109      	bne.n	80075ca <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80075b6:	4b11      	ldr	r3, [pc, #68]	; (80075fc <xTimerGenericCommand+0x98>)
 80075b8:	6818      	ldr	r0, [r3, #0]
 80075ba:	f107 0110 	add.w	r1, r7, #16
 80075be:	2300      	movs	r3, #0
 80075c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075c2:	f7fe fbff 	bl	8005dc4 <xQueueGenericSend>
 80075c6:	6278      	str	r0, [r7, #36]	; 0x24
 80075c8:	e012      	b.n	80075f0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80075ca:	4b0c      	ldr	r3, [pc, #48]	; (80075fc <xTimerGenericCommand+0x98>)
 80075cc:	6818      	ldr	r0, [r3, #0]
 80075ce:	f107 0110 	add.w	r1, r7, #16
 80075d2:	2300      	movs	r3, #0
 80075d4:	2200      	movs	r2, #0
 80075d6:	f7fe fbf5 	bl	8005dc4 <xQueueGenericSend>
 80075da:	6278      	str	r0, [r7, #36]	; 0x24
 80075dc:	e008      	b.n	80075f0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80075de:	4b07      	ldr	r3, [pc, #28]	; (80075fc <xTimerGenericCommand+0x98>)
 80075e0:	6818      	ldr	r0, [r3, #0]
 80075e2:	f107 0110 	add.w	r1, r7, #16
 80075e6:	2300      	movs	r3, #0
 80075e8:	683a      	ldr	r2, [r7, #0]
 80075ea:	f7fe fce9 	bl	8005fc0 <xQueueGenericSendFromISR>
 80075ee:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80075f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3728      	adds	r7, #40	; 0x28
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	20001074 	.word	0x20001074

08007600 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b088      	sub	sp, #32
 8007604:	af02      	add	r7, sp, #8
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800760a:	4b22      	ldr	r3, [pc, #136]	; (8007694 <prvProcessExpiredTimer+0x94>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	3304      	adds	r3, #4
 8007618:	4618      	mov	r0, r3
 800761a:	f7fe faa5 	bl	8005b68 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007624:	f003 0304 	and.w	r3, r3, #4
 8007628:	2b00      	cmp	r3, #0
 800762a:	d022      	beq.n	8007672 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	699a      	ldr	r2, [r3, #24]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	18d1      	adds	r1, r2, r3
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	683a      	ldr	r2, [r7, #0]
 8007638:	6978      	ldr	r0, [r7, #20]
 800763a:	f000 f8d1 	bl	80077e0 <prvInsertTimerInActiveList>
 800763e:	4603      	mov	r3, r0
 8007640:	2b00      	cmp	r3, #0
 8007642:	d01f      	beq.n	8007684 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007644:	2300      	movs	r3, #0
 8007646:	9300      	str	r3, [sp, #0]
 8007648:	2300      	movs	r3, #0
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	2100      	movs	r1, #0
 800764e:	6978      	ldr	r0, [r7, #20]
 8007650:	f7ff ff88 	bl	8007564 <xTimerGenericCommand>
 8007654:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d113      	bne.n	8007684 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800765c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007660:	f383 8811 	msr	BASEPRI, r3
 8007664:	f3bf 8f6f 	isb	sy
 8007668:	f3bf 8f4f 	dsb	sy
 800766c:	60fb      	str	r3, [r7, #12]
}
 800766e:	bf00      	nop
 8007670:	e7fe      	b.n	8007670 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007678:	f023 0301 	bic.w	r3, r3, #1
 800767c:	b2da      	uxtb	r2, r3
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	6a1b      	ldr	r3, [r3, #32]
 8007688:	6978      	ldr	r0, [r7, #20]
 800768a:	4798      	blx	r3
}
 800768c:	bf00      	nop
 800768e:	3718      	adds	r7, #24
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	2000106c 	.word	0x2000106c

08007698 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80076a0:	f107 0308 	add.w	r3, r7, #8
 80076a4:	4618      	mov	r0, r3
 80076a6:	f000 f857 	bl	8007758 <prvGetNextExpireTime>
 80076aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	4619      	mov	r1, r3
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	f000 f803 	bl	80076bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80076b6:	f000 f8d5 	bl	8007864 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80076ba:	e7f1      	b.n	80076a0 <prvTimerTask+0x8>

080076bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80076c6:	f7ff fa37 	bl	8006b38 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80076ca:	f107 0308 	add.w	r3, r7, #8
 80076ce:	4618      	mov	r0, r3
 80076d0:	f000 f866 	bl	80077a0 <prvSampleTimeNow>
 80076d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d130      	bne.n	800773e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d10a      	bne.n	80076f8 <prvProcessTimerOrBlockTask+0x3c>
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d806      	bhi.n	80076f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80076ea:	f7ff fa33 	bl	8006b54 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80076ee:	68f9      	ldr	r1, [r7, #12]
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f7ff ff85 	bl	8007600 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80076f6:	e024      	b.n	8007742 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d008      	beq.n	8007710 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80076fe:	4b13      	ldr	r3, [pc, #76]	; (800774c <prvProcessTimerOrBlockTask+0x90>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d101      	bne.n	800770c <prvProcessTimerOrBlockTask+0x50>
 8007708:	2301      	movs	r3, #1
 800770a:	e000      	b.n	800770e <prvProcessTimerOrBlockTask+0x52>
 800770c:	2300      	movs	r3, #0
 800770e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007710:	4b0f      	ldr	r3, [pc, #60]	; (8007750 <prvProcessTimerOrBlockTask+0x94>)
 8007712:	6818      	ldr	r0, [r3, #0]
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	1ad3      	subs	r3, r2, r3
 800771a:	683a      	ldr	r2, [r7, #0]
 800771c:	4619      	mov	r1, r3
 800771e:	f7fe ff05 	bl	800652c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007722:	f7ff fa17 	bl	8006b54 <xTaskResumeAll>
 8007726:	4603      	mov	r3, r0
 8007728:	2b00      	cmp	r3, #0
 800772a:	d10a      	bne.n	8007742 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800772c:	4b09      	ldr	r3, [pc, #36]	; (8007754 <prvProcessTimerOrBlockTask+0x98>)
 800772e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007732:	601a      	str	r2, [r3, #0]
 8007734:	f3bf 8f4f 	dsb	sy
 8007738:	f3bf 8f6f 	isb	sy
}
 800773c:	e001      	b.n	8007742 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800773e:	f7ff fa09 	bl	8006b54 <xTaskResumeAll>
}
 8007742:	bf00      	nop
 8007744:	3710      	adds	r7, #16
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	20001070 	.word	0x20001070
 8007750:	20001074 	.word	0x20001074
 8007754:	e000ed04 	.word	0xe000ed04

08007758 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007760:	4b0e      	ldr	r3, [pc, #56]	; (800779c <prvGetNextExpireTime+0x44>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d101      	bne.n	800776e <prvGetNextExpireTime+0x16>
 800776a:	2201      	movs	r2, #1
 800776c:	e000      	b.n	8007770 <prvGetNextExpireTime+0x18>
 800776e:	2200      	movs	r2, #0
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d105      	bne.n	8007788 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800777c:	4b07      	ldr	r3, [pc, #28]	; (800779c <prvGetNextExpireTime+0x44>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	60fb      	str	r3, [r7, #12]
 8007786:	e001      	b.n	800778c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007788:	2300      	movs	r3, #0
 800778a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800778c:	68fb      	ldr	r3, [r7, #12]
}
 800778e:	4618      	mov	r0, r3
 8007790:	3714      	adds	r7, #20
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	2000106c 	.word	0x2000106c

080077a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80077a8:	f7ff fa72 	bl	8006c90 <xTaskGetTickCount>
 80077ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80077ae:	4b0b      	ldr	r3, [pc, #44]	; (80077dc <prvSampleTimeNow+0x3c>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68fa      	ldr	r2, [r7, #12]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d205      	bcs.n	80077c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80077b8:	f000 f936 	bl	8007a28 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	601a      	str	r2, [r3, #0]
 80077c2:	e002      	b.n	80077ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80077ca:	4a04      	ldr	r2, [pc, #16]	; (80077dc <prvSampleTimeNow+0x3c>)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80077d0:	68fb      	ldr	r3, [r7, #12]
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3710      	adds	r7, #16
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	bf00      	nop
 80077dc:	2000107c 	.word	0x2000107c

080077e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b086      	sub	sp, #24
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	607a      	str	r2, [r7, #4]
 80077ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80077ee:	2300      	movs	r3, #0
 80077f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	68ba      	ldr	r2, [r7, #8]
 80077f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80077fe:	68ba      	ldr	r2, [r7, #8]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	429a      	cmp	r2, r3
 8007804:	d812      	bhi.n	800782c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	1ad2      	subs	r2, r2, r3
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	699b      	ldr	r3, [r3, #24]
 8007810:	429a      	cmp	r2, r3
 8007812:	d302      	bcc.n	800781a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007814:	2301      	movs	r3, #1
 8007816:	617b      	str	r3, [r7, #20]
 8007818:	e01b      	b.n	8007852 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800781a:	4b10      	ldr	r3, [pc, #64]	; (800785c <prvInsertTimerInActiveList+0x7c>)
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	3304      	adds	r3, #4
 8007822:	4619      	mov	r1, r3
 8007824:	4610      	mov	r0, r2
 8007826:	f7fe f966 	bl	8005af6 <vListInsert>
 800782a:	e012      	b.n	8007852 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	429a      	cmp	r2, r3
 8007832:	d206      	bcs.n	8007842 <prvInsertTimerInActiveList+0x62>
 8007834:	68ba      	ldr	r2, [r7, #8]
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	429a      	cmp	r2, r3
 800783a:	d302      	bcc.n	8007842 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800783c:	2301      	movs	r3, #1
 800783e:	617b      	str	r3, [r7, #20]
 8007840:	e007      	b.n	8007852 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007842:	4b07      	ldr	r3, [pc, #28]	; (8007860 <prvInsertTimerInActiveList+0x80>)
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	3304      	adds	r3, #4
 800784a:	4619      	mov	r1, r3
 800784c:	4610      	mov	r0, r2
 800784e:	f7fe f952 	bl	8005af6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007852:	697b      	ldr	r3, [r7, #20]
}
 8007854:	4618      	mov	r0, r3
 8007856:	3718      	adds	r7, #24
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	20001070 	.word	0x20001070
 8007860:	2000106c 	.word	0x2000106c

08007864 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b08e      	sub	sp, #56	; 0x38
 8007868:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800786a:	e0ca      	b.n	8007a02 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2b00      	cmp	r3, #0
 8007870:	da18      	bge.n	80078a4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007872:	1d3b      	adds	r3, r7, #4
 8007874:	3304      	adds	r3, #4
 8007876:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787a:	2b00      	cmp	r3, #0
 800787c:	d10a      	bne.n	8007894 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800787e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007882:	f383 8811 	msr	BASEPRI, r3
 8007886:	f3bf 8f6f 	isb	sy
 800788a:	f3bf 8f4f 	dsb	sy
 800788e:	61fb      	str	r3, [r7, #28]
}
 8007890:	bf00      	nop
 8007892:	e7fe      	b.n	8007892 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800789a:	6850      	ldr	r0, [r2, #4]
 800789c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800789e:	6892      	ldr	r2, [r2, #8]
 80078a0:	4611      	mov	r1, r2
 80078a2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	f2c0 80aa 	blt.w	8007a00 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80078b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b2:	695b      	ldr	r3, [r3, #20]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d004      	beq.n	80078c2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80078b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ba:	3304      	adds	r3, #4
 80078bc:	4618      	mov	r0, r3
 80078be:	f7fe f953 	bl	8005b68 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80078c2:	463b      	mov	r3, r7
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7ff ff6b 	bl	80077a0 <prvSampleTimeNow>
 80078ca:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2b09      	cmp	r3, #9
 80078d0:	f200 8097 	bhi.w	8007a02 <prvProcessReceivedCommands+0x19e>
 80078d4:	a201      	add	r2, pc, #4	; (adr r2, 80078dc <prvProcessReceivedCommands+0x78>)
 80078d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078da:	bf00      	nop
 80078dc:	08007905 	.word	0x08007905
 80078e0:	08007905 	.word	0x08007905
 80078e4:	08007905 	.word	0x08007905
 80078e8:	08007979 	.word	0x08007979
 80078ec:	0800798d 	.word	0x0800798d
 80078f0:	080079d7 	.word	0x080079d7
 80078f4:	08007905 	.word	0x08007905
 80078f8:	08007905 	.word	0x08007905
 80078fc:	08007979 	.word	0x08007979
 8007900:	0800798d 	.word	0x0800798d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007906:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800790a:	f043 0301 	orr.w	r3, r3, #1
 800790e:	b2da      	uxtb	r2, r3
 8007910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007912:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007916:	68ba      	ldr	r2, [r7, #8]
 8007918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800791a:	699b      	ldr	r3, [r3, #24]
 800791c:	18d1      	adds	r1, r2, r3
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007922:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007924:	f7ff ff5c 	bl	80077e0 <prvInsertTimerInActiveList>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d069      	beq.n	8007a02 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800792e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007930:	6a1b      	ldr	r3, [r3, #32]
 8007932:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007934:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007938:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800793c:	f003 0304 	and.w	r3, r3, #4
 8007940:	2b00      	cmp	r3, #0
 8007942:	d05e      	beq.n	8007a02 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007944:	68ba      	ldr	r2, [r7, #8]
 8007946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007948:	699b      	ldr	r3, [r3, #24]
 800794a:	441a      	add	r2, r3
 800794c:	2300      	movs	r3, #0
 800794e:	9300      	str	r3, [sp, #0]
 8007950:	2300      	movs	r3, #0
 8007952:	2100      	movs	r1, #0
 8007954:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007956:	f7ff fe05 	bl	8007564 <xTimerGenericCommand>
 800795a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800795c:	6a3b      	ldr	r3, [r7, #32]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d14f      	bne.n	8007a02 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007966:	f383 8811 	msr	BASEPRI, r3
 800796a:	f3bf 8f6f 	isb	sy
 800796e:	f3bf 8f4f 	dsb	sy
 8007972:	61bb      	str	r3, [r7, #24]
}
 8007974:	bf00      	nop
 8007976:	e7fe      	b.n	8007976 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800797e:	f023 0301 	bic.w	r3, r3, #1
 8007982:	b2da      	uxtb	r2, r3
 8007984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007986:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800798a:	e03a      	b.n	8007a02 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800798c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800798e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007992:	f043 0301 	orr.w	r3, r3, #1
 8007996:	b2da      	uxtb	r2, r3
 8007998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800799e:	68ba      	ldr	r2, [r7, #8]
 80079a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80079a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a6:	699b      	ldr	r3, [r3, #24]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d10a      	bne.n	80079c2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80079ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b0:	f383 8811 	msr	BASEPRI, r3
 80079b4:	f3bf 8f6f 	isb	sy
 80079b8:	f3bf 8f4f 	dsb	sy
 80079bc:	617b      	str	r3, [r7, #20]
}
 80079be:	bf00      	nop
 80079c0:	e7fe      	b.n	80079c0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80079c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c4:	699a      	ldr	r2, [r3, #24]
 80079c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c8:	18d1      	adds	r1, r2, r3
 80079ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079d0:	f7ff ff06 	bl	80077e0 <prvInsertTimerInActiveList>
					break;
 80079d4:	e015      	b.n	8007a02 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80079d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079dc:	f003 0302 	and.w	r3, r3, #2
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d103      	bne.n	80079ec <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80079e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079e6:	f000 fbdb 	bl	80081a0 <vPortFree>
 80079ea:	e00a      	b.n	8007a02 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80079ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079f2:	f023 0301 	bic.w	r3, r3, #1
 80079f6:	b2da      	uxtb	r2, r3
 80079f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80079fe:	e000      	b.n	8007a02 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007a00:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007a02:	4b08      	ldr	r3, [pc, #32]	; (8007a24 <prvProcessReceivedCommands+0x1c0>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	1d39      	adds	r1, r7, #4
 8007a08:	2200      	movs	r2, #0
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7fe fb74 	bl	80060f8 <xQueueReceive>
 8007a10:	4603      	mov	r3, r0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	f47f af2a 	bne.w	800786c <prvProcessReceivedCommands+0x8>
	}
}
 8007a18:	bf00      	nop
 8007a1a:	bf00      	nop
 8007a1c:	3730      	adds	r7, #48	; 0x30
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	20001074 	.word	0x20001074

08007a28 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b088      	sub	sp, #32
 8007a2c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a2e:	e048      	b.n	8007ac2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a30:	4b2d      	ldr	r3, [pc, #180]	; (8007ae8 <prvSwitchTimerLists+0xc0>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	68db      	ldr	r3, [r3, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a3a:	4b2b      	ldr	r3, [pc, #172]	; (8007ae8 <prvSwitchTimerLists+0xc0>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	68db      	ldr	r3, [r3, #12]
 8007a42:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	3304      	adds	r3, #4
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f7fe f88d 	bl	8005b68 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	6a1b      	ldr	r3, [r3, #32]
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a5c:	f003 0304 	and.w	r3, r3, #4
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d02e      	beq.n	8007ac2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	699b      	ldr	r3, [r3, #24]
 8007a68:	693a      	ldr	r2, [r7, #16]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007a6e:	68ba      	ldr	r2, [r7, #8]
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d90e      	bls.n	8007a94 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	68ba      	ldr	r2, [r7, #8]
 8007a7a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a82:	4b19      	ldr	r3, [pc, #100]	; (8007ae8 <prvSwitchTimerLists+0xc0>)
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	3304      	adds	r3, #4
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	4610      	mov	r0, r2
 8007a8e:	f7fe f832 	bl	8005af6 <vListInsert>
 8007a92:	e016      	b.n	8007ac2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a94:	2300      	movs	r3, #0
 8007a96:	9300      	str	r3, [sp, #0]
 8007a98:	2300      	movs	r3, #0
 8007a9a:	693a      	ldr	r2, [r7, #16]
 8007a9c:	2100      	movs	r1, #0
 8007a9e:	68f8      	ldr	r0, [r7, #12]
 8007aa0:	f7ff fd60 	bl	8007564 <xTimerGenericCommand>
 8007aa4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d10a      	bne.n	8007ac2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab0:	f383 8811 	msr	BASEPRI, r3
 8007ab4:	f3bf 8f6f 	isb	sy
 8007ab8:	f3bf 8f4f 	dsb	sy
 8007abc:	603b      	str	r3, [r7, #0]
}
 8007abe:	bf00      	nop
 8007ac0:	e7fe      	b.n	8007ac0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007ac2:	4b09      	ldr	r3, [pc, #36]	; (8007ae8 <prvSwitchTimerLists+0xc0>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d1b1      	bne.n	8007a30 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007acc:	4b06      	ldr	r3, [pc, #24]	; (8007ae8 <prvSwitchTimerLists+0xc0>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007ad2:	4b06      	ldr	r3, [pc, #24]	; (8007aec <prvSwitchTimerLists+0xc4>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a04      	ldr	r2, [pc, #16]	; (8007ae8 <prvSwitchTimerLists+0xc0>)
 8007ad8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007ada:	4a04      	ldr	r2, [pc, #16]	; (8007aec <prvSwitchTimerLists+0xc4>)
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	6013      	str	r3, [r2, #0]
}
 8007ae0:	bf00      	nop
 8007ae2:	3718      	adds	r7, #24
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}
 8007ae8:	2000106c 	.word	0x2000106c
 8007aec:	20001070 	.word	0x20001070

08007af0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007af6:	f000 f965 	bl	8007dc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007afa:	4b15      	ldr	r3, [pc, #84]	; (8007b50 <prvCheckForValidListAndQueue+0x60>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d120      	bne.n	8007b44 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007b02:	4814      	ldr	r0, [pc, #80]	; (8007b54 <prvCheckForValidListAndQueue+0x64>)
 8007b04:	f7fd ffa6 	bl	8005a54 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007b08:	4813      	ldr	r0, [pc, #76]	; (8007b58 <prvCheckForValidListAndQueue+0x68>)
 8007b0a:	f7fd ffa3 	bl	8005a54 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007b0e:	4b13      	ldr	r3, [pc, #76]	; (8007b5c <prvCheckForValidListAndQueue+0x6c>)
 8007b10:	4a10      	ldr	r2, [pc, #64]	; (8007b54 <prvCheckForValidListAndQueue+0x64>)
 8007b12:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007b14:	4b12      	ldr	r3, [pc, #72]	; (8007b60 <prvCheckForValidListAndQueue+0x70>)
 8007b16:	4a10      	ldr	r2, [pc, #64]	; (8007b58 <prvCheckForValidListAndQueue+0x68>)
 8007b18:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	9300      	str	r3, [sp, #0]
 8007b1e:	4b11      	ldr	r3, [pc, #68]	; (8007b64 <prvCheckForValidListAndQueue+0x74>)
 8007b20:	4a11      	ldr	r2, [pc, #68]	; (8007b68 <prvCheckForValidListAndQueue+0x78>)
 8007b22:	2110      	movs	r1, #16
 8007b24:	200a      	movs	r0, #10
 8007b26:	f7fe f8b1 	bl	8005c8c <xQueueGenericCreateStatic>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	4a08      	ldr	r2, [pc, #32]	; (8007b50 <prvCheckForValidListAndQueue+0x60>)
 8007b2e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007b30:	4b07      	ldr	r3, [pc, #28]	; (8007b50 <prvCheckForValidListAndQueue+0x60>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d005      	beq.n	8007b44 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007b38:	4b05      	ldr	r3, [pc, #20]	; (8007b50 <prvCheckForValidListAndQueue+0x60>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	490b      	ldr	r1, [pc, #44]	; (8007b6c <prvCheckForValidListAndQueue+0x7c>)
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7fe fcca 	bl	80064d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007b44:	f000 f96e 	bl	8007e24 <vPortExitCritical>
}
 8007b48:	bf00      	nop
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	20001074 	.word	0x20001074
 8007b54:	20001044 	.word	0x20001044
 8007b58:	20001058 	.word	0x20001058
 8007b5c:	2000106c 	.word	0x2000106c
 8007b60:	20001070 	.word	0x20001070
 8007b64:	20001120 	.word	0x20001120
 8007b68:	20001080 	.word	0x20001080
 8007b6c:	08008624 	.word	0x08008624

08007b70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	60b9      	str	r1, [r7, #8]
 8007b7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	3b04      	subs	r3, #4
 8007b80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007b88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	3b04      	subs	r3, #4
 8007b8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	f023 0201 	bic.w	r2, r3, #1
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	3b04      	subs	r3, #4
 8007b9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ba0:	4a0c      	ldr	r2, [pc, #48]	; (8007bd4 <pxPortInitialiseStack+0x64>)
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	3b14      	subs	r3, #20
 8007baa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	3b04      	subs	r3, #4
 8007bb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f06f 0202 	mvn.w	r2, #2
 8007bbe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	3b20      	subs	r3, #32
 8007bc4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3714      	adds	r7, #20
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr
 8007bd4:	08007bd9 	.word	0x08007bd9

08007bd8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b085      	sub	sp, #20
 8007bdc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007bde:	2300      	movs	r3, #0
 8007be0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007be2:	4b12      	ldr	r3, [pc, #72]	; (8007c2c <prvTaskExitError+0x54>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bea:	d00a      	beq.n	8007c02 <prvTaskExitError+0x2a>
	__asm volatile
 8007bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf0:	f383 8811 	msr	BASEPRI, r3
 8007bf4:	f3bf 8f6f 	isb	sy
 8007bf8:	f3bf 8f4f 	dsb	sy
 8007bfc:	60fb      	str	r3, [r7, #12]
}
 8007bfe:	bf00      	nop
 8007c00:	e7fe      	b.n	8007c00 <prvTaskExitError+0x28>
	__asm volatile
 8007c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c06:	f383 8811 	msr	BASEPRI, r3
 8007c0a:	f3bf 8f6f 	isb	sy
 8007c0e:	f3bf 8f4f 	dsb	sy
 8007c12:	60bb      	str	r3, [r7, #8]
}
 8007c14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007c16:	bf00      	nop
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d0fc      	beq.n	8007c18 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007c1e:	bf00      	nop
 8007c20:	bf00      	nop
 8007c22:	3714      	adds	r7, #20
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr
 8007c2c:	2000000c 	.word	0x2000000c

08007c30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007c30:	4b07      	ldr	r3, [pc, #28]	; (8007c50 <pxCurrentTCBConst2>)
 8007c32:	6819      	ldr	r1, [r3, #0]
 8007c34:	6808      	ldr	r0, [r1, #0]
 8007c36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c3a:	f380 8809 	msr	PSP, r0
 8007c3e:	f3bf 8f6f 	isb	sy
 8007c42:	f04f 0000 	mov.w	r0, #0
 8007c46:	f380 8811 	msr	BASEPRI, r0
 8007c4a:	4770      	bx	lr
 8007c4c:	f3af 8000 	nop.w

08007c50 <pxCurrentTCBConst2>:
 8007c50:	20000b44 	.word	0x20000b44
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007c54:	bf00      	nop
 8007c56:	bf00      	nop

08007c58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007c58:	4808      	ldr	r0, [pc, #32]	; (8007c7c <prvPortStartFirstTask+0x24>)
 8007c5a:	6800      	ldr	r0, [r0, #0]
 8007c5c:	6800      	ldr	r0, [r0, #0]
 8007c5e:	f380 8808 	msr	MSP, r0
 8007c62:	f04f 0000 	mov.w	r0, #0
 8007c66:	f380 8814 	msr	CONTROL, r0
 8007c6a:	b662      	cpsie	i
 8007c6c:	b661      	cpsie	f
 8007c6e:	f3bf 8f4f 	dsb	sy
 8007c72:	f3bf 8f6f 	isb	sy
 8007c76:	df00      	svc	0
 8007c78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007c7a:	bf00      	nop
 8007c7c:	e000ed08 	.word	0xe000ed08

08007c80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b086      	sub	sp, #24
 8007c84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007c86:	4b46      	ldr	r3, [pc, #280]	; (8007da0 <xPortStartScheduler+0x120>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a46      	ldr	r2, [pc, #280]	; (8007da4 <xPortStartScheduler+0x124>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d10a      	bne.n	8007ca6 <xPortStartScheduler+0x26>
	__asm volatile
 8007c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c94:	f383 8811 	msr	BASEPRI, r3
 8007c98:	f3bf 8f6f 	isb	sy
 8007c9c:	f3bf 8f4f 	dsb	sy
 8007ca0:	613b      	str	r3, [r7, #16]
}
 8007ca2:	bf00      	nop
 8007ca4:	e7fe      	b.n	8007ca4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007ca6:	4b3e      	ldr	r3, [pc, #248]	; (8007da0 <xPortStartScheduler+0x120>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a3f      	ldr	r2, [pc, #252]	; (8007da8 <xPortStartScheduler+0x128>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d10a      	bne.n	8007cc6 <xPortStartScheduler+0x46>
	__asm volatile
 8007cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb4:	f383 8811 	msr	BASEPRI, r3
 8007cb8:	f3bf 8f6f 	isb	sy
 8007cbc:	f3bf 8f4f 	dsb	sy
 8007cc0:	60fb      	str	r3, [r7, #12]
}
 8007cc2:	bf00      	nop
 8007cc4:	e7fe      	b.n	8007cc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007cc6:	4b39      	ldr	r3, [pc, #228]	; (8007dac <xPortStartScheduler+0x12c>)
 8007cc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	22ff      	movs	r2, #255	; 0xff
 8007cd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ce0:	78fb      	ldrb	r3, [r7, #3]
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007ce8:	b2da      	uxtb	r2, r3
 8007cea:	4b31      	ldr	r3, [pc, #196]	; (8007db0 <xPortStartScheduler+0x130>)
 8007cec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007cee:	4b31      	ldr	r3, [pc, #196]	; (8007db4 <xPortStartScheduler+0x134>)
 8007cf0:	2207      	movs	r2, #7
 8007cf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cf4:	e009      	b.n	8007d0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007cf6:	4b2f      	ldr	r3, [pc, #188]	; (8007db4 <xPortStartScheduler+0x134>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	3b01      	subs	r3, #1
 8007cfc:	4a2d      	ldr	r2, [pc, #180]	; (8007db4 <xPortStartScheduler+0x134>)
 8007cfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007d00:	78fb      	ldrb	r3, [r7, #3]
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	005b      	lsls	r3, r3, #1
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d0a:	78fb      	ldrb	r3, [r7, #3]
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d12:	2b80      	cmp	r3, #128	; 0x80
 8007d14:	d0ef      	beq.n	8007cf6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007d16:	4b27      	ldr	r3, [pc, #156]	; (8007db4 <xPortStartScheduler+0x134>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f1c3 0307 	rsb	r3, r3, #7
 8007d1e:	2b04      	cmp	r3, #4
 8007d20:	d00a      	beq.n	8007d38 <xPortStartScheduler+0xb8>
	__asm volatile
 8007d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d26:	f383 8811 	msr	BASEPRI, r3
 8007d2a:	f3bf 8f6f 	isb	sy
 8007d2e:	f3bf 8f4f 	dsb	sy
 8007d32:	60bb      	str	r3, [r7, #8]
}
 8007d34:	bf00      	nop
 8007d36:	e7fe      	b.n	8007d36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007d38:	4b1e      	ldr	r3, [pc, #120]	; (8007db4 <xPortStartScheduler+0x134>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	021b      	lsls	r3, r3, #8
 8007d3e:	4a1d      	ldr	r2, [pc, #116]	; (8007db4 <xPortStartScheduler+0x134>)
 8007d40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007d42:	4b1c      	ldr	r3, [pc, #112]	; (8007db4 <xPortStartScheduler+0x134>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d4a:	4a1a      	ldr	r2, [pc, #104]	; (8007db4 <xPortStartScheduler+0x134>)
 8007d4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	b2da      	uxtb	r2, r3
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007d56:	4b18      	ldr	r3, [pc, #96]	; (8007db8 <xPortStartScheduler+0x138>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a17      	ldr	r2, [pc, #92]	; (8007db8 <xPortStartScheduler+0x138>)
 8007d5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007d60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007d62:	4b15      	ldr	r3, [pc, #84]	; (8007db8 <xPortStartScheduler+0x138>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a14      	ldr	r2, [pc, #80]	; (8007db8 <xPortStartScheduler+0x138>)
 8007d68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007d6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007d6e:	f000 f8dd 	bl	8007f2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007d72:	4b12      	ldr	r3, [pc, #72]	; (8007dbc <xPortStartScheduler+0x13c>)
 8007d74:	2200      	movs	r2, #0
 8007d76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007d78:	f000 f8fc 	bl	8007f74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007d7c:	4b10      	ldr	r3, [pc, #64]	; (8007dc0 <xPortStartScheduler+0x140>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a0f      	ldr	r2, [pc, #60]	; (8007dc0 <xPortStartScheduler+0x140>)
 8007d82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007d86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007d88:	f7ff ff66 	bl	8007c58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007d8c:	f7ff f84a 	bl	8006e24 <vTaskSwitchContext>
	prvTaskExitError();
 8007d90:	f7ff ff22 	bl	8007bd8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3718      	adds	r7, #24
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	e000ed00 	.word	0xe000ed00
 8007da4:	410fc271 	.word	0x410fc271
 8007da8:	410fc270 	.word	0x410fc270
 8007dac:	e000e400 	.word	0xe000e400
 8007db0:	20001170 	.word	0x20001170
 8007db4:	20001174 	.word	0x20001174
 8007db8:	e000ed20 	.word	0xe000ed20
 8007dbc:	2000000c 	.word	0x2000000c
 8007dc0:	e000ef34 	.word	0xe000ef34

08007dc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
	__asm volatile
 8007dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dce:	f383 8811 	msr	BASEPRI, r3
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	f3bf 8f4f 	dsb	sy
 8007dda:	607b      	str	r3, [r7, #4]
}
 8007ddc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007dde:	4b0f      	ldr	r3, [pc, #60]	; (8007e1c <vPortEnterCritical+0x58>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	3301      	adds	r3, #1
 8007de4:	4a0d      	ldr	r2, [pc, #52]	; (8007e1c <vPortEnterCritical+0x58>)
 8007de6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007de8:	4b0c      	ldr	r3, [pc, #48]	; (8007e1c <vPortEnterCritical+0x58>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d10f      	bne.n	8007e10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007df0:	4b0b      	ldr	r3, [pc, #44]	; (8007e20 <vPortEnterCritical+0x5c>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00a      	beq.n	8007e10 <vPortEnterCritical+0x4c>
	__asm volatile
 8007dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfe:	f383 8811 	msr	BASEPRI, r3
 8007e02:	f3bf 8f6f 	isb	sy
 8007e06:	f3bf 8f4f 	dsb	sy
 8007e0a:	603b      	str	r3, [r7, #0]
}
 8007e0c:	bf00      	nop
 8007e0e:	e7fe      	b.n	8007e0e <vPortEnterCritical+0x4a>
	}
}
 8007e10:	bf00      	nop
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr
 8007e1c:	2000000c 	.word	0x2000000c
 8007e20:	e000ed04 	.word	0xe000ed04

08007e24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007e2a:	4b12      	ldr	r3, [pc, #72]	; (8007e74 <vPortExitCritical+0x50>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d10a      	bne.n	8007e48 <vPortExitCritical+0x24>
	__asm volatile
 8007e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e36:	f383 8811 	msr	BASEPRI, r3
 8007e3a:	f3bf 8f6f 	isb	sy
 8007e3e:	f3bf 8f4f 	dsb	sy
 8007e42:	607b      	str	r3, [r7, #4]
}
 8007e44:	bf00      	nop
 8007e46:	e7fe      	b.n	8007e46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007e48:	4b0a      	ldr	r3, [pc, #40]	; (8007e74 <vPortExitCritical+0x50>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	3b01      	subs	r3, #1
 8007e4e:	4a09      	ldr	r2, [pc, #36]	; (8007e74 <vPortExitCritical+0x50>)
 8007e50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007e52:	4b08      	ldr	r3, [pc, #32]	; (8007e74 <vPortExitCritical+0x50>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d105      	bne.n	8007e66 <vPortExitCritical+0x42>
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	f383 8811 	msr	BASEPRI, r3
}
 8007e64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007e66:	bf00      	nop
 8007e68:	370c      	adds	r7, #12
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	2000000c 	.word	0x2000000c
	...

08007e80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007e80:	f3ef 8009 	mrs	r0, PSP
 8007e84:	f3bf 8f6f 	isb	sy
 8007e88:	4b15      	ldr	r3, [pc, #84]	; (8007ee0 <pxCurrentTCBConst>)
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	f01e 0f10 	tst.w	lr, #16
 8007e90:	bf08      	it	eq
 8007e92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007e96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e9a:	6010      	str	r0, [r2, #0]
 8007e9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007ea0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007ea4:	f380 8811 	msr	BASEPRI, r0
 8007ea8:	f3bf 8f4f 	dsb	sy
 8007eac:	f3bf 8f6f 	isb	sy
 8007eb0:	f7fe ffb8 	bl	8006e24 <vTaskSwitchContext>
 8007eb4:	f04f 0000 	mov.w	r0, #0
 8007eb8:	f380 8811 	msr	BASEPRI, r0
 8007ebc:	bc09      	pop	{r0, r3}
 8007ebe:	6819      	ldr	r1, [r3, #0]
 8007ec0:	6808      	ldr	r0, [r1, #0]
 8007ec2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ec6:	f01e 0f10 	tst.w	lr, #16
 8007eca:	bf08      	it	eq
 8007ecc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007ed0:	f380 8809 	msr	PSP, r0
 8007ed4:	f3bf 8f6f 	isb	sy
 8007ed8:	4770      	bx	lr
 8007eda:	bf00      	nop
 8007edc:	f3af 8000 	nop.w

08007ee0 <pxCurrentTCBConst>:
 8007ee0:	20000b44 	.word	0x20000b44
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ee4:	bf00      	nop
 8007ee6:	bf00      	nop

08007ee8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
	__asm volatile
 8007eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef2:	f383 8811 	msr	BASEPRI, r3
 8007ef6:	f3bf 8f6f 	isb	sy
 8007efa:	f3bf 8f4f 	dsb	sy
 8007efe:	607b      	str	r3, [r7, #4]
}
 8007f00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007f02:	f7fe fed5 	bl	8006cb0 <xTaskIncrementTick>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d003      	beq.n	8007f14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007f0c:	4b06      	ldr	r3, [pc, #24]	; (8007f28 <xPortSysTickHandler+0x40>)
 8007f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f12:	601a      	str	r2, [r3, #0]
 8007f14:	2300      	movs	r3, #0
 8007f16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	f383 8811 	msr	BASEPRI, r3
}
 8007f1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007f20:	bf00      	nop
 8007f22:	3708      	adds	r7, #8
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	e000ed04 	.word	0xe000ed04

08007f2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007f30:	4b0b      	ldr	r3, [pc, #44]	; (8007f60 <vPortSetupTimerInterrupt+0x34>)
 8007f32:	2200      	movs	r2, #0
 8007f34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007f36:	4b0b      	ldr	r3, [pc, #44]	; (8007f64 <vPortSetupTimerInterrupt+0x38>)
 8007f38:	2200      	movs	r2, #0
 8007f3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007f3c:	4b0a      	ldr	r3, [pc, #40]	; (8007f68 <vPortSetupTimerInterrupt+0x3c>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a0a      	ldr	r2, [pc, #40]	; (8007f6c <vPortSetupTimerInterrupt+0x40>)
 8007f42:	fba2 2303 	umull	r2, r3, r2, r3
 8007f46:	099b      	lsrs	r3, r3, #6
 8007f48:	4a09      	ldr	r2, [pc, #36]	; (8007f70 <vPortSetupTimerInterrupt+0x44>)
 8007f4a:	3b01      	subs	r3, #1
 8007f4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007f4e:	4b04      	ldr	r3, [pc, #16]	; (8007f60 <vPortSetupTimerInterrupt+0x34>)
 8007f50:	2207      	movs	r2, #7
 8007f52:	601a      	str	r2, [r3, #0]
}
 8007f54:	bf00      	nop
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop
 8007f60:	e000e010 	.word	0xe000e010
 8007f64:	e000e018 	.word	0xe000e018
 8007f68:	20000000 	.word	0x20000000
 8007f6c:	10624dd3 	.word	0x10624dd3
 8007f70:	e000e014 	.word	0xe000e014

08007f74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007f74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007f84 <vPortEnableVFP+0x10>
 8007f78:	6801      	ldr	r1, [r0, #0]
 8007f7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007f7e:	6001      	str	r1, [r0, #0]
 8007f80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007f82:	bf00      	nop
 8007f84:	e000ed88 	.word	0xe000ed88

08007f88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007f88:	b480      	push	{r7}
 8007f8a:	b085      	sub	sp, #20
 8007f8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007f8e:	f3ef 8305 	mrs	r3, IPSR
 8007f92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2b0f      	cmp	r3, #15
 8007f98:	d914      	bls.n	8007fc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007f9a:	4a17      	ldr	r2, [pc, #92]	; (8007ff8 <vPortValidateInterruptPriority+0x70>)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007fa4:	4b15      	ldr	r3, [pc, #84]	; (8007ffc <vPortValidateInterruptPriority+0x74>)
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	7afa      	ldrb	r2, [r7, #11]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d20a      	bcs.n	8007fc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb2:	f383 8811 	msr	BASEPRI, r3
 8007fb6:	f3bf 8f6f 	isb	sy
 8007fba:	f3bf 8f4f 	dsb	sy
 8007fbe:	607b      	str	r3, [r7, #4]
}
 8007fc0:	bf00      	nop
 8007fc2:	e7fe      	b.n	8007fc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007fc4:	4b0e      	ldr	r3, [pc, #56]	; (8008000 <vPortValidateInterruptPriority+0x78>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007fcc:	4b0d      	ldr	r3, [pc, #52]	; (8008004 <vPortValidateInterruptPriority+0x7c>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d90a      	bls.n	8007fea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd8:	f383 8811 	msr	BASEPRI, r3
 8007fdc:	f3bf 8f6f 	isb	sy
 8007fe0:	f3bf 8f4f 	dsb	sy
 8007fe4:	603b      	str	r3, [r7, #0]
}
 8007fe6:	bf00      	nop
 8007fe8:	e7fe      	b.n	8007fe8 <vPortValidateInterruptPriority+0x60>
	}
 8007fea:	bf00      	nop
 8007fec:	3714      	adds	r7, #20
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr
 8007ff6:	bf00      	nop
 8007ff8:	e000e3f0 	.word	0xe000e3f0
 8007ffc:	20001170 	.word	0x20001170
 8008000:	e000ed0c 	.word	0xe000ed0c
 8008004:	20001174 	.word	0x20001174

08008008 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b08a      	sub	sp, #40	; 0x28
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008010:	2300      	movs	r3, #0
 8008012:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008014:	f7fe fd90 	bl	8006b38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008018:	4b5b      	ldr	r3, [pc, #364]	; (8008188 <pvPortMalloc+0x180>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d101      	bne.n	8008024 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008020:	f000 f920 	bl	8008264 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008024:	4b59      	ldr	r3, [pc, #356]	; (800818c <pvPortMalloc+0x184>)
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	4013      	ands	r3, r2
 800802c:	2b00      	cmp	r3, #0
 800802e:	f040 8093 	bne.w	8008158 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d01d      	beq.n	8008074 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008038:	2208      	movs	r2, #8
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	4413      	add	r3, r2
 800803e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f003 0307 	and.w	r3, r3, #7
 8008046:	2b00      	cmp	r3, #0
 8008048:	d014      	beq.n	8008074 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f023 0307 	bic.w	r3, r3, #7
 8008050:	3308      	adds	r3, #8
 8008052:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f003 0307 	and.w	r3, r3, #7
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00a      	beq.n	8008074 <pvPortMalloc+0x6c>
	__asm volatile
 800805e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008062:	f383 8811 	msr	BASEPRI, r3
 8008066:	f3bf 8f6f 	isb	sy
 800806a:	f3bf 8f4f 	dsb	sy
 800806e:	617b      	str	r3, [r7, #20]
}
 8008070:	bf00      	nop
 8008072:	e7fe      	b.n	8008072 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d06e      	beq.n	8008158 <pvPortMalloc+0x150>
 800807a:	4b45      	ldr	r3, [pc, #276]	; (8008190 <pvPortMalloc+0x188>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	429a      	cmp	r2, r3
 8008082:	d869      	bhi.n	8008158 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008084:	4b43      	ldr	r3, [pc, #268]	; (8008194 <pvPortMalloc+0x18c>)
 8008086:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008088:	4b42      	ldr	r3, [pc, #264]	; (8008194 <pvPortMalloc+0x18c>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800808e:	e004      	b.n	800809a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008092:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800809a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d903      	bls.n	80080ac <pvPortMalloc+0xa4>
 80080a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d1f1      	bne.n	8008090 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80080ac:	4b36      	ldr	r3, [pc, #216]	; (8008188 <pvPortMalloc+0x180>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d050      	beq.n	8008158 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80080b6:	6a3b      	ldr	r3, [r7, #32]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	2208      	movs	r2, #8
 80080bc:	4413      	add	r3, r2
 80080be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80080c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	6a3b      	ldr	r3, [r7, #32]
 80080c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80080c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ca:	685a      	ldr	r2, [r3, #4]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	1ad2      	subs	r2, r2, r3
 80080d0:	2308      	movs	r3, #8
 80080d2:	005b      	lsls	r3, r3, #1
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d91f      	bls.n	8008118 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80080d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4413      	add	r3, r2
 80080de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	f003 0307 	and.w	r3, r3, #7
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d00a      	beq.n	8008100 <pvPortMalloc+0xf8>
	__asm volatile
 80080ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ee:	f383 8811 	msr	BASEPRI, r3
 80080f2:	f3bf 8f6f 	isb	sy
 80080f6:	f3bf 8f4f 	dsb	sy
 80080fa:	613b      	str	r3, [r7, #16]
}
 80080fc:	bf00      	nop
 80080fe:	e7fe      	b.n	80080fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008102:	685a      	ldr	r2, [r3, #4]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	1ad2      	subs	r2, r2, r3
 8008108:	69bb      	ldr	r3, [r7, #24]
 800810a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800810c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008112:	69b8      	ldr	r0, [r7, #24]
 8008114:	f000 f908 	bl	8008328 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008118:	4b1d      	ldr	r3, [pc, #116]	; (8008190 <pvPortMalloc+0x188>)
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	1ad3      	subs	r3, r2, r3
 8008122:	4a1b      	ldr	r2, [pc, #108]	; (8008190 <pvPortMalloc+0x188>)
 8008124:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008126:	4b1a      	ldr	r3, [pc, #104]	; (8008190 <pvPortMalloc+0x188>)
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	4b1b      	ldr	r3, [pc, #108]	; (8008198 <pvPortMalloc+0x190>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	429a      	cmp	r2, r3
 8008130:	d203      	bcs.n	800813a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008132:	4b17      	ldr	r3, [pc, #92]	; (8008190 <pvPortMalloc+0x188>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a18      	ldr	r2, [pc, #96]	; (8008198 <pvPortMalloc+0x190>)
 8008138:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800813a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813c:	685a      	ldr	r2, [r3, #4]
 800813e:	4b13      	ldr	r3, [pc, #76]	; (800818c <pvPortMalloc+0x184>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	431a      	orrs	r2, r3
 8008144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008146:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814a:	2200      	movs	r2, #0
 800814c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800814e:	4b13      	ldr	r3, [pc, #76]	; (800819c <pvPortMalloc+0x194>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	3301      	adds	r3, #1
 8008154:	4a11      	ldr	r2, [pc, #68]	; (800819c <pvPortMalloc+0x194>)
 8008156:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008158:	f7fe fcfc 	bl	8006b54 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800815c:	69fb      	ldr	r3, [r7, #28]
 800815e:	f003 0307 	and.w	r3, r3, #7
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00a      	beq.n	800817c <pvPortMalloc+0x174>
	__asm volatile
 8008166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800816a:	f383 8811 	msr	BASEPRI, r3
 800816e:	f3bf 8f6f 	isb	sy
 8008172:	f3bf 8f4f 	dsb	sy
 8008176:	60fb      	str	r3, [r7, #12]
}
 8008178:	bf00      	nop
 800817a:	e7fe      	b.n	800817a <pvPortMalloc+0x172>
	return pvReturn;
 800817c:	69fb      	ldr	r3, [r7, #28]
}
 800817e:	4618      	mov	r0, r3
 8008180:	3728      	adds	r7, #40	; 0x28
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	20003200 	.word	0x20003200
 800818c:	20003214 	.word	0x20003214
 8008190:	20003204 	.word	0x20003204
 8008194:	200031f8 	.word	0x200031f8
 8008198:	20003208 	.word	0x20003208
 800819c:	2000320c 	.word	0x2000320c

080081a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b086      	sub	sp, #24
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d04d      	beq.n	800824e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80081b2:	2308      	movs	r3, #8
 80081b4:	425b      	negs	r3, r3
 80081b6:	697a      	ldr	r2, [r7, #20]
 80081b8:	4413      	add	r3, r2
 80081ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	685a      	ldr	r2, [r3, #4]
 80081c4:	4b24      	ldr	r3, [pc, #144]	; (8008258 <vPortFree+0xb8>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4013      	ands	r3, r2
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d10a      	bne.n	80081e4 <vPortFree+0x44>
	__asm volatile
 80081ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d2:	f383 8811 	msr	BASEPRI, r3
 80081d6:	f3bf 8f6f 	isb	sy
 80081da:	f3bf 8f4f 	dsb	sy
 80081de:	60fb      	str	r3, [r7, #12]
}
 80081e0:	bf00      	nop
 80081e2:	e7fe      	b.n	80081e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d00a      	beq.n	8008202 <vPortFree+0x62>
	__asm volatile
 80081ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f0:	f383 8811 	msr	BASEPRI, r3
 80081f4:	f3bf 8f6f 	isb	sy
 80081f8:	f3bf 8f4f 	dsb	sy
 80081fc:	60bb      	str	r3, [r7, #8]
}
 80081fe:	bf00      	nop
 8008200:	e7fe      	b.n	8008200 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	685a      	ldr	r2, [r3, #4]
 8008206:	4b14      	ldr	r3, [pc, #80]	; (8008258 <vPortFree+0xb8>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4013      	ands	r3, r2
 800820c:	2b00      	cmp	r3, #0
 800820e:	d01e      	beq.n	800824e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d11a      	bne.n	800824e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	685a      	ldr	r2, [r3, #4]
 800821c:	4b0e      	ldr	r3, [pc, #56]	; (8008258 <vPortFree+0xb8>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	43db      	mvns	r3, r3
 8008222:	401a      	ands	r2, r3
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008228:	f7fe fc86 	bl	8006b38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	685a      	ldr	r2, [r3, #4]
 8008230:	4b0a      	ldr	r3, [pc, #40]	; (800825c <vPortFree+0xbc>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4413      	add	r3, r2
 8008236:	4a09      	ldr	r2, [pc, #36]	; (800825c <vPortFree+0xbc>)
 8008238:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800823a:	6938      	ldr	r0, [r7, #16]
 800823c:	f000 f874 	bl	8008328 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008240:	4b07      	ldr	r3, [pc, #28]	; (8008260 <vPortFree+0xc0>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	3301      	adds	r3, #1
 8008246:	4a06      	ldr	r2, [pc, #24]	; (8008260 <vPortFree+0xc0>)
 8008248:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800824a:	f7fe fc83 	bl	8006b54 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800824e:	bf00      	nop
 8008250:	3718      	adds	r7, #24
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	20003214 	.word	0x20003214
 800825c:	20003204 	.word	0x20003204
 8008260:	20003210 	.word	0x20003210

08008264 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008264:	b480      	push	{r7}
 8008266:	b085      	sub	sp, #20
 8008268:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800826a:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 800826e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008270:	4b27      	ldr	r3, [pc, #156]	; (8008310 <prvHeapInit+0xac>)
 8008272:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f003 0307 	and.w	r3, r3, #7
 800827a:	2b00      	cmp	r3, #0
 800827c:	d00c      	beq.n	8008298 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	3307      	adds	r3, #7
 8008282:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f023 0307 	bic.w	r3, r3, #7
 800828a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800828c:	68ba      	ldr	r2, [r7, #8]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	1ad3      	subs	r3, r2, r3
 8008292:	4a1f      	ldr	r2, [pc, #124]	; (8008310 <prvHeapInit+0xac>)
 8008294:	4413      	add	r3, r2
 8008296:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800829c:	4a1d      	ldr	r2, [pc, #116]	; (8008314 <prvHeapInit+0xb0>)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80082a2:	4b1c      	ldr	r3, [pc, #112]	; (8008314 <prvHeapInit+0xb0>)
 80082a4:	2200      	movs	r2, #0
 80082a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	68ba      	ldr	r2, [r7, #8]
 80082ac:	4413      	add	r3, r2
 80082ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80082b0:	2208      	movs	r2, #8
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	1a9b      	subs	r3, r3, r2
 80082b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f023 0307 	bic.w	r3, r3, #7
 80082be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	4a15      	ldr	r2, [pc, #84]	; (8008318 <prvHeapInit+0xb4>)
 80082c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80082c6:	4b14      	ldr	r3, [pc, #80]	; (8008318 <prvHeapInit+0xb4>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	2200      	movs	r2, #0
 80082cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80082ce:	4b12      	ldr	r3, [pc, #72]	; (8008318 <prvHeapInit+0xb4>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	2200      	movs	r2, #0
 80082d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	68fa      	ldr	r2, [r7, #12]
 80082de:	1ad2      	subs	r2, r2, r3
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80082e4:	4b0c      	ldr	r3, [pc, #48]	; (8008318 <prvHeapInit+0xb4>)
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	4a0a      	ldr	r2, [pc, #40]	; (800831c <prvHeapInit+0xb8>)
 80082f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	4a09      	ldr	r2, [pc, #36]	; (8008320 <prvHeapInit+0xbc>)
 80082fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80082fc:	4b09      	ldr	r3, [pc, #36]	; (8008324 <prvHeapInit+0xc0>)
 80082fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008302:	601a      	str	r2, [r3, #0]
}
 8008304:	bf00      	nop
 8008306:	3714      	adds	r7, #20
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr
 8008310:	20001178 	.word	0x20001178
 8008314:	200031f8 	.word	0x200031f8
 8008318:	20003200 	.word	0x20003200
 800831c:	20003208 	.word	0x20003208
 8008320:	20003204 	.word	0x20003204
 8008324:	20003214 	.word	0x20003214

08008328 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008328:	b480      	push	{r7}
 800832a:	b085      	sub	sp, #20
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008330:	4b28      	ldr	r3, [pc, #160]	; (80083d4 <prvInsertBlockIntoFreeList+0xac>)
 8008332:	60fb      	str	r3, [r7, #12]
 8008334:	e002      	b.n	800833c <prvInsertBlockIntoFreeList+0x14>
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	60fb      	str	r3, [r7, #12]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	429a      	cmp	r2, r3
 8008344:	d8f7      	bhi.n	8008336 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	68ba      	ldr	r2, [r7, #8]
 8008350:	4413      	add	r3, r2
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	429a      	cmp	r2, r3
 8008356:	d108      	bne.n	800836a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	685a      	ldr	r2, [r3, #4]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	441a      	add	r2, r3
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	68ba      	ldr	r2, [r7, #8]
 8008374:	441a      	add	r2, r3
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	429a      	cmp	r2, r3
 800837c:	d118      	bne.n	80083b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	4b15      	ldr	r3, [pc, #84]	; (80083d8 <prvInsertBlockIntoFreeList+0xb0>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	429a      	cmp	r2, r3
 8008388:	d00d      	beq.n	80083a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	685a      	ldr	r2, [r3, #4]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	441a      	add	r2, r3
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	601a      	str	r2, [r3, #0]
 80083a4:	e008      	b.n	80083b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80083a6:	4b0c      	ldr	r3, [pc, #48]	; (80083d8 <prvInsertBlockIntoFreeList+0xb0>)
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	601a      	str	r2, [r3, #0]
 80083ae:	e003      	b.n	80083b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80083b8:	68fa      	ldr	r2, [r7, #12]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d002      	beq.n	80083c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083c6:	bf00      	nop
 80083c8:	3714      	adds	r7, #20
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr
 80083d2:	bf00      	nop
 80083d4:	200031f8 	.word	0x200031f8
 80083d8:	20003200 	.word	0x20003200

080083dc <__libc_init_array>:
 80083dc:	b570      	push	{r4, r5, r6, lr}
 80083de:	4d0d      	ldr	r5, [pc, #52]	; (8008414 <__libc_init_array+0x38>)
 80083e0:	4c0d      	ldr	r4, [pc, #52]	; (8008418 <__libc_init_array+0x3c>)
 80083e2:	1b64      	subs	r4, r4, r5
 80083e4:	10a4      	asrs	r4, r4, #2
 80083e6:	2600      	movs	r6, #0
 80083e8:	42a6      	cmp	r6, r4
 80083ea:	d109      	bne.n	8008400 <__libc_init_array+0x24>
 80083ec:	4d0b      	ldr	r5, [pc, #44]	; (800841c <__libc_init_array+0x40>)
 80083ee:	4c0c      	ldr	r4, [pc, #48]	; (8008420 <__libc_init_array+0x44>)
 80083f0:	f000 f8f2 	bl	80085d8 <_init>
 80083f4:	1b64      	subs	r4, r4, r5
 80083f6:	10a4      	asrs	r4, r4, #2
 80083f8:	2600      	movs	r6, #0
 80083fa:	42a6      	cmp	r6, r4
 80083fc:	d105      	bne.n	800840a <__libc_init_array+0x2e>
 80083fe:	bd70      	pop	{r4, r5, r6, pc}
 8008400:	f855 3b04 	ldr.w	r3, [r5], #4
 8008404:	4798      	blx	r3
 8008406:	3601      	adds	r6, #1
 8008408:	e7ee      	b.n	80083e8 <__libc_init_array+0xc>
 800840a:	f855 3b04 	ldr.w	r3, [r5], #4
 800840e:	4798      	blx	r3
 8008410:	3601      	adds	r6, #1
 8008412:	e7f2      	b.n	80083fa <__libc_init_array+0x1e>
 8008414:	0800874c 	.word	0x0800874c
 8008418:	0800874c 	.word	0x0800874c
 800841c:	0800874c 	.word	0x0800874c
 8008420:	08008750 	.word	0x08008750

08008424 <__retarget_lock_acquire_recursive>:
 8008424:	4770      	bx	lr

08008426 <__retarget_lock_release_recursive>:
 8008426:	4770      	bx	lr

08008428 <memcpy>:
 8008428:	440a      	add	r2, r1
 800842a:	4291      	cmp	r1, r2
 800842c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008430:	d100      	bne.n	8008434 <memcpy+0xc>
 8008432:	4770      	bx	lr
 8008434:	b510      	push	{r4, lr}
 8008436:	f811 4b01 	ldrb.w	r4, [r1], #1
 800843a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800843e:	4291      	cmp	r1, r2
 8008440:	d1f9      	bne.n	8008436 <memcpy+0xe>
 8008442:	bd10      	pop	{r4, pc}

08008444 <memset>:
 8008444:	4402      	add	r2, r0
 8008446:	4603      	mov	r3, r0
 8008448:	4293      	cmp	r3, r2
 800844a:	d100      	bne.n	800844e <memset+0xa>
 800844c:	4770      	bx	lr
 800844e:	f803 1b01 	strb.w	r1, [r3], #1
 8008452:	e7f9      	b.n	8008448 <memset+0x4>

08008454 <cleanup_glue>:
 8008454:	b538      	push	{r3, r4, r5, lr}
 8008456:	460c      	mov	r4, r1
 8008458:	6809      	ldr	r1, [r1, #0]
 800845a:	4605      	mov	r5, r0
 800845c:	b109      	cbz	r1, 8008462 <cleanup_glue+0xe>
 800845e:	f7ff fff9 	bl	8008454 <cleanup_glue>
 8008462:	4621      	mov	r1, r4
 8008464:	4628      	mov	r0, r5
 8008466:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800846a:	f000 b869 	b.w	8008540 <_free_r>
	...

08008470 <_reclaim_reent>:
 8008470:	4b2c      	ldr	r3, [pc, #176]	; (8008524 <_reclaim_reent+0xb4>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4283      	cmp	r3, r0
 8008476:	b570      	push	{r4, r5, r6, lr}
 8008478:	4604      	mov	r4, r0
 800847a:	d051      	beq.n	8008520 <_reclaim_reent+0xb0>
 800847c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800847e:	b143      	cbz	r3, 8008492 <_reclaim_reent+0x22>
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d14a      	bne.n	800851c <_reclaim_reent+0xac>
 8008486:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008488:	6819      	ldr	r1, [r3, #0]
 800848a:	b111      	cbz	r1, 8008492 <_reclaim_reent+0x22>
 800848c:	4620      	mov	r0, r4
 800848e:	f000 f857 	bl	8008540 <_free_r>
 8008492:	6961      	ldr	r1, [r4, #20]
 8008494:	b111      	cbz	r1, 800849c <_reclaim_reent+0x2c>
 8008496:	4620      	mov	r0, r4
 8008498:	f000 f852 	bl	8008540 <_free_r>
 800849c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800849e:	b111      	cbz	r1, 80084a6 <_reclaim_reent+0x36>
 80084a0:	4620      	mov	r0, r4
 80084a2:	f000 f84d 	bl	8008540 <_free_r>
 80084a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80084a8:	b111      	cbz	r1, 80084b0 <_reclaim_reent+0x40>
 80084aa:	4620      	mov	r0, r4
 80084ac:	f000 f848 	bl	8008540 <_free_r>
 80084b0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80084b2:	b111      	cbz	r1, 80084ba <_reclaim_reent+0x4a>
 80084b4:	4620      	mov	r0, r4
 80084b6:	f000 f843 	bl	8008540 <_free_r>
 80084ba:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80084bc:	b111      	cbz	r1, 80084c4 <_reclaim_reent+0x54>
 80084be:	4620      	mov	r0, r4
 80084c0:	f000 f83e 	bl	8008540 <_free_r>
 80084c4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80084c6:	b111      	cbz	r1, 80084ce <_reclaim_reent+0x5e>
 80084c8:	4620      	mov	r0, r4
 80084ca:	f000 f839 	bl	8008540 <_free_r>
 80084ce:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80084d0:	b111      	cbz	r1, 80084d8 <_reclaim_reent+0x68>
 80084d2:	4620      	mov	r0, r4
 80084d4:	f000 f834 	bl	8008540 <_free_r>
 80084d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084da:	b111      	cbz	r1, 80084e2 <_reclaim_reent+0x72>
 80084dc:	4620      	mov	r0, r4
 80084de:	f000 f82f 	bl	8008540 <_free_r>
 80084e2:	69a3      	ldr	r3, [r4, #24]
 80084e4:	b1e3      	cbz	r3, 8008520 <_reclaim_reent+0xb0>
 80084e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80084e8:	4620      	mov	r0, r4
 80084ea:	4798      	blx	r3
 80084ec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80084ee:	b1b9      	cbz	r1, 8008520 <_reclaim_reent+0xb0>
 80084f0:	4620      	mov	r0, r4
 80084f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80084f6:	f7ff bfad 	b.w	8008454 <cleanup_glue>
 80084fa:	5949      	ldr	r1, [r1, r5]
 80084fc:	b941      	cbnz	r1, 8008510 <_reclaim_reent+0xa0>
 80084fe:	3504      	adds	r5, #4
 8008500:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008502:	2d80      	cmp	r5, #128	; 0x80
 8008504:	68d9      	ldr	r1, [r3, #12]
 8008506:	d1f8      	bne.n	80084fa <_reclaim_reent+0x8a>
 8008508:	4620      	mov	r0, r4
 800850a:	f000 f819 	bl	8008540 <_free_r>
 800850e:	e7ba      	b.n	8008486 <_reclaim_reent+0x16>
 8008510:	680e      	ldr	r6, [r1, #0]
 8008512:	4620      	mov	r0, r4
 8008514:	f000 f814 	bl	8008540 <_free_r>
 8008518:	4631      	mov	r1, r6
 800851a:	e7ef      	b.n	80084fc <_reclaim_reent+0x8c>
 800851c:	2500      	movs	r5, #0
 800851e:	e7ef      	b.n	8008500 <_reclaim_reent+0x90>
 8008520:	bd70      	pop	{r4, r5, r6, pc}
 8008522:	bf00      	nop
 8008524:	20000010 	.word	0x20000010

08008528 <__malloc_lock>:
 8008528:	4801      	ldr	r0, [pc, #4]	; (8008530 <__malloc_lock+0x8>)
 800852a:	f7ff bf7b 	b.w	8008424 <__retarget_lock_acquire_recursive>
 800852e:	bf00      	nop
 8008530:	20003218 	.word	0x20003218

08008534 <__malloc_unlock>:
 8008534:	4801      	ldr	r0, [pc, #4]	; (800853c <__malloc_unlock+0x8>)
 8008536:	f7ff bf76 	b.w	8008426 <__retarget_lock_release_recursive>
 800853a:	bf00      	nop
 800853c:	20003218 	.word	0x20003218

08008540 <_free_r>:
 8008540:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008542:	2900      	cmp	r1, #0
 8008544:	d044      	beq.n	80085d0 <_free_r+0x90>
 8008546:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800854a:	9001      	str	r0, [sp, #4]
 800854c:	2b00      	cmp	r3, #0
 800854e:	f1a1 0404 	sub.w	r4, r1, #4
 8008552:	bfb8      	it	lt
 8008554:	18e4      	addlt	r4, r4, r3
 8008556:	f7ff ffe7 	bl	8008528 <__malloc_lock>
 800855a:	4a1e      	ldr	r2, [pc, #120]	; (80085d4 <_free_r+0x94>)
 800855c:	9801      	ldr	r0, [sp, #4]
 800855e:	6813      	ldr	r3, [r2, #0]
 8008560:	b933      	cbnz	r3, 8008570 <_free_r+0x30>
 8008562:	6063      	str	r3, [r4, #4]
 8008564:	6014      	str	r4, [r2, #0]
 8008566:	b003      	add	sp, #12
 8008568:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800856c:	f7ff bfe2 	b.w	8008534 <__malloc_unlock>
 8008570:	42a3      	cmp	r3, r4
 8008572:	d908      	bls.n	8008586 <_free_r+0x46>
 8008574:	6825      	ldr	r5, [r4, #0]
 8008576:	1961      	adds	r1, r4, r5
 8008578:	428b      	cmp	r3, r1
 800857a:	bf01      	itttt	eq
 800857c:	6819      	ldreq	r1, [r3, #0]
 800857e:	685b      	ldreq	r3, [r3, #4]
 8008580:	1949      	addeq	r1, r1, r5
 8008582:	6021      	streq	r1, [r4, #0]
 8008584:	e7ed      	b.n	8008562 <_free_r+0x22>
 8008586:	461a      	mov	r2, r3
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	b10b      	cbz	r3, 8008590 <_free_r+0x50>
 800858c:	42a3      	cmp	r3, r4
 800858e:	d9fa      	bls.n	8008586 <_free_r+0x46>
 8008590:	6811      	ldr	r1, [r2, #0]
 8008592:	1855      	adds	r5, r2, r1
 8008594:	42a5      	cmp	r5, r4
 8008596:	d10b      	bne.n	80085b0 <_free_r+0x70>
 8008598:	6824      	ldr	r4, [r4, #0]
 800859a:	4421      	add	r1, r4
 800859c:	1854      	adds	r4, r2, r1
 800859e:	42a3      	cmp	r3, r4
 80085a0:	6011      	str	r1, [r2, #0]
 80085a2:	d1e0      	bne.n	8008566 <_free_r+0x26>
 80085a4:	681c      	ldr	r4, [r3, #0]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	6053      	str	r3, [r2, #4]
 80085aa:	4421      	add	r1, r4
 80085ac:	6011      	str	r1, [r2, #0]
 80085ae:	e7da      	b.n	8008566 <_free_r+0x26>
 80085b0:	d902      	bls.n	80085b8 <_free_r+0x78>
 80085b2:	230c      	movs	r3, #12
 80085b4:	6003      	str	r3, [r0, #0]
 80085b6:	e7d6      	b.n	8008566 <_free_r+0x26>
 80085b8:	6825      	ldr	r5, [r4, #0]
 80085ba:	1961      	adds	r1, r4, r5
 80085bc:	428b      	cmp	r3, r1
 80085be:	bf04      	itt	eq
 80085c0:	6819      	ldreq	r1, [r3, #0]
 80085c2:	685b      	ldreq	r3, [r3, #4]
 80085c4:	6063      	str	r3, [r4, #4]
 80085c6:	bf04      	itt	eq
 80085c8:	1949      	addeq	r1, r1, r5
 80085ca:	6021      	streq	r1, [r4, #0]
 80085cc:	6054      	str	r4, [r2, #4]
 80085ce:	e7ca      	b.n	8008566 <_free_r+0x26>
 80085d0:	b003      	add	sp, #12
 80085d2:	bd30      	pop	{r4, r5, pc}
 80085d4:	2000321c 	.word	0x2000321c

080085d8 <_init>:
 80085d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085da:	bf00      	nop
 80085dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085de:	bc08      	pop	{r3}
 80085e0:	469e      	mov	lr, r3
 80085e2:	4770      	bx	lr

080085e4 <_fini>:
 80085e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085e6:	bf00      	nop
 80085e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ea:	bc08      	pop	{r3}
 80085ec:	469e      	mov	lr, r3
 80085ee:	4770      	bx	lr
