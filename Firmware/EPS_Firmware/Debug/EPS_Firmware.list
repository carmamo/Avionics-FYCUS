
EPS_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e50  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08007fe0  08007fe0  00017fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080fc  080080fc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080080fc  080080fc  000180fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008104  08008104  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008104  08008104  00018104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008108  08008108  00018108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800810c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d08  20000074  08008180  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d7c  08008180  00021d7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000238e1  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ea3  00000000  00000000  00043985  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d88  00000000  00000000  00047828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c10  00000000  00000000  000495b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025d01  00000000  00000000  0004b1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021214  00000000  00000000  00070ec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed28f  00000000  00000000  000920d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017f364  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008238  00000000  00000000  0017f3b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007fc8 	.word	0x08007fc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007fc8 	.word	0x08007fc8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */

	__WFI();
 80004d8:	bf30      	wfi
}
 80004da:	bf00      	nop
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e8:	f000 fe8b 	bl	8001202 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ec:	f000 f832 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f0:	f000 fa66 	bl	80009c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004f4:	f000 f8e2 	bl	80006bc <MX_I2C1_Init>
  MX_I2C2_Init();
 80004f8:	f000 f920 	bl	800073c <MX_I2C2_Init>
  MX_ADC1_Init();
 80004fc:	f000 f87a 	bl	80005f4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000500:	f000 f9fe 	bl	8000900 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000504:	f000 f998 	bl	8000838 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000508:	f000 f958 	bl	80007bc <MX_SPI1_Init>
  MX_USART3_UART_Init();
 800050c:	f000 fa28 	bl	8000960 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000510:	f004 fee2 	bl	80052d8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000514:	4a09      	ldr	r2, [pc, #36]	; (800053c <main+0x58>)
 8000516:	2100      	movs	r1, #0
 8000518:	4809      	ldr	r0, [pc, #36]	; (8000540 <main+0x5c>)
 800051a:	f004 ff27 	bl	800536c <osThreadNew>
 800051e:	4603      	mov	r3, r0
 8000520:	4a08      	ldr	r2, [pc, #32]	; (8000544 <main+0x60>)
 8000522:	6013      	str	r3, [r2, #0]

  /* creation of Blinky */
  BlinkyHandle = osThreadNew(Prv_Blinky, NULL, &Blinky_attributes);
 8000524:	4a08      	ldr	r2, [pc, #32]	; (8000548 <main+0x64>)
 8000526:	2100      	movs	r1, #0
 8000528:	4808      	ldr	r0, [pc, #32]	; (800054c <main+0x68>)
 800052a:	f004 ff1f 	bl	800536c <osThreadNew>
 800052e:	4603      	mov	r3, r0
 8000530:	4a07      	ldr	r2, [pc, #28]	; (8000550 <main+0x6c>)
 8000532:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000534:	f004 fef4 	bl	8005320 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000538:	e7fe      	b.n	8000538 <main+0x54>
 800053a:	bf00      	nop
 800053c:	0800800c 	.word	0x0800800c
 8000540:	08000ac9 	.word	0x08000ac9
 8000544:	20000354 	.word	0x20000354
 8000548:	08008030 	.word	0x08008030
 800054c:	08000ad9 	.word	0x08000ad9
 8000550:	20000358 	.word	0x20000358

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b096      	sub	sp, #88	; 0x58
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 0314 	add.w	r3, r7, #20
 800055e:	2244      	movs	r2, #68	; 0x44
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f007 fc66 	bl	8007e34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	463b      	mov	r3, r7
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000576:	f44f 7000 	mov.w	r0, #512	; 0x200
 800057a:	f002 f8d7 	bl	800272c <HAL_PWREx_ControlVoltageScaling>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000584:	f000 faf6 	bl	8000b74 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000588:	2301      	movs	r3, #1
 800058a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800058c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000590:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000592:	2302      	movs	r3, #2
 8000594:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000596:	2303      	movs	r3, #3
 8000598:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 800059a:	2302      	movs	r3, #2
 800059c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 800059e:	2310      	movs	r3, #16
 80005a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005a2:	2307      	movs	r3, #7
 80005a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005a6:	2302      	movs	r3, #2
 80005a8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005aa:	2302      	movs	r3, #2
 80005ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ae:	f107 0314 	add.w	r3, r7, #20
 80005b2:	4618      	mov	r0, r3
 80005b4:	f002 f910 	bl	80027d8 <HAL_RCC_OscConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80005be:	f000 fad9 	bl	8000b74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c2:	230f      	movs	r3, #15
 80005c4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c6:	2303      	movs	r3, #3
 80005c8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005d6:	463b      	mov	r3, r7
 80005d8:	2104      	movs	r1, #4
 80005da:	4618      	mov	r0, r3
 80005dc:	f002 fd10 	bl	8003000 <HAL_RCC_ClockConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005e6:	f000 fac5 	bl	8000b74 <Error_Handler>
  }
}
 80005ea:	bf00      	nop
 80005ec:	3758      	adds	r7, #88	; 0x58
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
	...

080005f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b086      	sub	sp, #24
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005fa:	463b      	mov	r3, r7
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]
 8000608:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800060a:	4b29      	ldr	r3, [pc, #164]	; (80006b0 <MX_ADC1_Init+0xbc>)
 800060c:	4a29      	ldr	r2, [pc, #164]	; (80006b4 <MX_ADC1_Init+0xc0>)
 800060e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000610:	4b27      	ldr	r3, [pc, #156]	; (80006b0 <MX_ADC1_Init+0xbc>)
 8000612:	2200      	movs	r2, #0
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b26      	ldr	r3, [pc, #152]	; (80006b0 <MX_ADC1_Init+0xbc>)
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800061c:	4b24      	ldr	r3, [pc, #144]	; (80006b0 <MX_ADC1_Init+0xbc>)
 800061e:	2200      	movs	r2, #0
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000622:	4b23      	ldr	r3, [pc, #140]	; (80006b0 <MX_ADC1_Init+0xbc>)
 8000624:	2200      	movs	r2, #0
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000628:	4b21      	ldr	r3, [pc, #132]	; (80006b0 <MX_ADC1_Init+0xbc>)
 800062a:	2204      	movs	r2, #4
 800062c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800062e:	4b20      	ldr	r3, [pc, #128]	; (80006b0 <MX_ADC1_Init+0xbc>)
 8000630:	2200      	movs	r2, #0
 8000632:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000634:	4b1e      	ldr	r3, [pc, #120]	; (80006b0 <MX_ADC1_Init+0xbc>)
 8000636:	2200      	movs	r2, #0
 8000638:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800063a:	4b1d      	ldr	r3, [pc, #116]	; (80006b0 <MX_ADC1_Init+0xbc>)
 800063c:	2201      	movs	r2, #1
 800063e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000640:	4b1b      	ldr	r3, [pc, #108]	; (80006b0 <MX_ADC1_Init+0xbc>)
 8000642:	2200      	movs	r2, #0
 8000644:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000648:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <MX_ADC1_Init+0xbc>)
 800064a:	2200      	movs	r2, #0
 800064c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800064e:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <MX_ADC1_Init+0xbc>)
 8000650:	2200      	movs	r2, #0
 8000652:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000654:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <MX_ADC1_Init+0xbc>)
 8000656:	2200      	movs	r2, #0
 8000658:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800065c:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <MX_ADC1_Init+0xbc>)
 800065e:	2200      	movs	r2, #0
 8000660:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000662:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <MX_ADC1_Init+0xbc>)
 8000664:	2200      	movs	r2, #0
 8000666:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800066a:	4811      	ldr	r0, [pc, #68]	; (80006b0 <MX_ADC1_Init+0xbc>)
 800066c:	f000 ff8e 	bl	800158c <HAL_ADC_Init>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000676:	f000 fa7d 	bl	8000b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800067a:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <MX_ADC1_Init+0xc4>)
 800067c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800067e:	2306      	movs	r3, #6
 8000680:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000682:	2300      	movs	r3, #0
 8000684:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000686:	237f      	movs	r3, #127	; 0x7f
 8000688:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800068a:	2304      	movs	r3, #4
 800068c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000692:	463b      	mov	r3, r7
 8000694:	4619      	mov	r1, r3
 8000696:	4806      	ldr	r0, [pc, #24]	; (80006b0 <MX_ADC1_Init+0xbc>)
 8000698:	f001 f8c0 	bl	800181c <HAL_ADC_ConfigChannel>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80006a2:	f000 fa67 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	3718      	adds	r7, #24
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000090 	.word	0x20000090
 80006b4:	50040000 	.word	0x50040000
 80006b8:	2e300800 	.word	0x2e300800

080006bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006c0:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <MX_I2C1_Init+0x74>)
 80006c2:	4a1c      	ldr	r2, [pc, #112]	; (8000734 <MX_I2C1_Init+0x78>)
 80006c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80006c6:	4b1a      	ldr	r3, [pc, #104]	; (8000730 <MX_I2C1_Init+0x74>)
 80006c8:	4a1b      	ldr	r2, [pc, #108]	; (8000738 <MX_I2C1_Init+0x7c>)
 80006ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006cc:	4b18      	ldr	r3, [pc, #96]	; (8000730 <MX_I2C1_Init+0x74>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d2:	4b17      	ldr	r3, [pc, #92]	; (8000730 <MX_I2C1_Init+0x74>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d8:	4b15      	ldr	r3, [pc, #84]	; (8000730 <MX_I2C1_Init+0x74>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006de:	4b14      	ldr	r3, [pc, #80]	; (8000730 <MX_I2C1_Init+0x74>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <MX_I2C1_Init+0x74>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ea:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_I2C1_Init+0x74>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <MX_I2C1_Init+0x74>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006f6:	480e      	ldr	r0, [pc, #56]	; (8000730 <MX_I2C1_Init+0x74>)
 80006f8:	f001 fee4 	bl	80024c4 <HAL_I2C_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000702:	f000 fa37 	bl	8000b74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000706:	2100      	movs	r1, #0
 8000708:	4809      	ldr	r0, [pc, #36]	; (8000730 <MX_I2C1_Init+0x74>)
 800070a:	f001 ff6a 	bl	80025e2 <HAL_I2CEx_ConfigAnalogFilter>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000714:	f000 fa2e 	bl	8000b74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000718:	2100      	movs	r1, #0
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <MX_I2C1_Init+0x74>)
 800071c:	f001 ffac 	bl	8002678 <HAL_I2CEx_ConfigDigitalFilter>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000726:	f000 fa25 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	200000f4 	.word	0x200000f4
 8000734:	40005400 	.word	0x40005400
 8000738:	10909cec 	.word	0x10909cec

0800073c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000740:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <MX_I2C2_Init+0x74>)
 8000742:	4a1c      	ldr	r2, [pc, #112]	; (80007b4 <MX_I2C2_Init+0x78>)
 8000744:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000746:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <MX_I2C2_Init+0x74>)
 8000748:	4a1b      	ldr	r2, [pc, #108]	; (80007b8 <MX_I2C2_Init+0x7c>)
 800074a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800074c:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <MX_I2C2_Init+0x74>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000752:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <MX_I2C2_Init+0x74>)
 8000754:	2201      	movs	r2, #1
 8000756:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000758:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <MX_I2C2_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800075e:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <MX_I2C2_Init+0x74>)
 8000760:	2200      	movs	r2, #0
 8000762:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000764:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <MX_I2C2_Init+0x74>)
 8000766:	2200      	movs	r2, #0
 8000768:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_I2C2_Init+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <MX_I2C2_Init+0x74>)
 8000772:	2200      	movs	r2, #0
 8000774:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000776:	480e      	ldr	r0, [pc, #56]	; (80007b0 <MX_I2C2_Init+0x74>)
 8000778:	f001 fea4 	bl	80024c4 <HAL_I2C_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000782:	f000 f9f7 	bl	8000b74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000786:	2100      	movs	r1, #0
 8000788:	4809      	ldr	r0, [pc, #36]	; (80007b0 <MX_I2C2_Init+0x74>)
 800078a:	f001 ff2a 	bl	80025e2 <HAL_I2CEx_ConfigAnalogFilter>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000794:	f000 f9ee 	bl	8000b74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000798:	2100      	movs	r1, #0
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_I2C2_Init+0x74>)
 800079c:	f001 ff6c 	bl	8002678 <HAL_I2CEx_ConfigDigitalFilter>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80007a6:	f000 f9e5 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000148 	.word	0x20000148
 80007b4:	40005800 	.word	0x40005800
 80007b8:	10909cec 	.word	0x10909cec

080007bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007c0:	4b1b      	ldr	r3, [pc, #108]	; (8000830 <MX_SPI1_Init+0x74>)
 80007c2:	4a1c      	ldr	r2, [pc, #112]	; (8000834 <MX_SPI1_Init+0x78>)
 80007c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007c6:	4b1a      	ldr	r3, [pc, #104]	; (8000830 <MX_SPI1_Init+0x74>)
 80007c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007ce:	4b18      	ldr	r3, [pc, #96]	; (8000830 <MX_SPI1_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80007d4:	4b16      	ldr	r3, [pc, #88]	; (8000830 <MX_SPI1_Init+0x74>)
 80007d6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80007da:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007dc:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_SPI1_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007e2:	4b13      	ldr	r3, [pc, #76]	; (8000830 <MX_SPI1_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_SPI1_Init+0x74>)
 80007ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007ee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_SPI1_Init+0x74>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_SPI1_Init+0x74>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_SPI1_Init+0x74>)
 80007fe:	2200      	movs	r2, #0
 8000800:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <MX_SPI1_Init+0x74>)
 8000804:	2200      	movs	r2, #0
 8000806:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_SPI1_Init+0x74>)
 800080a:	2207      	movs	r2, #7
 800080c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <MX_SPI1_Init+0x74>)
 8000810:	2200      	movs	r2, #0
 8000812:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_SPI1_Init+0x74>)
 8000816:	2208      	movs	r2, #8
 8000818:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_SPI1_Init+0x74>)
 800081c:	f003 f950 	bl	8003ac0 <HAL_SPI_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000826:	f000 f9a5 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	2000019c 	.word	0x2000019c
 8000834:	40013000 	.word	0x40013000

08000838 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08a      	sub	sp, #40	; 0x28
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800084a:	463b      	mov	r3, r7
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
 8000858:	615a      	str	r2, [r3, #20]
 800085a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800085c:	4b27      	ldr	r3, [pc, #156]	; (80008fc <MX_TIM2_Init+0xc4>)
 800085e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000862:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000864:	4b25      	ldr	r3, [pc, #148]	; (80008fc <MX_TIM2_Init+0xc4>)
 8000866:	2200      	movs	r2, #0
 8000868:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800086a:	4b24      	ldr	r3, [pc, #144]	; (80008fc <MX_TIM2_Init+0xc4>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000870:	4b22      	ldr	r3, [pc, #136]	; (80008fc <MX_TIM2_Init+0xc4>)
 8000872:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000876:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000878:	4b20      	ldr	r3, [pc, #128]	; (80008fc <MX_TIM2_Init+0xc4>)
 800087a:	2200      	movs	r2, #0
 800087c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800087e:	4b1f      	ldr	r3, [pc, #124]	; (80008fc <MX_TIM2_Init+0xc4>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000884:	481d      	ldr	r0, [pc, #116]	; (80008fc <MX_TIM2_Init+0xc4>)
 8000886:	f003 fa73 	bl	8003d70 <HAL_TIM_PWM_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000890:	f000 f970 	bl	8000b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000898:	2300      	movs	r3, #0
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	4619      	mov	r1, r3
 80008a2:	4816      	ldr	r0, [pc, #88]	; (80008fc <MX_TIM2_Init+0xc4>)
 80008a4:	f003 fff8 	bl	8004898 <HAL_TIMEx_MasterConfigSynchronization>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80008ae:	f000 f961 	bl	8000b74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008b2:	2360      	movs	r3, #96	; 0x60
 80008b4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008c2:	463b      	mov	r3, r7
 80008c4:	2208      	movs	r2, #8
 80008c6:	4619      	mov	r1, r3
 80008c8:	480c      	ldr	r0, [pc, #48]	; (80008fc <MX_TIM2_Init+0xc4>)
 80008ca:	f003 fbc7 	bl	800405c <HAL_TIM_PWM_ConfigChannel>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80008d4:	f000 f94e 	bl	8000b74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008d8:	463b      	mov	r3, r7
 80008da:	220c      	movs	r2, #12
 80008dc:	4619      	mov	r1, r3
 80008de:	4807      	ldr	r0, [pc, #28]	; (80008fc <MX_TIM2_Init+0xc4>)
 80008e0:	f003 fbbc 	bl	800405c <HAL_TIM_PWM_ConfigChannel>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80008ea:	f000 f943 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008ee:	4803      	ldr	r0, [pc, #12]	; (80008fc <MX_TIM2_Init+0xc4>)
 80008f0:	f000 faea 	bl	8000ec8 <HAL_TIM_MspPostInit>

}
 80008f4:	bf00      	nop
 80008f6:	3728      	adds	r7, #40	; 0x28
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000200 	.word	0x20000200

08000900 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000904:	4b14      	ldr	r3, [pc, #80]	; (8000958 <MX_USART1_UART_Init+0x58>)
 8000906:	4a15      	ldr	r2, [pc, #84]	; (800095c <MX_USART1_UART_Init+0x5c>)
 8000908:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800090a:	4b13      	ldr	r3, [pc, #76]	; (8000958 <MX_USART1_UART_Init+0x58>)
 800090c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000910:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000912:	4b11      	ldr	r3, [pc, #68]	; (8000958 <MX_USART1_UART_Init+0x58>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000918:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <MX_USART1_UART_Init+0x58>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <MX_USART1_UART_Init+0x58>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <MX_USART1_UART_Init+0x58>)
 8000926:	220c      	movs	r2, #12
 8000928:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <MX_USART1_UART_Init+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <MX_USART1_UART_Init+0x58>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <MX_USART1_UART_Init+0x58>)
 8000938:	2200      	movs	r2, #0
 800093a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <MX_USART1_UART_Init+0x58>)
 800093e:	2200      	movs	r2, #0
 8000940:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_USART1_UART_Init+0x58>)
 8000944:	f004 f82c 	bl	80049a0 <HAL_UART_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800094e:	f000 f911 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	2000024c 	.word	0x2000024c
 800095c:	40013800 	.word	0x40013800

08000960 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000964:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <MX_USART3_UART_Init+0x58>)
 8000966:	4a15      	ldr	r2, [pc, #84]	; (80009bc <MX_USART3_UART_Init+0x5c>)
 8000968:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800096a:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <MX_USART3_UART_Init+0x58>)
 800096c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000970:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <MX_USART3_UART_Init+0x58>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000978:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <MX_USART3_UART_Init+0x58>)
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <MX_USART3_UART_Init+0x58>)
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <MX_USART3_UART_Init+0x58>)
 8000986:	220c      	movs	r2, #12
 8000988:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098a:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <MX_USART3_UART_Init+0x58>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000990:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <MX_USART3_UART_Init+0x58>)
 8000992:	2200      	movs	r2, #0
 8000994:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000996:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <MX_USART3_UART_Init+0x58>)
 8000998:	2200      	movs	r2, #0
 800099a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <MX_USART3_UART_Init+0x58>)
 800099e:	2200      	movs	r2, #0
 80009a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009a2:	4805      	ldr	r0, [pc, #20]	; (80009b8 <MX_USART3_UART_Init+0x58>)
 80009a4:	f003 fffc 	bl	80049a0 <HAL_UART_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009ae:	f000 f8e1 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	200002d0 	.word	0x200002d0
 80009bc:	40004800 	.word	0x40004800

080009c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08a      	sub	sp, #40	; 0x28
 80009c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c6:	f107 0314 	add.w	r3, r7, #20
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
 80009d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d6:	4b39      	ldr	r3, [pc, #228]	; (8000abc <MX_GPIO_Init+0xfc>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009da:	4a38      	ldr	r2, [pc, #224]	; (8000abc <MX_GPIO_Init+0xfc>)
 80009dc:	f043 0304 	orr.w	r3, r3, #4
 80009e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e2:	4b36      	ldr	r3, [pc, #216]	; (8000abc <MX_GPIO_Init+0xfc>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e6:	f003 0304 	and.w	r3, r3, #4
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ee:	4b33      	ldr	r3, [pc, #204]	; (8000abc <MX_GPIO_Init+0xfc>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f2:	4a32      	ldr	r2, [pc, #200]	; (8000abc <MX_GPIO_Init+0xfc>)
 80009f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009fa:	4b30      	ldr	r3, [pc, #192]	; (8000abc <MX_GPIO_Init+0xfc>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	4b2d      	ldr	r3, [pc, #180]	; (8000abc <MX_GPIO_Init+0xfc>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0a:	4a2c      	ldr	r2, [pc, #176]	; (8000abc <MX_GPIO_Init+0xfc>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a12:	4b2a      	ldr	r3, [pc, #168]	; (8000abc <MX_GPIO_Init+0xfc>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1e:	4b27      	ldr	r3, [pc, #156]	; (8000abc <MX_GPIO_Init+0xfc>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	4a26      	ldr	r2, [pc, #152]	; (8000abc <MX_GPIO_Init+0xfc>)
 8000a24:	f043 0302 	orr.w	r3, r3, #2
 8000a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2a:	4b24      	ldr	r3, [pc, #144]	; (8000abc <MX_GPIO_Init+0xfc>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	f003 0302 	and.w	r3, r3, #2
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_R_Pin|LED_G_Pin|LED_YL_Pin, GPIO_PIN_SET);
 8000a36:	2201      	movs	r2, #1
 8000a38:	210e      	movs	r1, #14
 8000a3a:	4821      	ldr	r0, [pc, #132]	; (8000ac0 <MX_GPIO_Init+0x100>)
 8000a3c:	f001 fd2a 	bl	8002494 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 EN_5V_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|EN_5V_Pin;
 8000a40:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 8000a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a46:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4619      	mov	r1, r3
 8000a56:	481a      	ldr	r0, [pc, #104]	; (8000ac0 <MX_GPIO_Init+0x100>)
 8000a58:	f001 fba2 	bl	80021a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_R_Pin LED_G_Pin LED_YL_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_YL_Pin;
 8000a5c:	230e      	movs	r3, #14
 8000a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	4813      	ldr	r0, [pc, #76]	; (8000ac0 <MX_GPIO_Init+0x100>)
 8000a74:	f001 fb94 	bl	80021a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SBMALERT_Pin */
  GPIO_InitStruct.Pin = SBMALERT_Pin;
 8000a78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a7e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SBMALERT_GPIO_Port, &GPIO_InitStruct);
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	480d      	ldr	r0, [pc, #52]	; (8000ac4 <MX_GPIO_Init+0x104>)
 8000a90:	f001 fb86 	bl	80021a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_3V3_Pin */
  GPIO_InitStruct.Pin = EN_3V3_Pin;
 8000a94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a9a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EN_3V3_GPIO_Port, &GPIO_InitStruct);
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aae:	f001 fb77 	bl	80021a0 <HAL_GPIO_Init>

}
 8000ab2:	bf00      	nop
 8000ab4:	3728      	adds	r7, #40	; 0x28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	48000800 	.word	0x48000800
 8000ac4:	48000400 	.word	0x48000400

08000ac8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	f004 fcdd 	bl	8005490 <osDelay>
 8000ad6:	e7fb      	b.n	8000ad0 <StartDefaultTask+0x8>

08000ad8 <Prv_Blinky>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Prv_Blinky */
void Prv_Blinky(void *argument)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Prv_Blinky */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2104      	movs	r1, #4
 8000ae4:	4819      	ldr	r0, [pc, #100]	; (8000b4c <Prv_Blinky+0x74>)
 8000ae6:	f001 fcd5 	bl	8002494 <HAL_GPIO_WritePin>
	  osDelay(2000);
 8000aea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000aee:	f004 fccf 	bl	8005490 <osDelay>
	  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 8000af2:	2201      	movs	r2, #1
 8000af4:	2104      	movs	r1, #4
 8000af6:	4815      	ldr	r0, [pc, #84]	; (8000b4c <Prv_Blinky+0x74>)
 8000af8:	f001 fccc 	bl	8002494 <HAL_GPIO_WritePin>
	  for(int i = 0; i < 4; i++)
 8000afc:	2300      	movs	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	e012      	b.n	8000b28 <Prv_Blinky+0x50>
	  {
	  HAL_GPIO_WritePin(LED_YL_GPIO_Port, LED_YL_Pin, GPIO_PIN_RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2108      	movs	r1, #8
 8000b06:	4811      	ldr	r0, [pc, #68]	; (8000b4c <Prv_Blinky+0x74>)
 8000b08:	f001 fcc4 	bl	8002494 <HAL_GPIO_WritePin>
	  osDelay(250);
 8000b0c:	20fa      	movs	r0, #250	; 0xfa
 8000b0e:	f004 fcbf 	bl	8005490 <osDelay>
	  HAL_GPIO_WritePin(LED_YL_GPIO_Port, LED_YL_Pin, GPIO_PIN_SET);
 8000b12:	2201      	movs	r2, #1
 8000b14:	2108      	movs	r1, #8
 8000b16:	480d      	ldr	r0, [pc, #52]	; (8000b4c <Prv_Blinky+0x74>)
 8000b18:	f001 fcbc 	bl	8002494 <HAL_GPIO_WritePin>
	  osDelay(250);
 8000b1c:	20fa      	movs	r0, #250	; 0xfa
 8000b1e:	f004 fcb7 	bl	8005490 <osDelay>
	  for(int i = 0; i < 4; i++)
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	3301      	adds	r3, #1
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	2b03      	cmp	r3, #3
 8000b2c:	dde9      	ble.n	8000b02 <Prv_Blinky+0x2a>
	  }
	  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2102      	movs	r1, #2
 8000b32:	4806      	ldr	r0, [pc, #24]	; (8000b4c <Prv_Blinky+0x74>)
 8000b34:	f001 fcae 	bl	8002494 <HAL_GPIO_WritePin>
	  osDelay(2000);
 8000b38:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b3c:	f004 fca8 	bl	8005490 <osDelay>
	  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 8000b40:	2201      	movs	r2, #1
 8000b42:	2102      	movs	r1, #2
 8000b44:	4801      	ldr	r0, [pc, #4]	; (8000b4c <Prv_Blinky+0x74>)
 8000b46:	f001 fca5 	bl	8002494 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8000b4a:	e7c9      	b.n	8000ae0 <Prv_Blinky+0x8>
 8000b4c:	48000800 	.word	0x48000800

08000b50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a04      	ldr	r2, [pc, #16]	; (8000b70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d101      	bne.n	8000b66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b62:	f000 fb67 	bl	8001234 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40012c00 	.word	0x40012c00

08000b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b78:	b672      	cpsid	i
}
 8000b7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <Error_Handler+0x8>
	...

08000b80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b86:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <HAL_MspInit+0x4c>)
 8000b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b8a:	4a10      	ldr	r2, [pc, #64]	; (8000bcc <HAL_MspInit+0x4c>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	6613      	str	r3, [r2, #96]	; 0x60
 8000b92:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <HAL_MspInit+0x4c>)
 8000b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <HAL_MspInit+0x4c>)
 8000ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba2:	4a0a      	ldr	r2, [pc, #40]	; (8000bcc <HAL_MspInit+0x4c>)
 8000ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba8:	6593      	str	r3, [r2, #88]	; 0x58
 8000baa:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <HAL_MspInit+0x4c>)
 8000bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	210f      	movs	r1, #15
 8000bba:	f06f 0001 	mvn.w	r0, #1
 8000bbe:	f001 fac5 	bl	800214c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b0a2      	sub	sp, #136	; 0x88
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000be8:	f107 0318 	add.w	r3, r7, #24
 8000bec:	225c      	movs	r2, #92	; 0x5c
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f007 f91f 	bl	8007e34 <memset>
  if(hadc->Instance==ADC1)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a31      	ldr	r2, [pc, #196]	; (8000cc0 <HAL_ADC_MspInit+0xf0>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d15b      	bne.n	8000cb8 <HAL_ADC_MspInit+0xe8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c00:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c04:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000c06:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c0a:	66bb      	str	r3, [r7, #104]	; 0x68
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 8000c10:	2302      	movs	r3, #2
 8000c12:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000c14:	2308      	movs	r3, #8
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000c18:	2307      	movs	r3, #7
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000c20:	2302      	movs	r3, #2
 8000c22:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000c24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c28:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c2a:	f107 0318 	add.w	r3, r7, #24
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f002 fc3c 	bl	80034ac <HAL_RCCEx_PeriphCLKConfig>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000c3a:	f7ff ff9b 	bl	8000b74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c3e:	4b21      	ldr	r3, [pc, #132]	; (8000cc4 <HAL_ADC_MspInit+0xf4>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c42:	4a20      	ldr	r2, [pc, #128]	; (8000cc4 <HAL_ADC_MspInit+0xf4>)
 8000c44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c4a:	4b1e      	ldr	r3, [pc, #120]	; (8000cc4 <HAL_ADC_MspInit+0xf4>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	4b1b      	ldr	r3, [pc, #108]	; (8000cc4 <HAL_ADC_MspInit+0xf4>)
 8000c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5a:	4a1a      	ldr	r2, [pc, #104]	; (8000cc4 <HAL_ADC_MspInit+0xf4>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c62:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <HAL_ADC_MspInit+0xf4>)
 8000c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6e:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <HAL_ADC_MspInit+0xf4>)
 8000c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c72:	4a14      	ldr	r2, [pc, #80]	; (8000cc4 <HAL_ADC_MspInit+0xf4>)
 8000c74:	f043 0304 	orr.w	r3, r3, #4
 8000c78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c7a:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <HAL_ADC_MspInit+0xf4>)
 8000c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7e:	f003 0304 	and.w	r3, r3, #4
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c86:	23c0      	movs	r3, #192	; 0xc0
 8000c88:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c8a:	230b      	movs	r3, #11
 8000c8c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c92:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000c96:	4619      	mov	r1, r3
 8000c98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c9c:	f001 fa80 	bl	80021a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000ca0:	2330      	movs	r3, #48	; 0x30
 8000ca2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ca4:	230b      	movs	r3, #11
 8000ca6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cac:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <HAL_ADC_MspInit+0xf8>)
 8000cb4:	f001 fa74 	bl	80021a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cb8:	bf00      	nop
 8000cba:	3788      	adds	r7, #136	; 0x88
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	50040000 	.word	0x50040000
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	48000800 	.word	0x48000800

08000ccc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b0a2      	sub	sp, #136	; 0x88
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ce4:	f107 0318 	add.w	r3, r7, #24
 8000ce8:	225c      	movs	r2, #92	; 0x5c
 8000cea:	2100      	movs	r1, #0
 8000cec:	4618      	mov	r0, r3
 8000cee:	f007 f8a1 	bl	8007e34 <memset>
  if(hi2c->Instance==I2C1)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a3f      	ldr	r2, [pc, #252]	; (8000df4 <HAL_I2C_MspInit+0x128>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d139      	bne.n	8000d70 <HAL_I2C_MspInit+0xa4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000cfc:	2340      	movs	r3, #64	; 0x40
 8000cfe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d00:	2300      	movs	r3, #0
 8000d02:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d04:	f107 0318 	add.w	r3, r7, #24
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f002 fbcf 	bl	80034ac <HAL_RCCEx_PeriphCLKConfig>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000d14:	f7ff ff2e 	bl	8000b74 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d18:	4b37      	ldr	r3, [pc, #220]	; (8000df8 <HAL_I2C_MspInit+0x12c>)
 8000d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1c:	4a36      	ldr	r2, [pc, #216]	; (8000df8 <HAL_I2C_MspInit+0x12c>)
 8000d1e:	f043 0302 	orr.w	r3, r3, #2
 8000d22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d24:	4b34      	ldr	r3, [pc, #208]	; (8000df8 <HAL_I2C_MspInit+0x12c>)
 8000d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d28:	f003 0302 	and.w	r3, r3, #2
 8000d2c:	617b      	str	r3, [r7, #20]
 8000d2e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d30:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d34:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d36:	2312      	movs	r3, #18
 8000d38:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d44:	2304      	movs	r3, #4
 8000d46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000d4e:	4619      	mov	r1, r3
 8000d50:	482a      	ldr	r0, [pc, #168]	; (8000dfc <HAL_I2C_MspInit+0x130>)
 8000d52:	f001 fa25 	bl	80021a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d56:	4b28      	ldr	r3, [pc, #160]	; (8000df8 <HAL_I2C_MspInit+0x12c>)
 8000d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d5a:	4a27      	ldr	r2, [pc, #156]	; (8000df8 <HAL_I2C_MspInit+0x12c>)
 8000d5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d60:	6593      	str	r3, [r2, #88]	; 0x58
 8000d62:	4b25      	ldr	r3, [pc, #148]	; (8000df8 <HAL_I2C_MspInit+0x12c>)
 8000d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000d6e:	e03d      	b.n	8000dec <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C2)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a22      	ldr	r2, [pc, #136]	; (8000e00 <HAL_I2C_MspInit+0x134>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d138      	bne.n	8000dec <HAL_I2C_MspInit+0x120>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000d7a:	2380      	movs	r3, #128	; 0x80
 8000d7c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d82:	f107 0318 	add.w	r3, r7, #24
 8000d86:	4618      	mov	r0, r3
 8000d88:	f002 fb90 	bl	80034ac <HAL_RCCEx_PeriphCLKConfig>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <HAL_I2C_MspInit+0xca>
      Error_Handler();
 8000d92:	f7ff feef 	bl	8000b74 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d96:	4b18      	ldr	r3, [pc, #96]	; (8000df8 <HAL_I2C_MspInit+0x12c>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9a:	4a17      	ldr	r2, [pc, #92]	; (8000df8 <HAL_I2C_MspInit+0x12c>)
 8000d9c:	f043 0302 	orr.w	r3, r3, #2
 8000da0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000da2:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <HAL_I2C_MspInit+0x12c>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da6:	f003 0302 	and.w	r3, r3, #2
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000dae:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000db2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000db4:	2312      	movs	r3, #18
 8000db6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000dc2:	2304      	movs	r3, #4
 8000dc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000dcc:	4619      	mov	r1, r3
 8000dce:	480b      	ldr	r0, [pc, #44]	; (8000dfc <HAL_I2C_MspInit+0x130>)
 8000dd0:	f001 f9e6 	bl	80021a0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000dd4:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <HAL_I2C_MspInit+0x12c>)
 8000dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd8:	4a07      	ldr	r2, [pc, #28]	; (8000df8 <HAL_I2C_MspInit+0x12c>)
 8000dda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dde:	6593      	str	r3, [r2, #88]	; 0x58
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <HAL_I2C_MspInit+0x12c>)
 8000de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	68bb      	ldr	r3, [r7, #8]
}
 8000dec:	bf00      	nop
 8000dee:	3788      	adds	r7, #136	; 0x88
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40005400 	.word	0x40005400
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	48000400 	.word	0x48000400
 8000e00:	40005800 	.word	0x40005800

08000e04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08a      	sub	sp, #40	; 0x28
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a18      	ldr	r2, [pc, #96]	; (8000e84 <HAL_SPI_MspInit+0x80>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d129      	bne.n	8000e7a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e26:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <HAL_SPI_MspInit+0x84>)
 8000e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e2a:	4a17      	ldr	r2, [pc, #92]	; (8000e88 <HAL_SPI_MspInit+0x84>)
 8000e2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e30:	6613      	str	r3, [r2, #96]	; 0x60
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <HAL_SPI_MspInit+0x84>)
 8000e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3e:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <HAL_SPI_MspInit+0x84>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e42:	4a11      	ldr	r2, [pc, #68]	; (8000e88 <HAL_SPI_MspInit+0x84>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <HAL_SPI_MspInit+0x84>)
 8000e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 8000e56:	f641 0302 	movw	r3, #6146	; 0x1802
 8000e5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e64:	2303      	movs	r3, #3
 8000e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e68:	2305      	movs	r3, #5
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	4619      	mov	r1, r3
 8000e72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e76:	f001 f993 	bl	80021a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e7a:	bf00      	nop
 8000e7c:	3728      	adds	r7, #40	; 0x28
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40013000 	.word	0x40013000
 8000e88:	40021000 	.word	0x40021000

08000e8c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e9c:	d10b      	bne.n	8000eb6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e9e:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <HAL_TIM_PWM_MspInit+0x38>)
 8000ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea2:	4a08      	ldr	r2, [pc, #32]	; (8000ec4 <HAL_TIM_PWM_MspInit+0x38>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6593      	str	r3, [r2, #88]	; 0x58
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_TIM_PWM_MspInit+0x38>)
 8000eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000eb6:	bf00      	nop
 8000eb8:	3714      	adds	r7, #20
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	40021000 	.word	0x40021000

08000ec8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b088      	sub	sp, #32
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 030c 	add.w	r3, r7, #12
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ee8:	d11c      	bne.n	8000f24 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eea:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <HAL_TIM_MspPostInit+0x64>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eee:	4a0f      	ldr	r2, [pc, #60]	; (8000f2c <HAL_TIM_MspPostInit+0x64>)
 8000ef0:	f043 0302 	orr.w	r3, r3, #2
 8000ef4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef6:	4b0d      	ldr	r3, [pc, #52]	; (8000f2c <HAL_TIM_MspPostInit+0x64>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efa:	f003 0302 	and.w	r3, r3, #2
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f02:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f06:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f14:	2301      	movs	r3, #1
 8000f16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f18:	f107 030c 	add.w	r3, r7, #12
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4804      	ldr	r0, [pc, #16]	; (8000f30 <HAL_TIM_MspPostInit+0x68>)
 8000f20:	f001 f93e 	bl	80021a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000f24:	bf00      	nop
 8000f26:	3720      	adds	r7, #32
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	48000400 	.word	0x48000400

08000f34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b0a2      	sub	sp, #136	; 0x88
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f4c:	f107 0318 	add.w	r3, r7, #24
 8000f50:	225c      	movs	r2, #92	; 0x5c
 8000f52:	2100      	movs	r1, #0
 8000f54:	4618      	mov	r0, r3
 8000f56:	f006 ff6d 	bl	8007e34 <memset>
  if(huart->Instance==USART1)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a3f      	ldr	r2, [pc, #252]	; (800105c <HAL_UART_MspInit+0x128>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d138      	bne.n	8000fd6 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f64:	2301      	movs	r3, #1
 8000f66:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f6c:	f107 0318 	add.w	r3, r7, #24
 8000f70:	4618      	mov	r0, r3
 8000f72:	f002 fa9b 	bl	80034ac <HAL_RCCEx_PeriphCLKConfig>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f7c:	f7ff fdfa 	bl	8000b74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f80:	4b37      	ldr	r3, [pc, #220]	; (8001060 <HAL_UART_MspInit+0x12c>)
 8000f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f84:	4a36      	ldr	r2, [pc, #216]	; (8001060 <HAL_UART_MspInit+0x12c>)
 8000f86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f8a:	6613      	str	r3, [r2, #96]	; 0x60
 8000f8c:	4b34      	ldr	r3, [pc, #208]	; (8001060 <HAL_UART_MspInit+0x12c>)
 8000f8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f94:	617b      	str	r3, [r7, #20]
 8000f96:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f98:	4b31      	ldr	r3, [pc, #196]	; (8001060 <HAL_UART_MspInit+0x12c>)
 8000f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9c:	4a30      	ldr	r2, [pc, #192]	; (8001060 <HAL_UART_MspInit+0x12c>)
 8000f9e:	f043 0302 	orr.w	r3, r3, #2
 8000fa2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa4:	4b2e      	ldr	r3, [pc, #184]	; (8001060 <HAL_UART_MspInit+0x12c>)
 8000fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa8:	f003 0302 	and.w	r3, r3, #2
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fb0:	23c0      	movs	r3, #192	; 0xc0
 8000fb2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fc2:	2307      	movs	r3, #7
 8000fc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4825      	ldr	r0, [pc, #148]	; (8001064 <HAL_UART_MspInit+0x130>)
 8000fd0:	f001 f8e6 	bl	80021a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fd4:	e03d      	b.n	8001052 <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART3)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a23      	ldr	r2, [pc, #140]	; (8001068 <HAL_UART_MspInit+0x134>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d138      	bne.n	8001052 <HAL_UART_MspInit+0x11e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fe0:	2304      	movs	r3, #4
 8000fe2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fe8:	f107 0318 	add.w	r3, r7, #24
 8000fec:	4618      	mov	r0, r3
 8000fee:	f002 fa5d 	bl	80034ac <HAL_RCCEx_PeriphCLKConfig>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8000ff8:	f7ff fdbc 	bl	8000b74 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ffc:	4b18      	ldr	r3, [pc, #96]	; (8001060 <HAL_UART_MspInit+0x12c>)
 8000ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001000:	4a17      	ldr	r2, [pc, #92]	; (8001060 <HAL_UART_MspInit+0x12c>)
 8001002:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001006:	6593      	str	r3, [r2, #88]	; 0x58
 8001008:	4b15      	ldr	r3, [pc, #84]	; (8001060 <HAL_UART_MspInit+0x12c>)
 800100a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800100c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001014:	4b12      	ldr	r3, [pc, #72]	; (8001060 <HAL_UART_MspInit+0x12c>)
 8001016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001018:	4a11      	ldr	r2, [pc, #68]	; (8001060 <HAL_UART_MspInit+0x12c>)
 800101a:	f043 0304 	orr.w	r3, r3, #4
 800101e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001020:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <HAL_UART_MspInit+0x12c>)
 8001022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001024:	f003 0304 	and.w	r3, r3, #4
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800102c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001030:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001032:	2302      	movs	r3, #2
 8001034:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103a:	2303      	movs	r3, #3
 800103c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001040:	2307      	movs	r3, #7
 8001042:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001046:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800104a:	4619      	mov	r1, r3
 800104c:	4807      	ldr	r0, [pc, #28]	; (800106c <HAL_UART_MspInit+0x138>)
 800104e:	f001 f8a7 	bl	80021a0 <HAL_GPIO_Init>
}
 8001052:	bf00      	nop
 8001054:	3788      	adds	r7, #136	; 0x88
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40013800 	.word	0x40013800
 8001060:	40021000 	.word	0x40021000
 8001064:	48000400 	.word	0x48000400
 8001068:	40004800 	.word	0x40004800
 800106c:	48000800 	.word	0x48000800

08001070 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08c      	sub	sp, #48	; 0x30
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001078:	2300      	movs	r3, #0
 800107a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800107e:	4b2e      	ldr	r3, [pc, #184]	; (8001138 <HAL_InitTick+0xc8>)
 8001080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001082:	4a2d      	ldr	r2, [pc, #180]	; (8001138 <HAL_InitTick+0xc8>)
 8001084:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001088:	6613      	str	r3, [r2, #96]	; 0x60
 800108a:	4b2b      	ldr	r3, [pc, #172]	; (8001138 <HAL_InitTick+0xc8>)
 800108c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800108e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001096:	f107 020c 	add.w	r2, r7, #12
 800109a:	f107 0310 	add.w	r3, r7, #16
 800109e:	4611      	mov	r1, r2
 80010a0:	4618      	mov	r0, r3
 80010a2:	f002 f971 	bl	8003388 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80010a6:	f002 f959 	bl	800335c <HAL_RCC_GetPCLK2Freq>
 80010aa:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ae:	4a23      	ldr	r2, [pc, #140]	; (800113c <HAL_InitTick+0xcc>)
 80010b0:	fba2 2303 	umull	r2, r3, r2, r3
 80010b4:	0c9b      	lsrs	r3, r3, #18
 80010b6:	3b01      	subs	r3, #1
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80010ba:	4b21      	ldr	r3, [pc, #132]	; (8001140 <HAL_InitTick+0xd0>)
 80010bc:	4a21      	ldr	r2, [pc, #132]	; (8001144 <HAL_InitTick+0xd4>)
 80010be:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80010c0:	4b1f      	ldr	r3, [pc, #124]	; (8001140 <HAL_InitTick+0xd0>)
 80010c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010c6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80010c8:	4a1d      	ldr	r2, [pc, #116]	; (8001140 <HAL_InitTick+0xd0>)
 80010ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010cc:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80010ce:	4b1c      	ldr	r3, [pc, #112]	; (8001140 <HAL_InitTick+0xd0>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d4:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <HAL_InitTick+0xd0>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010da:	4b19      	ldr	r3, [pc, #100]	; (8001140 <HAL_InitTick+0xd0>)
 80010dc:	2200      	movs	r2, #0
 80010de:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80010e0:	4817      	ldr	r0, [pc, #92]	; (8001140 <HAL_InitTick+0xd0>)
 80010e2:	f002 fd90 	bl	8003c06 <HAL_TIM_Base_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80010ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d11b      	bne.n	800112c <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80010f4:	4812      	ldr	r0, [pc, #72]	; (8001140 <HAL_InitTick+0xd0>)
 80010f6:	f002 fde7 	bl	8003cc8 <HAL_TIM_Base_Start_IT>
 80010fa:	4603      	mov	r3, r0
 80010fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001100:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001104:	2b00      	cmp	r3, #0
 8001106:	d111      	bne.n	800112c <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001108:	2019      	movs	r0, #25
 800110a:	f001 f83b 	bl	8002184 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2b0f      	cmp	r3, #15
 8001112:	d808      	bhi.n	8001126 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001114:	2200      	movs	r2, #0
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	2019      	movs	r0, #25
 800111a:	f001 f817 	bl	800214c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800111e:	4a0a      	ldr	r2, [pc, #40]	; (8001148 <HAL_InitTick+0xd8>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6013      	str	r3, [r2, #0]
 8001124:	e002      	b.n	800112c <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800112c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001130:	4618      	mov	r0, r3
 8001132:	3730      	adds	r7, #48	; 0x30
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40021000 	.word	0x40021000
 800113c:	431bde83 	.word	0x431bde83
 8001140:	2000035c 	.word	0x2000035c
 8001144:	40012c00 	.word	0x40012c00
 8001148:	20000004 	.word	0x20000004

0800114c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001150:	e7fe      	b.n	8001150 <NMI_Handler+0x4>

08001152 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001156:	e7fe      	b.n	8001156 <HardFault_Handler+0x4>

08001158 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800115c:	e7fe      	b.n	800115c <MemManage_Handler+0x4>

0800115e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001162:	e7fe      	b.n	8001162 <BusFault_Handler+0x4>

08001164 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001168:	e7fe      	b.n	8001168 <UsageFault_Handler+0x4>

0800116a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800117c:	4802      	ldr	r0, [pc, #8]	; (8001188 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800117e:	f002 fe4e 	bl	8003e1e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	2000035c 	.word	0x2000035c

0800118c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <SystemInit+0x20>)
 8001192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001196:	4a05      	ldr	r2, [pc, #20]	; (80011ac <SystemInit+0x20>)
 8001198:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800119c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011b4:	f7ff ffea 	bl	800118c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011b8:	480c      	ldr	r0, [pc, #48]	; (80011ec <LoopForever+0x6>)
  ldr r1, =_edata
 80011ba:	490d      	ldr	r1, [pc, #52]	; (80011f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011bc:	4a0d      	ldr	r2, [pc, #52]	; (80011f4 <LoopForever+0xe>)
  movs r3, #0
 80011be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c0:	e002      	b.n	80011c8 <LoopCopyDataInit>

080011c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011c6:	3304      	adds	r3, #4

080011c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011cc:	d3f9      	bcc.n	80011c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ce:	4a0a      	ldr	r2, [pc, #40]	; (80011f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011d0:	4c0a      	ldr	r4, [pc, #40]	; (80011fc <LoopForever+0x16>)
  movs r3, #0
 80011d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d4:	e001      	b.n	80011da <LoopFillZerobss>

080011d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d8:	3204      	adds	r2, #4

080011da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011dc:	d3fb      	bcc.n	80011d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011de:	f006 fdf5 	bl	8007dcc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011e2:	f7ff f97f 	bl	80004e4 <main>

080011e6 <LoopForever>:

LoopForever:
    b LoopForever
 80011e6:	e7fe      	b.n	80011e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011e8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80011ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80011f4:	0800810c 	.word	0x0800810c
  ldr r2, =_sbss
 80011f8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80011fc:	20001d7c 	.word	0x20001d7c

08001200 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001200:	e7fe      	b.n	8001200 <ADC1_IRQHandler>

08001202 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b082      	sub	sp, #8
 8001206:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001208:	2300      	movs	r3, #0
 800120a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800120c:	2003      	movs	r0, #3
 800120e:	f000 ff92 	bl	8002136 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001212:	2005      	movs	r0, #5
 8001214:	f7ff ff2c 	bl	8001070 <HAL_InitTick>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d002      	beq.n	8001224 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	71fb      	strb	r3, [r7, #7]
 8001222:	e001      	b.n	8001228 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001224:	f7ff fcac 	bl	8000b80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001228:	79fb      	ldrb	r3, [r7, #7]
}
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <HAL_IncTick+0x20>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	461a      	mov	r2, r3
 800123e:	4b06      	ldr	r3, [pc, #24]	; (8001258 <HAL_IncTick+0x24>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4413      	add	r3, r2
 8001244:	4a04      	ldr	r2, [pc, #16]	; (8001258 <HAL_IncTick+0x24>)
 8001246:	6013      	str	r3, [r2, #0]
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	20000008 	.word	0x20000008
 8001258:	200003a8 	.word	0x200003a8

0800125c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  return uwTick;
 8001260:	4b03      	ldr	r3, [pc, #12]	; (8001270 <HAL_GetTick+0x14>)
 8001262:	681b      	ldr	r3, [r3, #0]
}
 8001264:	4618      	mov	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	200003a8 	.word	0x200003a8

08001274 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	431a      	orrs	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	609a      	str	r2, [r3, #8]
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800129a:	b480      	push	{r7}
 800129c:	b083      	sub	sp, #12
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
 80012a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	431a      	orrs	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	609a      	str	r2, [r3, #8]
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80012dc:	b480      	push	{r7}
 80012de:	b087      	sub	sp, #28
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
 80012e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	3360      	adds	r3, #96	; 0x60
 80012ee:	461a      	mov	r2, r3
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	4413      	add	r3, r2
 80012f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <LL_ADC_SetOffset+0x44>)
 80012fe:	4013      	ands	r3, r2
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001306:	683a      	ldr	r2, [r7, #0]
 8001308:	430a      	orrs	r2, r1
 800130a:	4313      	orrs	r3, r2
 800130c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001314:	bf00      	nop
 8001316:	371c      	adds	r7, #28
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	03fff000 	.word	0x03fff000

08001324 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	3360      	adds	r3, #96	; 0x60
 8001332:	461a      	mov	r2, r3
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001344:	4618      	mov	r0, r3
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001350:	b480      	push	{r7}
 8001352:	b087      	sub	sp, #28
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	3360      	adds	r3, #96	; 0x60
 8001360:	461a      	mov	r2, r3
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	4413      	add	r3, r2
 8001368:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	431a      	orrs	r2, r3
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800137a:	bf00      	nop
 800137c:	371c      	adds	r7, #28
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001386:	b480      	push	{r7}
 8001388:	b087      	sub	sp, #28
 800138a:	af00      	add	r7, sp, #0
 800138c:	60f8      	str	r0, [r7, #12]
 800138e:	60b9      	str	r1, [r7, #8]
 8001390:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	3330      	adds	r3, #48	; 0x30
 8001396:	461a      	mov	r2, r3
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	0a1b      	lsrs	r3, r3, #8
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	f003 030c 	and.w	r3, r3, #12
 80013a2:	4413      	add	r3, r2
 80013a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	f003 031f 	and.w	r3, r3, #31
 80013b0:	211f      	movs	r1, #31
 80013b2:	fa01 f303 	lsl.w	r3, r1, r3
 80013b6:	43db      	mvns	r3, r3
 80013b8:	401a      	ands	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	0e9b      	lsrs	r3, r3, #26
 80013be:	f003 011f 	and.w	r1, r3, #31
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	f003 031f 	and.w	r3, r3, #31
 80013c8:	fa01 f303 	lsl.w	r3, r1, r3
 80013cc:	431a      	orrs	r2, r3
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80013d2:	bf00      	nop
 80013d4:	371c      	adds	r7, #28
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80013de:	b480      	push	{r7}
 80013e0:	b087      	sub	sp, #28
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	60f8      	str	r0, [r7, #12]
 80013e6:	60b9      	str	r1, [r7, #8]
 80013e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	3314      	adds	r3, #20
 80013ee:	461a      	mov	r2, r3
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	0e5b      	lsrs	r3, r3, #25
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	f003 0304 	and.w	r3, r3, #4
 80013fa:	4413      	add	r3, r2
 80013fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	0d1b      	lsrs	r3, r3, #20
 8001406:	f003 031f 	and.w	r3, r3, #31
 800140a:	2107      	movs	r1, #7
 800140c:	fa01 f303 	lsl.w	r3, r1, r3
 8001410:	43db      	mvns	r3, r3
 8001412:	401a      	ands	r2, r3
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	0d1b      	lsrs	r3, r3, #20
 8001418:	f003 031f 	and.w	r3, r3, #31
 800141c:	6879      	ldr	r1, [r7, #4]
 800141e:	fa01 f303 	lsl.w	r3, r1, r3
 8001422:	431a      	orrs	r2, r3
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001428:	bf00      	nop
 800142a:	371c      	adds	r7, #28
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800144c:	43db      	mvns	r3, r3
 800144e:	401a      	ands	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f003 0318 	and.w	r3, r3, #24
 8001456:	4908      	ldr	r1, [pc, #32]	; (8001478 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001458:	40d9      	lsrs	r1, r3
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	400b      	ands	r3, r1
 800145e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001462:	431a      	orrs	r2, r3
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800146a:	bf00      	nop
 800146c:	3714      	adds	r7, #20
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	0007ffff 	.word	0x0007ffff

0800147c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800148c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	6093      	str	r3, [r2, #8]
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014b4:	d101      	bne.n	80014ba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80014b6:	2301      	movs	r3, #1
 80014b8:	e000      	b.n	80014bc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80014ba:	2300      	movs	r3, #0
}
 80014bc:	4618      	mov	r0, r3
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80014d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001500:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001504:	d101      	bne.n	800150a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001506:	2301      	movs	r3, #1
 8001508:	e000      	b.n	800150c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	2b01      	cmp	r3, #1
 800152a:	d101      	bne.n	8001530 <LL_ADC_IsEnabled+0x18>
 800152c:	2301      	movs	r3, #1
 800152e:	e000      	b.n	8001532 <LL_ADC_IsEnabled+0x1a>
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800153e:	b480      	push	{r7}
 8001540:	b083      	sub	sp, #12
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f003 0304 	and.w	r3, r3, #4
 800154e:	2b04      	cmp	r3, #4
 8001550:	d101      	bne.n	8001556 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001552:	2301      	movs	r3, #1
 8001554:	e000      	b.n	8001558 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f003 0308 	and.w	r3, r3, #8
 8001574:	2b08      	cmp	r3, #8
 8001576:	d101      	bne.n	800157c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001578:	2301      	movs	r3, #1
 800157a:	e000      	b.n	800157e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
	...

0800158c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b088      	sub	sp, #32
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001594:	2300      	movs	r3, #0
 8001596:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001598:	2300      	movs	r3, #0
 800159a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d101      	bne.n	80015a6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e12c      	b.n	8001800 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d109      	bne.n	80015c8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff fb0b 	bl	8000bd0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff ff67 	bl	80014a0 <LL_ADC_IsDeepPowerDownEnabled>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d004      	beq.n	80015e2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff ff4d 	bl	800147c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff ff82 	bl	80014f0 <LL_ADC_IsInternalRegulatorEnabled>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d115      	bne.n	800161e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff ff66 	bl	80014c8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80015fc:	4b82      	ldr	r3, [pc, #520]	; (8001808 <HAL_ADC_Init+0x27c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	099b      	lsrs	r3, r3, #6
 8001602:	4a82      	ldr	r2, [pc, #520]	; (800180c <HAL_ADC_Init+0x280>)
 8001604:	fba2 2303 	umull	r2, r3, r2, r3
 8001608:	099b      	lsrs	r3, r3, #6
 800160a:	3301      	adds	r3, #1
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001610:	e002      	b.n	8001618 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	3b01      	subs	r3, #1
 8001616:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1f9      	bne.n	8001612 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff ff64 	bl	80014f0 <LL_ADC_IsInternalRegulatorEnabled>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d10d      	bne.n	800164a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001632:	f043 0210 	orr.w	r2, r3, #16
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800163e:	f043 0201 	orr.w	r2, r3, #1
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff ff75 	bl	800153e <LL_ADC_REG_IsConversionOngoing>
 8001654:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800165a:	f003 0310 	and.w	r3, r3, #16
 800165e:	2b00      	cmp	r3, #0
 8001660:	f040 80c5 	bne.w	80017ee <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	2b00      	cmp	r3, #0
 8001668:	f040 80c1 	bne.w	80017ee <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001670:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001674:	f043 0202 	orr.w	r2, r3, #2
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff ff49 	bl	8001518 <LL_ADC_IsEnabled>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d10b      	bne.n	80016a4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800168c:	4860      	ldr	r0, [pc, #384]	; (8001810 <HAL_ADC_Init+0x284>)
 800168e:	f7ff ff43 	bl	8001518 <LL_ADC_IsEnabled>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d105      	bne.n	80016a4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	4619      	mov	r1, r3
 800169e:	485d      	ldr	r0, [pc, #372]	; (8001814 <HAL_ADC_Init+0x288>)
 80016a0:	f7ff fde8 	bl	8001274 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	7e5b      	ldrb	r3, [r3, #25]
 80016a8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016ae:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80016b4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80016ba:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016c2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016c4:	4313      	orrs	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d106      	bne.n	80016e0 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d6:	3b01      	subs	r3, #1
 80016d8:	045b      	lsls	r3, r3, #17
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4313      	orrs	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d009      	beq.n	80016fc <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ec:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	68da      	ldr	r2, [r3, #12]
 8001702:	4b45      	ldr	r3, [pc, #276]	; (8001818 <HAL_ADC_Init+0x28c>)
 8001704:	4013      	ands	r3, r2
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	6812      	ldr	r2, [r2, #0]
 800170a:	69b9      	ldr	r1, [r7, #24]
 800170c:	430b      	orrs	r3, r1
 800170e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff12 	bl	800153e <LL_ADC_REG_IsConversionOngoing>
 800171a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff ff1f 	bl	8001564 <LL_ADC_INJ_IsConversionOngoing>
 8001726:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d13d      	bne.n	80017aa <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d13a      	bne.n	80017aa <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001738:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001740:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001742:	4313      	orrs	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001750:	f023 0302 	bic.w	r3, r3, #2
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	6812      	ldr	r2, [r2, #0]
 8001758:	69b9      	ldr	r1, [r7, #24]
 800175a:	430b      	orrs	r3, r1
 800175c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001764:	2b01      	cmp	r3, #1
 8001766:	d118      	bne.n	800179a <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001772:	f023 0304 	bic.w	r3, r3, #4
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800177e:	4311      	orrs	r1, r2
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001784:	4311      	orrs	r1, r2
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800178a:	430a      	orrs	r2, r1
 800178c:	431a      	orrs	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f042 0201 	orr.w	r2, r2, #1
 8001796:	611a      	str	r2, [r3, #16]
 8001798:	e007      	b.n	80017aa <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	691a      	ldr	r2, [r3, #16]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f022 0201 	bic.w	r2, r2, #1
 80017a8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d10c      	bne.n	80017cc <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b8:	f023 010f 	bic.w	r1, r3, #15
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	69db      	ldr	r3, [r3, #28]
 80017c0:	1e5a      	subs	r2, r3, #1
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	430a      	orrs	r2, r1
 80017c8:	631a      	str	r2, [r3, #48]	; 0x30
 80017ca:	e007      	b.n	80017dc <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f022 020f 	bic.w	r2, r2, #15
 80017da:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e0:	f023 0303 	bic.w	r3, r3, #3
 80017e4:	f043 0201 	orr.w	r2, r3, #1
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	655a      	str	r2, [r3, #84]	; 0x54
 80017ec:	e007      	b.n	80017fe <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017f2:	f043 0210 	orr.w	r2, r3, #16
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80017fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3720      	adds	r7, #32
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20000000 	.word	0x20000000
 800180c:	053e2d63 	.word	0x053e2d63
 8001810:	50040000 	.word	0x50040000
 8001814:	50040300 	.word	0x50040300
 8001818:	fff0c007 	.word	0xfff0c007

0800181c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b0b6      	sub	sp, #216	; 0xd8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001826:	2300      	movs	r3, #0
 8001828:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800182c:	2300      	movs	r3, #0
 800182e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001836:	2b01      	cmp	r3, #1
 8001838:	d101      	bne.n	800183e <HAL_ADC_ConfigChannel+0x22>
 800183a:	2302      	movs	r3, #2
 800183c:	e3b9      	b.n	8001fb2 <HAL_ADC_ConfigChannel+0x796>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2201      	movs	r2, #1
 8001842:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff fe77 	bl	800153e <LL_ADC_REG_IsConversionOngoing>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	f040 839e 	bne.w	8001f94 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	2b05      	cmp	r3, #5
 800185e:	d824      	bhi.n	80018aa <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	3b02      	subs	r3, #2
 8001866:	2b03      	cmp	r3, #3
 8001868:	d81b      	bhi.n	80018a2 <HAL_ADC_ConfigChannel+0x86>
 800186a:	a201      	add	r2, pc, #4	; (adr r2, 8001870 <HAL_ADC_ConfigChannel+0x54>)
 800186c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001870:	08001881 	.word	0x08001881
 8001874:	08001889 	.word	0x08001889
 8001878:	08001891 	.word	0x08001891
 800187c:	08001899 	.word	0x08001899
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	220c      	movs	r2, #12
 8001884:	605a      	str	r2, [r3, #4]
          break;
 8001886:	e011      	b.n	80018ac <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	2212      	movs	r2, #18
 800188c:	605a      	str	r2, [r3, #4]
          break;
 800188e:	e00d      	b.n	80018ac <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	2218      	movs	r2, #24
 8001894:	605a      	str	r2, [r3, #4]
          break;
 8001896:	e009      	b.n	80018ac <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800189e:	605a      	str	r2, [r3, #4]
          break;
 80018a0:	e004      	b.n	80018ac <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	2206      	movs	r2, #6
 80018a6:	605a      	str	r2, [r3, #4]
          break;
 80018a8:	e000      	b.n	80018ac <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80018aa:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6818      	ldr	r0, [r3, #0]
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	6859      	ldr	r1, [r3, #4]
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	461a      	mov	r2, r3
 80018ba:	f7ff fd64 	bl	8001386 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fe3b 	bl	800153e <LL_ADC_REG_IsConversionOngoing>
 80018c8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff fe47 	bl	8001564 <LL_ADC_INJ_IsConversionOngoing>
 80018d6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f040 81a6 	bne.w	8001c30 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f040 81a1 	bne.w	8001c30 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6818      	ldr	r0, [r3, #0]
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	6819      	ldr	r1, [r3, #0]
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	461a      	mov	r2, r3
 80018fc:	f7ff fd6f 	bl	80013de <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	695a      	ldr	r2, [r3, #20]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	08db      	lsrs	r3, r3, #3
 800190c:	f003 0303 	and.w	r3, r3, #3
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	2b04      	cmp	r3, #4
 8001920:	d00a      	beq.n	8001938 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6818      	ldr	r0, [r3, #0]
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	6919      	ldr	r1, [r3, #16]
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001932:	f7ff fcd3 	bl	80012dc <LL_ADC_SetOffset>
 8001936:	e17b      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2100      	movs	r1, #0
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff fcf0 	bl	8001324 <LL_ADC_GetOffsetChannel>
 8001944:	4603      	mov	r3, r0
 8001946:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800194a:	2b00      	cmp	r3, #0
 800194c:	d10a      	bne.n	8001964 <HAL_ADC_ConfigChannel+0x148>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2100      	movs	r1, #0
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff fce5 	bl	8001324 <LL_ADC_GetOffsetChannel>
 800195a:	4603      	mov	r3, r0
 800195c:	0e9b      	lsrs	r3, r3, #26
 800195e:	f003 021f 	and.w	r2, r3, #31
 8001962:	e01e      	b.n	80019a2 <HAL_ADC_ConfigChannel+0x186>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2100      	movs	r1, #0
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff fcda 	bl	8001324 <LL_ADC_GetOffsetChannel>
 8001970:	4603      	mov	r3, r0
 8001972:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001976:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800197a:	fa93 f3a3 	rbit	r3, r3
 800197e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001982:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001986:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800198a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001992:	2320      	movs	r3, #32
 8001994:	e004      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001996:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800199a:	fab3 f383 	clz	r3, r3
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d105      	bne.n	80019ba <HAL_ADC_ConfigChannel+0x19e>
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	0e9b      	lsrs	r3, r3, #26
 80019b4:	f003 031f 	and.w	r3, r3, #31
 80019b8:	e018      	b.n	80019ec <HAL_ADC_ConfigChannel+0x1d0>
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80019c6:	fa93 f3a3 	rbit	r3, r3
 80019ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80019ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80019d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80019de:	2320      	movs	r3, #32
 80019e0:	e004      	b.n	80019ec <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80019e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80019e6:	fab3 f383 	clz	r3, r3
 80019ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d106      	bne.n	80019fe <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2200      	movs	r2, #0
 80019f6:	2100      	movs	r1, #0
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fca9 	bl	8001350 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2101      	movs	r1, #1
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff fc8d 	bl	8001324 <LL_ADC_GetOffsetChannel>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d10a      	bne.n	8001a2a <HAL_ADC_ConfigChannel+0x20e>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2101      	movs	r1, #1
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff fc82 	bl	8001324 <LL_ADC_GetOffsetChannel>
 8001a20:	4603      	mov	r3, r0
 8001a22:	0e9b      	lsrs	r3, r3, #26
 8001a24:	f003 021f 	and.w	r2, r3, #31
 8001a28:	e01e      	b.n	8001a68 <HAL_ADC_ConfigChannel+0x24c>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2101      	movs	r1, #1
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff fc77 	bl	8001324 <LL_ADC_GetOffsetChannel>
 8001a36:	4603      	mov	r3, r0
 8001a38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a40:	fa93 f3a3 	rbit	r3, r3
 8001a44:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001a48:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001a4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001a50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d101      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001a58:	2320      	movs	r3, #32
 8001a5a:	e004      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001a5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a60:	fab3 f383 	clz	r3, r3
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d105      	bne.n	8001a80 <HAL_ADC_ConfigChannel+0x264>
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	0e9b      	lsrs	r3, r3, #26
 8001a7a:	f003 031f 	and.w	r3, r3, #31
 8001a7e:	e018      	b.n	8001ab2 <HAL_ADC_ConfigChannel+0x296>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a8c:	fa93 f3a3 	rbit	r3, r3
 8001a90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001a94:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001a9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001aa4:	2320      	movs	r3, #32
 8001aa6:	e004      	b.n	8001ab2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001aa8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001aac:	fab3 f383 	clz	r3, r3
 8001ab0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d106      	bne.n	8001ac4 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2200      	movs	r2, #0
 8001abc:	2101      	movs	r1, #1
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff fc46 	bl	8001350 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2102      	movs	r1, #2
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff fc2a 	bl	8001324 <LL_ADC_GetOffsetChannel>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d10a      	bne.n	8001af0 <HAL_ADC_ConfigChannel+0x2d4>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2102      	movs	r1, #2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff fc1f 	bl	8001324 <LL_ADC_GetOffsetChannel>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	0e9b      	lsrs	r3, r3, #26
 8001aea:	f003 021f 	and.w	r2, r3, #31
 8001aee:	e01e      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x312>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2102      	movs	r1, #2
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff fc14 	bl	8001324 <LL_ADC_GetOffsetChannel>
 8001afc:	4603      	mov	r3, r0
 8001afe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b06:	fa93 f3a3 	rbit	r3, r3
 8001b0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001b0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001b16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001b1e:	2320      	movs	r3, #32
 8001b20:	e004      	b.n	8001b2c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001b22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b26:	fab3 f383 	clz	r3, r3
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d105      	bne.n	8001b46 <HAL_ADC_ConfigChannel+0x32a>
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	0e9b      	lsrs	r3, r3, #26
 8001b40:	f003 031f 	and.w	r3, r3, #31
 8001b44:	e016      	b.n	8001b74 <HAL_ADC_ConfigChannel+0x358>
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b52:	fa93 f3a3 	rbit	r3, r3
 8001b56:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001b58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001b5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001b66:	2320      	movs	r3, #32
 8001b68:	e004      	b.n	8001b74 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001b6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b6e:	fab3 f383 	clz	r3, r3
 8001b72:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d106      	bne.n	8001b86 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2102      	movs	r1, #2
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff fbe5 	bl	8001350 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2103      	movs	r1, #3
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff fbc9 	bl	8001324 <LL_ADC_GetOffsetChannel>
 8001b92:	4603      	mov	r3, r0
 8001b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d10a      	bne.n	8001bb2 <HAL_ADC_ConfigChannel+0x396>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2103      	movs	r1, #3
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff fbbe 	bl	8001324 <LL_ADC_GetOffsetChannel>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	0e9b      	lsrs	r3, r3, #26
 8001bac:	f003 021f 	and.w	r2, r3, #31
 8001bb0:	e017      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x3c6>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2103      	movs	r1, #3
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fbb3 	bl	8001324 <LL_ADC_GetOffsetChannel>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bc4:	fa93 f3a3 	rbit	r3, r3
 8001bc8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001bca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bcc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001bce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d101      	bne.n	8001bd8 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001bd4:	2320      	movs	r3, #32
 8001bd6:	e003      	b.n	8001be0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001bd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bda:	fab3 f383 	clz	r3, r3
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d105      	bne.n	8001bfa <HAL_ADC_ConfigChannel+0x3de>
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	0e9b      	lsrs	r3, r3, #26
 8001bf4:	f003 031f 	and.w	r3, r3, #31
 8001bf8:	e011      	b.n	8001c1e <HAL_ADC_ConfigChannel+0x402>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c02:	fa93 f3a3 	rbit	r3, r3
 8001c06:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001c08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c0a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001c12:	2320      	movs	r3, #32
 8001c14:	e003      	b.n	8001c1e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c18:	fab3 f383 	clz	r3, r3
 8001c1c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d106      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2200      	movs	r2, #0
 8001c28:	2103      	movs	r1, #3
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff fb90 	bl	8001350 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff fc6f 	bl	8001518 <LL_ADC_IsEnabled>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f040 813f 	bne.w	8001ec0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6818      	ldr	r0, [r3, #0]
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	6819      	ldr	r1, [r3, #0]
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	f7ff fbf0 	bl	8001434 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	4a8e      	ldr	r2, [pc, #568]	; (8001e94 <HAL_ADC_ConfigChannel+0x678>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	f040 8130 	bne.w	8001ec0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d10b      	bne.n	8001c88 <HAL_ADC_ConfigChannel+0x46c>
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	0e9b      	lsrs	r3, r3, #26
 8001c76:	3301      	adds	r3, #1
 8001c78:	f003 031f 	and.w	r3, r3, #31
 8001c7c:	2b09      	cmp	r3, #9
 8001c7e:	bf94      	ite	ls
 8001c80:	2301      	movls	r3, #1
 8001c82:	2300      	movhi	r3, #0
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	e019      	b.n	8001cbc <HAL_ADC_ConfigChannel+0x4a0>
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c90:	fa93 f3a3 	rbit	r3, r3
 8001c94:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001c96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c98:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001c9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d101      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001ca0:	2320      	movs	r3, #32
 8001ca2:	e003      	b.n	8001cac <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001ca4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ca6:	fab3 f383 	clz	r3, r3
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	3301      	adds	r3, #1
 8001cae:	f003 031f 	and.w	r3, r3, #31
 8001cb2:	2b09      	cmp	r3, #9
 8001cb4:	bf94      	ite	ls
 8001cb6:	2301      	movls	r3, #1
 8001cb8:	2300      	movhi	r3, #0
 8001cba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d079      	beq.n	8001db4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d107      	bne.n	8001cdc <HAL_ADC_ConfigChannel+0x4c0>
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	0e9b      	lsrs	r3, r3, #26
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	069b      	lsls	r3, r3, #26
 8001cd6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cda:	e015      	b.n	8001d08 <HAL_ADC_ConfigChannel+0x4ec>
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ce4:	fa93 f3a3 	rbit	r3, r3
 8001ce8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cec:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001cee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d101      	bne.n	8001cf8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001cf4:	2320      	movs	r3, #32
 8001cf6:	e003      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001cf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cfa:	fab3 f383 	clz	r3, r3
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	3301      	adds	r3, #1
 8001d02:	069b      	lsls	r3, r3, #26
 8001d04:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d109      	bne.n	8001d28 <HAL_ADC_ConfigChannel+0x50c>
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	0e9b      	lsrs	r3, r3, #26
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	f003 031f 	and.w	r3, r3, #31
 8001d20:	2101      	movs	r1, #1
 8001d22:	fa01 f303 	lsl.w	r3, r1, r3
 8001d26:	e017      	b.n	8001d58 <HAL_ADC_ConfigChannel+0x53c>
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d30:	fa93 f3a3 	rbit	r3, r3
 8001d34:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001d36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d38:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001d3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d101      	bne.n	8001d44 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001d40:	2320      	movs	r3, #32
 8001d42:	e003      	b.n	8001d4c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001d44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d46:	fab3 f383 	clz	r3, r3
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	f003 031f 	and.w	r3, r3, #31
 8001d52:	2101      	movs	r1, #1
 8001d54:	fa01 f303 	lsl.w	r3, r1, r3
 8001d58:	ea42 0103 	orr.w	r1, r2, r3
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d10a      	bne.n	8001d7e <HAL_ADC_ConfigChannel+0x562>
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	0e9b      	lsrs	r3, r3, #26
 8001d6e:	3301      	adds	r3, #1
 8001d70:	f003 021f 	and.w	r2, r3, #31
 8001d74:	4613      	mov	r3, r2
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	4413      	add	r3, r2
 8001d7a:	051b      	lsls	r3, r3, #20
 8001d7c:	e018      	b.n	8001db0 <HAL_ADC_ConfigChannel+0x594>
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d86:	fa93 f3a3 	rbit	r3, r3
 8001d8a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001d96:	2320      	movs	r3, #32
 8001d98:	e003      	b.n	8001da2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d9c:	fab3 f383 	clz	r3, r3
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	3301      	adds	r3, #1
 8001da4:	f003 021f 	and.w	r2, r3, #31
 8001da8:	4613      	mov	r3, r2
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	4413      	add	r3, r2
 8001dae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001db0:	430b      	orrs	r3, r1
 8001db2:	e080      	b.n	8001eb6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d107      	bne.n	8001dd0 <HAL_ADC_ConfigChannel+0x5b4>
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	0e9b      	lsrs	r3, r3, #26
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	069b      	lsls	r3, r3, #26
 8001dca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dce:	e015      	b.n	8001dfc <HAL_ADC_ConfigChannel+0x5e0>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd8:	fa93 f3a3 	rbit	r3, r3
 8001ddc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001de8:	2320      	movs	r3, #32
 8001dea:	e003      	b.n	8001df4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dee:	fab3 f383 	clz	r3, r3
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	3301      	adds	r3, #1
 8001df6:	069b      	lsls	r3, r3, #26
 8001df8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d109      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x600>
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	0e9b      	lsrs	r3, r3, #26
 8001e0e:	3301      	adds	r3, #1
 8001e10:	f003 031f 	and.w	r3, r3, #31
 8001e14:	2101      	movs	r1, #1
 8001e16:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1a:	e017      	b.n	8001e4c <HAL_ADC_ConfigChannel+0x630>
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e22:	6a3b      	ldr	r3, [r7, #32]
 8001e24:	fa93 f3a3 	rbit	r3, r3
 8001e28:	61fb      	str	r3, [r7, #28]
  return result;
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d101      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001e34:	2320      	movs	r3, #32
 8001e36:	e003      	b.n	8001e40 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	fab3 f383 	clz	r3, r3
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	3301      	adds	r3, #1
 8001e42:	f003 031f 	and.w	r3, r3, #31
 8001e46:	2101      	movs	r1, #1
 8001e48:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4c:	ea42 0103 	orr.w	r1, r2, r3
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d10d      	bne.n	8001e78 <HAL_ADC_ConfigChannel+0x65c>
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	0e9b      	lsrs	r3, r3, #26
 8001e62:	3301      	adds	r3, #1
 8001e64:	f003 021f 	and.w	r2, r3, #31
 8001e68:	4613      	mov	r3, r2
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	4413      	add	r3, r2
 8001e6e:	3b1e      	subs	r3, #30
 8001e70:	051b      	lsls	r3, r3, #20
 8001e72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e76:	e01d      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0x698>
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	fa93 f3a3 	rbit	r3, r3
 8001e84:	613b      	str	r3, [r7, #16]
  return result;
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d103      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001e90:	2320      	movs	r3, #32
 8001e92:	e005      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0x684>
 8001e94:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	fab3 f383 	clz	r3, r3
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	f003 021f 	and.w	r2, r3, #31
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	4413      	add	r3, r2
 8001eac:	3b1e      	subs	r3, #30
 8001eae:	051b      	lsls	r3, r3, #20
 8001eb0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001eb4:	430b      	orrs	r3, r1
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	6892      	ldr	r2, [r2, #8]
 8001eba:	4619      	mov	r1, r3
 8001ebc:	f7ff fa8f 	bl	80013de <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	4b3d      	ldr	r3, [pc, #244]	; (8001fbc <HAL_ADC_ConfigChannel+0x7a0>)
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d06c      	beq.n	8001fa6 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ecc:	483c      	ldr	r0, [pc, #240]	; (8001fc0 <HAL_ADC_ConfigChannel+0x7a4>)
 8001ece:	f7ff f9f7 	bl	80012c0 <LL_ADC_GetCommonPathInternalCh>
 8001ed2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a3a      	ldr	r2, [pc, #232]	; (8001fc4 <HAL_ADC_ConfigChannel+0x7a8>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d127      	bne.n	8001f30 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ee0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ee4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d121      	bne.n	8001f30 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a35      	ldr	r2, [pc, #212]	; (8001fc8 <HAL_ADC_ConfigChannel+0x7ac>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d157      	bne.n	8001fa6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ef6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001efa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001efe:	4619      	mov	r1, r3
 8001f00:	482f      	ldr	r0, [pc, #188]	; (8001fc0 <HAL_ADC_ConfigChannel+0x7a4>)
 8001f02:	f7ff f9ca 	bl	800129a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f06:	4b31      	ldr	r3, [pc, #196]	; (8001fcc <HAL_ADC_ConfigChannel+0x7b0>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	099b      	lsrs	r3, r3, #6
 8001f0c:	4a30      	ldr	r2, [pc, #192]	; (8001fd0 <HAL_ADC_ConfigChannel+0x7b4>)
 8001f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f12:	099b      	lsrs	r3, r3, #6
 8001f14:	1c5a      	adds	r2, r3, #1
 8001f16:	4613      	mov	r3, r2
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	4413      	add	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f20:	e002      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	3b01      	subs	r3, #1
 8001f26:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f9      	bne.n	8001f22 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f2e:	e03a      	b.n	8001fa6 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a27      	ldr	r2, [pc, #156]	; (8001fd4 <HAL_ADC_ConfigChannel+0x7b8>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d113      	bne.n	8001f62 <HAL_ADC_ConfigChannel+0x746>
 8001f3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10d      	bne.n	8001f62 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a1f      	ldr	r2, [pc, #124]	; (8001fc8 <HAL_ADC_ConfigChannel+0x7ac>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d12a      	bne.n	8001fa6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4819      	ldr	r0, [pc, #100]	; (8001fc0 <HAL_ADC_ConfigChannel+0x7a4>)
 8001f5c:	f7ff f99d 	bl	800129a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f60:	e021      	b.n	8001fa6 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a1c      	ldr	r2, [pc, #112]	; (8001fd8 <HAL_ADC_ConfigChannel+0x7bc>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d11c      	bne.n	8001fa6 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d116      	bne.n	8001fa6 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a12      	ldr	r2, [pc, #72]	; (8001fc8 <HAL_ADC_ConfigChannel+0x7ac>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d111      	bne.n	8001fa6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	480c      	ldr	r0, [pc, #48]	; (8001fc0 <HAL_ADC_ConfigChannel+0x7a4>)
 8001f8e:	f7ff f984 	bl	800129a <LL_ADC_SetCommonPathInternalCh>
 8001f92:	e008      	b.n	8001fa6 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f98:	f043 0220 	orr.w	r2, r3, #32
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001fae:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	37d8      	adds	r7, #216	; 0xd8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	80080000 	.word	0x80080000
 8001fc0:	50040300 	.word	0x50040300
 8001fc4:	c7520000 	.word	0xc7520000
 8001fc8:	50040000 	.word	0x50040000
 8001fcc:	20000000 	.word	0x20000000
 8001fd0:	053e2d63 	.word	0x053e2d63
 8001fd4:	cb840000 	.word	0xcb840000
 8001fd8:	80000001 	.word	0x80000001

08001fdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fec:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <__NVIC_SetPriorityGrouping+0x44>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ff2:	68ba      	ldr	r2, [r7, #8]
 8001ff4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002004:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800200c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800200e:	4a04      	ldr	r2, [pc, #16]	; (8002020 <__NVIC_SetPriorityGrouping+0x44>)
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	60d3      	str	r3, [r2, #12]
}
 8002014:	bf00      	nop
 8002016:	3714      	adds	r7, #20
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	e000ed00 	.word	0xe000ed00

08002024 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002028:	4b04      	ldr	r3, [pc, #16]	; (800203c <__NVIC_GetPriorityGrouping+0x18>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	0a1b      	lsrs	r3, r3, #8
 800202e:	f003 0307 	and.w	r3, r3, #7
}
 8002032:	4618      	mov	r0, r3
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800204a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204e:	2b00      	cmp	r3, #0
 8002050:	db0b      	blt.n	800206a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	f003 021f 	and.w	r2, r3, #31
 8002058:	4907      	ldr	r1, [pc, #28]	; (8002078 <__NVIC_EnableIRQ+0x38>)
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	095b      	lsrs	r3, r3, #5
 8002060:	2001      	movs	r0, #1
 8002062:	fa00 f202 	lsl.w	r2, r0, r2
 8002066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	e000e100 	.word	0xe000e100

0800207c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	6039      	str	r1, [r7, #0]
 8002086:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208c:	2b00      	cmp	r3, #0
 800208e:	db0a      	blt.n	80020a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	b2da      	uxtb	r2, r3
 8002094:	490c      	ldr	r1, [pc, #48]	; (80020c8 <__NVIC_SetPriority+0x4c>)
 8002096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209a:	0112      	lsls	r2, r2, #4
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	440b      	add	r3, r1
 80020a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020a4:	e00a      	b.n	80020bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	4908      	ldr	r1, [pc, #32]	; (80020cc <__NVIC_SetPriority+0x50>)
 80020ac:	79fb      	ldrb	r3, [r7, #7]
 80020ae:	f003 030f 	and.w	r3, r3, #15
 80020b2:	3b04      	subs	r3, #4
 80020b4:	0112      	lsls	r2, r2, #4
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	440b      	add	r3, r1
 80020ba:	761a      	strb	r2, [r3, #24]
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	e000e100 	.word	0xe000e100
 80020cc:	e000ed00 	.word	0xe000ed00

080020d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b089      	sub	sp, #36	; 0x24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	f1c3 0307 	rsb	r3, r3, #7
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	bf28      	it	cs
 80020ee:	2304      	movcs	r3, #4
 80020f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	3304      	adds	r3, #4
 80020f6:	2b06      	cmp	r3, #6
 80020f8:	d902      	bls.n	8002100 <NVIC_EncodePriority+0x30>
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	3b03      	subs	r3, #3
 80020fe:	e000      	b.n	8002102 <NVIC_EncodePriority+0x32>
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002104:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	43da      	mvns	r2, r3
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	401a      	ands	r2, r3
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002118:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	fa01 f303 	lsl.w	r3, r1, r3
 8002122:	43d9      	mvns	r1, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002128:	4313      	orrs	r3, r2
         );
}
 800212a:	4618      	mov	r0, r3
 800212c:	3724      	adds	r7, #36	; 0x24
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7ff ff4c 	bl	8001fdc <__NVIC_SetPriorityGrouping>
}
 8002144:	bf00      	nop
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
 8002158:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800215e:	f7ff ff61 	bl	8002024 <__NVIC_GetPriorityGrouping>
 8002162:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	68b9      	ldr	r1, [r7, #8]
 8002168:	6978      	ldr	r0, [r7, #20]
 800216a:	f7ff ffb1 	bl	80020d0 <NVIC_EncodePriority>
 800216e:	4602      	mov	r2, r0
 8002170:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002174:	4611      	mov	r1, r2
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff ff80 	bl	800207c <__NVIC_SetPriority>
}
 800217c:	bf00      	nop
 800217e:	3718      	adds	r7, #24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	4603      	mov	r3, r0
 800218c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800218e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff ff54 	bl	8002040 <__NVIC_EnableIRQ>
}
 8002198:	bf00      	nop
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b087      	sub	sp, #28
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021aa:	2300      	movs	r3, #0
 80021ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ae:	e154      	b.n	800245a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	2101      	movs	r1, #1
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	fa01 f303 	lsl.w	r3, r1, r3
 80021bc:	4013      	ands	r3, r2
 80021be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f000 8146 	beq.w	8002454 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 0303 	and.w	r3, r3, #3
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d005      	beq.n	80021e0 <HAL_GPIO_Init+0x40>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 0303 	and.w	r3, r3, #3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d130      	bne.n	8002242 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	2203      	movs	r2, #3
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	4013      	ands	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	68da      	ldr	r2, [r3, #12]
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	4313      	orrs	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002216:	2201      	movs	r2, #1
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	43db      	mvns	r3, r3
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	4013      	ands	r3, r2
 8002224:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	091b      	lsrs	r3, r3, #4
 800222c:	f003 0201 	and.w	r2, r3, #1
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	4313      	orrs	r3, r2
 800223a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f003 0303 	and.w	r3, r3, #3
 800224a:	2b03      	cmp	r3, #3
 800224c:	d017      	beq.n	800227e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	2203      	movs	r2, #3
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43db      	mvns	r3, r3
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	4013      	ands	r3, r2
 8002264:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	4313      	orrs	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d123      	bne.n	80022d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	08da      	lsrs	r2, r3, #3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	3208      	adds	r2, #8
 8002292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002296:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	220f      	movs	r2, #15
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	43db      	mvns	r3, r3
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	4013      	ands	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	691a      	ldr	r2, [r3, #16]
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	08da      	lsrs	r2, r3, #3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3208      	adds	r2, #8
 80022cc:	6939      	ldr	r1, [r7, #16]
 80022ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	2203      	movs	r2, #3
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43db      	mvns	r3, r3
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	4013      	ands	r3, r2
 80022e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f003 0203 	and.w	r2, r3, #3
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800230e:	2b00      	cmp	r3, #0
 8002310:	f000 80a0 	beq.w	8002454 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002314:	4b58      	ldr	r3, [pc, #352]	; (8002478 <HAL_GPIO_Init+0x2d8>)
 8002316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002318:	4a57      	ldr	r2, [pc, #348]	; (8002478 <HAL_GPIO_Init+0x2d8>)
 800231a:	f043 0301 	orr.w	r3, r3, #1
 800231e:	6613      	str	r3, [r2, #96]	; 0x60
 8002320:	4b55      	ldr	r3, [pc, #340]	; (8002478 <HAL_GPIO_Init+0x2d8>)
 8002322:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002324:	f003 0301 	and.w	r3, r3, #1
 8002328:	60bb      	str	r3, [r7, #8]
 800232a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800232c:	4a53      	ldr	r2, [pc, #332]	; (800247c <HAL_GPIO_Init+0x2dc>)
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	089b      	lsrs	r3, r3, #2
 8002332:	3302      	adds	r3, #2
 8002334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002338:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	f003 0303 	and.w	r3, r3, #3
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	220f      	movs	r2, #15
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	43db      	mvns	r3, r3
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	4013      	ands	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002356:	d019      	beq.n	800238c <HAL_GPIO_Init+0x1ec>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a49      	ldr	r2, [pc, #292]	; (8002480 <HAL_GPIO_Init+0x2e0>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d013      	beq.n	8002388 <HAL_GPIO_Init+0x1e8>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a48      	ldr	r2, [pc, #288]	; (8002484 <HAL_GPIO_Init+0x2e4>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d00d      	beq.n	8002384 <HAL_GPIO_Init+0x1e4>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a47      	ldr	r2, [pc, #284]	; (8002488 <HAL_GPIO_Init+0x2e8>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d007      	beq.n	8002380 <HAL_GPIO_Init+0x1e0>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a46      	ldr	r2, [pc, #280]	; (800248c <HAL_GPIO_Init+0x2ec>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d101      	bne.n	800237c <HAL_GPIO_Init+0x1dc>
 8002378:	2304      	movs	r3, #4
 800237a:	e008      	b.n	800238e <HAL_GPIO_Init+0x1ee>
 800237c:	2307      	movs	r3, #7
 800237e:	e006      	b.n	800238e <HAL_GPIO_Init+0x1ee>
 8002380:	2303      	movs	r3, #3
 8002382:	e004      	b.n	800238e <HAL_GPIO_Init+0x1ee>
 8002384:	2302      	movs	r3, #2
 8002386:	e002      	b.n	800238e <HAL_GPIO_Init+0x1ee>
 8002388:	2301      	movs	r3, #1
 800238a:	e000      	b.n	800238e <HAL_GPIO_Init+0x1ee>
 800238c:	2300      	movs	r3, #0
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	f002 0203 	and.w	r2, r2, #3
 8002394:	0092      	lsls	r2, r2, #2
 8002396:	4093      	lsls	r3, r2
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	4313      	orrs	r3, r2
 800239c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800239e:	4937      	ldr	r1, [pc, #220]	; (800247c <HAL_GPIO_Init+0x2dc>)
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	089b      	lsrs	r3, r3, #2
 80023a4:	3302      	adds	r3, #2
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023ac:	4b38      	ldr	r3, [pc, #224]	; (8002490 <HAL_GPIO_Init+0x2f0>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	43db      	mvns	r3, r3
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	4013      	ands	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d003      	beq.n	80023d0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023d0:	4a2f      	ldr	r2, [pc, #188]	; (8002490 <HAL_GPIO_Init+0x2f0>)
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023d6:	4b2e      	ldr	r3, [pc, #184]	; (8002490 <HAL_GPIO_Init+0x2f0>)
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	43db      	mvns	r3, r3
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	4013      	ands	r3, r2
 80023e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023fa:	4a25      	ldr	r2, [pc, #148]	; (8002490 <HAL_GPIO_Init+0x2f0>)
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002400:	4b23      	ldr	r3, [pc, #140]	; (8002490 <HAL_GPIO_Init+0x2f0>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	43db      	mvns	r3, r3
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	4013      	ands	r3, r2
 800240e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	4313      	orrs	r3, r2
 8002422:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002424:	4a1a      	ldr	r2, [pc, #104]	; (8002490 <HAL_GPIO_Init+0x2f0>)
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800242a:	4b19      	ldr	r3, [pc, #100]	; (8002490 <HAL_GPIO_Init+0x2f0>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	43db      	mvns	r3, r3
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	4013      	ands	r3, r2
 8002438:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	4313      	orrs	r3, r2
 800244c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800244e:	4a10      	ldr	r2, [pc, #64]	; (8002490 <HAL_GPIO_Init+0x2f0>)
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	3301      	adds	r3, #1
 8002458:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	fa22 f303 	lsr.w	r3, r2, r3
 8002464:	2b00      	cmp	r3, #0
 8002466:	f47f aea3 	bne.w	80021b0 <HAL_GPIO_Init+0x10>
  }
}
 800246a:	bf00      	nop
 800246c:	bf00      	nop
 800246e:	371c      	adds	r7, #28
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	40021000 	.word	0x40021000
 800247c:	40010000 	.word	0x40010000
 8002480:	48000400 	.word	0x48000400
 8002484:	48000800 	.word	0x48000800
 8002488:	48000c00 	.word	0x48000c00
 800248c:	48001000 	.word	0x48001000
 8002490:	40010400 	.word	0x40010400

08002494 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	460b      	mov	r3, r1
 800249e:	807b      	strh	r3, [r7, #2]
 80024a0:	4613      	mov	r3, r2
 80024a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024a4:	787b      	ldrb	r3, [r7, #1]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024aa:	887a      	ldrh	r2, [r7, #2]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024b0:	e002      	b.n	80024b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024b2:	887a      	ldrh	r2, [r7, #2]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e081      	b.n	80025da <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d106      	bne.n	80024f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7fe fbee 	bl	8000ccc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2224      	movs	r2, #36	; 0x24
 80024f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 0201 	bic.w	r2, r2, #1
 8002506:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002514:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002524:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d107      	bne.n	800253e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689a      	ldr	r2, [r3, #8]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800253a:	609a      	str	r2, [r3, #8]
 800253c:	e006      	b.n	800254c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689a      	ldr	r2, [r3, #8]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800254a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	2b02      	cmp	r3, #2
 8002552:	d104      	bne.n	800255e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800255c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6812      	ldr	r2, [r2, #0]
 8002568:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800256c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002570:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68da      	ldr	r2, [r3, #12]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002580:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	691a      	ldr	r2, [r3, #16]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	430a      	orrs	r2, r1
 800259a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	69d9      	ldr	r1, [r3, #28]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a1a      	ldr	r2, [r3, #32]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f042 0201 	orr.w	r2, r2, #1
 80025ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2220      	movs	r2, #32
 80025c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
 80025ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b20      	cmp	r3, #32
 80025f6:	d138      	bne.n	800266a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d101      	bne.n	8002606 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002602:	2302      	movs	r3, #2
 8002604:	e032      	b.n	800266c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2224      	movs	r2, #36	; 0x24
 8002612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 0201 	bic.w	r2, r2, #1
 8002624:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002634:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6819      	ldr	r1, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f042 0201 	orr.w	r2, r2, #1
 8002654:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2220      	movs	r2, #32
 800265a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002666:	2300      	movs	r3, #0
 8002668:	e000      	b.n	800266c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800266a:	2302      	movs	r3, #2
  }
}
 800266c:	4618      	mov	r0, r3
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b20      	cmp	r3, #32
 800268c:	d139      	bne.n	8002702 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002694:	2b01      	cmp	r3, #1
 8002696:	d101      	bne.n	800269c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002698:	2302      	movs	r3, #2
 800269a:	e033      	b.n	8002704 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2224      	movs	r2, #36	; 0x24
 80026a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 0201 	bic.w	r2, r2, #1
 80026ba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026ca:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	021b      	lsls	r3, r3, #8
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f042 0201 	orr.w	r2, r2, #1
 80026ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2220      	movs	r2, #32
 80026f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026fe:	2300      	movs	r3, #0
 8002700:	e000      	b.n	8002704 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002702:	2302      	movs	r3, #2
  }
}
 8002704:	4618      	mov	r0, r3
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002714:	4b04      	ldr	r3, [pc, #16]	; (8002728 <HAL_PWREx_GetVoltageRange+0x18>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800271c:	4618      	mov	r0, r3
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	40007000 	.word	0x40007000

0800272c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800273a:	d130      	bne.n	800279e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800273c:	4b23      	ldr	r3, [pc, #140]	; (80027cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002748:	d038      	beq.n	80027bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800274a:	4b20      	ldr	r3, [pc, #128]	; (80027cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002752:	4a1e      	ldr	r2, [pc, #120]	; (80027cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002754:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002758:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800275a:	4b1d      	ldr	r3, [pc, #116]	; (80027d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2232      	movs	r2, #50	; 0x32
 8002760:	fb02 f303 	mul.w	r3, r2, r3
 8002764:	4a1b      	ldr	r2, [pc, #108]	; (80027d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002766:	fba2 2303 	umull	r2, r3, r2, r3
 800276a:	0c9b      	lsrs	r3, r3, #18
 800276c:	3301      	adds	r3, #1
 800276e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002770:	e002      	b.n	8002778 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	3b01      	subs	r3, #1
 8002776:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002778:	4b14      	ldr	r3, [pc, #80]	; (80027cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002784:	d102      	bne.n	800278c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1f2      	bne.n	8002772 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800278c:	4b0f      	ldr	r3, [pc, #60]	; (80027cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002798:	d110      	bne.n	80027bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e00f      	b.n	80027be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800279e:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027aa:	d007      	beq.n	80027bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80027ac:	4b07      	ldr	r3, [pc, #28]	; (80027cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027b4:	4a05      	ldr	r2, [pc, #20]	; (80027cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	40007000 	.word	0x40007000
 80027d0:	20000000 	.word	0x20000000
 80027d4:	431bde83 	.word	0x431bde83

080027d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b088      	sub	sp, #32
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d102      	bne.n	80027ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	f000 bc02 	b.w	8002ff0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027ec:	4b96      	ldr	r3, [pc, #600]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f003 030c 	and.w	r3, r3, #12
 80027f4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027f6:	4b94      	ldr	r3, [pc, #592]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	f003 0303 	and.w	r3, r3, #3
 80027fe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0310 	and.w	r3, r3, #16
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 80e4 	beq.w	80029d6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d007      	beq.n	8002824 <HAL_RCC_OscConfig+0x4c>
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	2b0c      	cmp	r3, #12
 8002818:	f040 808b 	bne.w	8002932 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	2b01      	cmp	r3, #1
 8002820:	f040 8087 	bne.w	8002932 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002824:	4b88      	ldr	r3, [pc, #544]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d005      	beq.n	800283c <HAL_RCC_OscConfig+0x64>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e3d9      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a1a      	ldr	r2, [r3, #32]
 8002840:	4b81      	ldr	r3, [pc, #516]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0308 	and.w	r3, r3, #8
 8002848:	2b00      	cmp	r3, #0
 800284a:	d004      	beq.n	8002856 <HAL_RCC_OscConfig+0x7e>
 800284c:	4b7e      	ldr	r3, [pc, #504]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002854:	e005      	b.n	8002862 <HAL_RCC_OscConfig+0x8a>
 8002856:	4b7c      	ldr	r3, [pc, #496]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002858:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800285c:	091b      	lsrs	r3, r3, #4
 800285e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002862:	4293      	cmp	r3, r2
 8002864:	d223      	bcs.n	80028ae <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	4618      	mov	r0, r3
 800286c:	f000 fdbe 	bl	80033ec <RCC_SetFlashLatencyFromMSIRange>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e3ba      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800287a:	4b73      	ldr	r3, [pc, #460]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a72      	ldr	r2, [pc, #456]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002880:	f043 0308 	orr.w	r3, r3, #8
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	4b70      	ldr	r3, [pc, #448]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	496d      	ldr	r1, [pc, #436]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002894:	4313      	orrs	r3, r2
 8002896:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002898:	4b6b      	ldr	r3, [pc, #428]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	69db      	ldr	r3, [r3, #28]
 80028a4:	021b      	lsls	r3, r3, #8
 80028a6:	4968      	ldr	r1, [pc, #416]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	604b      	str	r3, [r1, #4]
 80028ac:	e025      	b.n	80028fa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028ae:	4b66      	ldr	r3, [pc, #408]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a65      	ldr	r2, [pc, #404]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 80028b4:	f043 0308 	orr.w	r3, r3, #8
 80028b8:	6013      	str	r3, [r2, #0]
 80028ba:	4b63      	ldr	r3, [pc, #396]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	4960      	ldr	r1, [pc, #384]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028cc:	4b5e      	ldr	r3, [pc, #376]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	69db      	ldr	r3, [r3, #28]
 80028d8:	021b      	lsls	r3, r3, #8
 80028da:	495b      	ldr	r1, [pc, #364]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d109      	bne.n	80028fa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f000 fd7e 	bl	80033ec <RCC_SetFlashLatencyFromMSIRange>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e37a      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028fa:	f000 fc81 	bl	8003200 <HAL_RCC_GetSysClockFreq>
 80028fe:	4602      	mov	r2, r0
 8002900:	4b51      	ldr	r3, [pc, #324]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	091b      	lsrs	r3, r3, #4
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	4950      	ldr	r1, [pc, #320]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 800290c:	5ccb      	ldrb	r3, [r1, r3]
 800290e:	f003 031f 	and.w	r3, r3, #31
 8002912:	fa22 f303 	lsr.w	r3, r2, r3
 8002916:	4a4e      	ldr	r2, [pc, #312]	; (8002a50 <HAL_RCC_OscConfig+0x278>)
 8002918:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800291a:	4b4e      	ldr	r3, [pc, #312]	; (8002a54 <HAL_RCC_OscConfig+0x27c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f7fe fba6 	bl	8001070 <HAL_InitTick>
 8002924:	4603      	mov	r3, r0
 8002926:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002928:	7bfb      	ldrb	r3, [r7, #15]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d052      	beq.n	80029d4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800292e:	7bfb      	ldrb	r3, [r7, #15]
 8002930:	e35e      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d032      	beq.n	80029a0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800293a:	4b43      	ldr	r3, [pc, #268]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a42      	ldr	r2, [pc, #264]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002940:	f043 0301 	orr.w	r3, r3, #1
 8002944:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002946:	f7fe fc89 	bl	800125c <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800294c:	e008      	b.n	8002960 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800294e:	f7fe fc85 	bl	800125c <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e347      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002960:	4b39      	ldr	r3, [pc, #228]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0f0      	beq.n	800294e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800296c:	4b36      	ldr	r3, [pc, #216]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a35      	ldr	r2, [pc, #212]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002972:	f043 0308 	orr.w	r3, r3, #8
 8002976:	6013      	str	r3, [r2, #0]
 8002978:	4b33      	ldr	r3, [pc, #204]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	4930      	ldr	r1, [pc, #192]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002986:	4313      	orrs	r3, r2
 8002988:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800298a:	4b2f      	ldr	r3, [pc, #188]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	021b      	lsls	r3, r3, #8
 8002998:	492b      	ldr	r1, [pc, #172]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 800299a:	4313      	orrs	r3, r2
 800299c:	604b      	str	r3, [r1, #4]
 800299e:	e01a      	b.n	80029d6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80029a0:	4b29      	ldr	r3, [pc, #164]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a28      	ldr	r2, [pc, #160]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 80029a6:	f023 0301 	bic.w	r3, r3, #1
 80029aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029ac:	f7fe fc56 	bl	800125c <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029b4:	f7fe fc52 	bl	800125c <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e314      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029c6:	4b20      	ldr	r3, [pc, #128]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1f0      	bne.n	80029b4 <HAL_RCC_OscConfig+0x1dc>
 80029d2:	e000      	b.n	80029d6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d073      	beq.n	8002aca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	2b08      	cmp	r3, #8
 80029e6:	d005      	beq.n	80029f4 <HAL_RCC_OscConfig+0x21c>
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	2b0c      	cmp	r3, #12
 80029ec:	d10e      	bne.n	8002a0c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	2b03      	cmp	r3, #3
 80029f2:	d10b      	bne.n	8002a0c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f4:	4b14      	ldr	r3, [pc, #80]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d063      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x2f0>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d15f      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e2f1      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a14:	d106      	bne.n	8002a24 <HAL_RCC_OscConfig+0x24c>
 8002a16:	4b0c      	ldr	r3, [pc, #48]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a0b      	ldr	r2, [pc, #44]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	e025      	b.n	8002a70 <HAL_RCC_OscConfig+0x298>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a2c:	d114      	bne.n	8002a58 <HAL_RCC_OscConfig+0x280>
 8002a2e:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a05      	ldr	r2, [pc, #20]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002a34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a38:	6013      	str	r3, [r2, #0]
 8002a3a:	4b03      	ldr	r3, [pc, #12]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a02      	ldr	r2, [pc, #8]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a44:	6013      	str	r3, [r2, #0]
 8002a46:	e013      	b.n	8002a70 <HAL_RCC_OscConfig+0x298>
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	08008054 	.word	0x08008054
 8002a50:	20000000 	.word	0x20000000
 8002a54:	20000004 	.word	0x20000004
 8002a58:	4ba0      	ldr	r3, [pc, #640]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a9f      	ldr	r2, [pc, #636]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002a5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a62:	6013      	str	r3, [r2, #0]
 8002a64:	4b9d      	ldr	r3, [pc, #628]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a9c      	ldr	r2, [pc, #624]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002a6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d013      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a78:	f7fe fbf0 	bl	800125c <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a80:	f7fe fbec 	bl	800125c <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b64      	cmp	r3, #100	; 0x64
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e2ae      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a92:	4b92      	ldr	r3, [pc, #584]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d0f0      	beq.n	8002a80 <HAL_RCC_OscConfig+0x2a8>
 8002a9e:	e014      	b.n	8002aca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa0:	f7fe fbdc 	bl	800125c <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aa8:	f7fe fbd8 	bl	800125c <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b64      	cmp	r3, #100	; 0x64
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e29a      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002aba:	4b88      	ldr	r3, [pc, #544]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1f0      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x2d0>
 8002ac6:	e000      	b.n	8002aca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d060      	beq.n	8002b98 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	2b04      	cmp	r3, #4
 8002ada:	d005      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x310>
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	2b0c      	cmp	r3, #12
 8002ae0:	d119      	bne.n	8002b16 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d116      	bne.n	8002b16 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ae8:	4b7c      	ldr	r3, [pc, #496]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d005      	beq.n	8002b00 <HAL_RCC_OscConfig+0x328>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d101      	bne.n	8002b00 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e277      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b00:	4b76      	ldr	r3, [pc, #472]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	061b      	lsls	r3, r3, #24
 8002b0e:	4973      	ldr	r1, [pc, #460]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b14:	e040      	b.n	8002b98 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d023      	beq.n	8002b66 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b1e:	4b6f      	ldr	r3, [pc, #444]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a6e      	ldr	r2, [pc, #440]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2a:	f7fe fb97 	bl	800125c <HAL_GetTick>
 8002b2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b32:	f7fe fb93 	bl	800125c <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e255      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b44:	4b65      	ldr	r3, [pc, #404]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0f0      	beq.n	8002b32 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b50:	4b62      	ldr	r3, [pc, #392]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	061b      	lsls	r3, r3, #24
 8002b5e:	495f      	ldr	r1, [pc, #380]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	604b      	str	r3, [r1, #4]
 8002b64:	e018      	b.n	8002b98 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b66:	4b5d      	ldr	r3, [pc, #372]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a5c      	ldr	r2, [pc, #368]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002b6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b72:	f7fe fb73 	bl	800125c <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b7a:	f7fe fb6f 	bl	800125c <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e231      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b8c:	4b53      	ldr	r3, [pc, #332]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1f0      	bne.n	8002b7a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0308 	and.w	r3, r3, #8
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d03c      	beq.n	8002c1e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d01c      	beq.n	8002be6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bac:	4b4b      	ldr	r3, [pc, #300]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bb2:	4a4a      	ldr	r2, [pc, #296]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002bb4:	f043 0301 	orr.w	r3, r3, #1
 8002bb8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bbc:	f7fe fb4e 	bl	800125c <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bc4:	f7fe fb4a 	bl	800125c <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e20c      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bd6:	4b41      	ldr	r3, [pc, #260]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002bd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d0ef      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x3ec>
 8002be4:	e01b      	b.n	8002c1e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002be6:	4b3d      	ldr	r3, [pc, #244]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002be8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bec:	4a3b      	ldr	r2, [pc, #236]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002bee:	f023 0301 	bic.w	r3, r3, #1
 8002bf2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf6:	f7fe fb31 	bl	800125c <HAL_GetTick>
 8002bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bfc:	e008      	b.n	8002c10 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bfe:	f7fe fb2d 	bl	800125c <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e1ef      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c10:	4b32      	ldr	r3, [pc, #200]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1ef      	bne.n	8002bfe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0304 	and.w	r3, r3, #4
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f000 80a6 	beq.w	8002d78 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c30:	4b2a      	ldr	r3, [pc, #168]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10d      	bne.n	8002c58 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c3c:	4b27      	ldr	r3, [pc, #156]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c40:	4a26      	ldr	r2, [pc, #152]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c46:	6593      	str	r3, [r2, #88]	; 0x58
 8002c48:	4b24      	ldr	r3, [pc, #144]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c50:	60bb      	str	r3, [r7, #8]
 8002c52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c54:	2301      	movs	r3, #1
 8002c56:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c58:	4b21      	ldr	r3, [pc, #132]	; (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d118      	bne.n	8002c96 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c64:	4b1e      	ldr	r3, [pc, #120]	; (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a1d      	ldr	r2, [pc, #116]	; (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c70:	f7fe faf4 	bl	800125c <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c78:	f7fe faf0 	bl	800125c <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e1b2      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c8a:	4b15      	ldr	r3, [pc, #84]	; (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0f0      	beq.n	8002c78 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d108      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x4d8>
 8002c9e:	4b0f      	ldr	r3, [pc, #60]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca4:	4a0d      	ldr	r2, [pc, #52]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002ca6:	f043 0301 	orr.w	r3, r3, #1
 8002caa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cae:	e029      	b.n	8002d04 <HAL_RCC_OscConfig+0x52c>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	2b05      	cmp	r3, #5
 8002cb6:	d115      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x50c>
 8002cb8:	4b08      	ldr	r3, [pc, #32]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cbe:	4a07      	ldr	r2, [pc, #28]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002cc0:	f043 0304 	orr.w	r3, r3, #4
 8002cc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cc8:	4b04      	ldr	r3, [pc, #16]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cce:	4a03      	ldr	r2, [pc, #12]	; (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cd8:	e014      	b.n	8002d04 <HAL_RCC_OscConfig+0x52c>
 8002cda:	bf00      	nop
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	40007000 	.word	0x40007000
 8002ce4:	4b9a      	ldr	r3, [pc, #616]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cea:	4a99      	ldr	r2, [pc, #612]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002cec:	f023 0301 	bic.w	r3, r3, #1
 8002cf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cf4:	4b96      	ldr	r3, [pc, #600]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfa:	4a95      	ldr	r2, [pc, #596]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002cfc:	f023 0304 	bic.w	r3, r3, #4
 8002d00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d016      	beq.n	8002d3a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d0c:	f7fe faa6 	bl	800125c <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d12:	e00a      	b.n	8002d2a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d14:	f7fe faa2 	bl	800125c <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e162      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d2a:	4b89      	ldr	r3, [pc, #548]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0ed      	beq.n	8002d14 <HAL_RCC_OscConfig+0x53c>
 8002d38:	e015      	b.n	8002d66 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d3a:	f7fe fa8f 	bl	800125c <HAL_GetTick>
 8002d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d40:	e00a      	b.n	8002d58 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d42:	f7fe fa8b 	bl	800125c <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e14b      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d58:	4b7d      	ldr	r3, [pc, #500]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1ed      	bne.n	8002d42 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d66:	7ffb      	ldrb	r3, [r7, #31]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d105      	bne.n	8002d78 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d6c:	4b78      	ldr	r3, [pc, #480]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d70:	4a77      	ldr	r2, [pc, #476]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002d72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d76:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0320 	and.w	r3, r3, #32
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d03c      	beq.n	8002dfe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d01c      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d8c:	4b70      	ldr	r3, [pc, #448]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002d8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d92:	4a6f      	ldr	r2, [pc, #444]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002d94:	f043 0301 	orr.w	r3, r3, #1
 8002d98:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d9c:	f7fe fa5e 	bl	800125c <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002da4:	f7fe fa5a 	bl	800125c <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e11c      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002db6:	4b66      	ldr	r3, [pc, #408]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002db8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0ef      	beq.n	8002da4 <HAL_RCC_OscConfig+0x5cc>
 8002dc4:	e01b      	b.n	8002dfe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002dc6:	4b62      	ldr	r3, [pc, #392]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002dc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dcc:	4a60      	ldr	r2, [pc, #384]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002dce:	f023 0301 	bic.w	r3, r3, #1
 8002dd2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd6:	f7fe fa41 	bl	800125c <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ddc:	e008      	b.n	8002df0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dde:	f7fe fa3d 	bl	800125c <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e0ff      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002df0:	4b57      	ldr	r3, [pc, #348]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002df2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1ef      	bne.n	8002dde <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f000 80f3 	beq.w	8002fee <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	f040 80c9 	bne.w	8002fa4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002e12:	4b4f      	ldr	r3, [pc, #316]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	f003 0203 	and.w	r2, r3, #3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d12c      	bne.n	8002e80 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e30:	3b01      	subs	r3, #1
 8002e32:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d123      	bne.n	8002e80 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e42:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d11b      	bne.n	8002e80 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e52:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d113      	bne.n	8002e80 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e62:	085b      	lsrs	r3, r3, #1
 8002e64:	3b01      	subs	r3, #1
 8002e66:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d109      	bne.n	8002e80 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	085b      	lsrs	r3, r3, #1
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d06b      	beq.n	8002f58 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	2b0c      	cmp	r3, #12
 8002e84:	d062      	beq.n	8002f4c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e86:	4b32      	ldr	r3, [pc, #200]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e0ac      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e96:	4b2e      	ldr	r3, [pc, #184]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a2d      	ldr	r2, [pc, #180]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002e9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ea0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ea2:	f7fe f9db 	bl	800125c <HAL_GetTick>
 8002ea6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ea8:	e008      	b.n	8002ebc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eaa:	f7fe f9d7 	bl	800125c <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e099      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ebc:	4b24      	ldr	r3, [pc, #144]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1f0      	bne.n	8002eaa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ec8:	4b21      	ldr	r3, [pc, #132]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002eca:	68da      	ldr	r2, [r3, #12]
 8002ecc:	4b21      	ldr	r3, [pc, #132]	; (8002f54 <HAL_RCC_OscConfig+0x77c>)
 8002ece:	4013      	ands	r3, r2
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ed8:	3a01      	subs	r2, #1
 8002eda:	0112      	lsls	r2, r2, #4
 8002edc:	4311      	orrs	r1, r2
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ee2:	0212      	lsls	r2, r2, #8
 8002ee4:	4311      	orrs	r1, r2
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002eea:	0852      	lsrs	r2, r2, #1
 8002eec:	3a01      	subs	r2, #1
 8002eee:	0552      	lsls	r2, r2, #21
 8002ef0:	4311      	orrs	r1, r2
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ef6:	0852      	lsrs	r2, r2, #1
 8002ef8:	3a01      	subs	r2, #1
 8002efa:	0652      	lsls	r2, r2, #25
 8002efc:	4311      	orrs	r1, r2
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f02:	06d2      	lsls	r2, r2, #27
 8002f04:	430a      	orrs	r2, r1
 8002f06:	4912      	ldr	r1, [pc, #72]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f0c:	4b10      	ldr	r3, [pc, #64]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a0f      	ldr	r2, [pc, #60]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002f12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f16:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f18:	4b0d      	ldr	r3, [pc, #52]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	4a0c      	ldr	r2, [pc, #48]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002f1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f22:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f24:	f7fe f99a 	bl	800125c <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f2c:	f7fe f996 	bl	800125c <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e058      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f3e:	4b04      	ldr	r3, [pc, #16]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d0f0      	beq.n	8002f2c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f4a:	e050      	b.n	8002fee <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e04f      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
 8002f50:	40021000 	.word	0x40021000
 8002f54:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f58:	4b27      	ldr	r3, [pc, #156]	; (8002ff8 <HAL_RCC_OscConfig+0x820>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d144      	bne.n	8002fee <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f64:	4b24      	ldr	r3, [pc, #144]	; (8002ff8 <HAL_RCC_OscConfig+0x820>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a23      	ldr	r2, [pc, #140]	; (8002ff8 <HAL_RCC_OscConfig+0x820>)
 8002f6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f6e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f70:	4b21      	ldr	r3, [pc, #132]	; (8002ff8 <HAL_RCC_OscConfig+0x820>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	4a20      	ldr	r2, [pc, #128]	; (8002ff8 <HAL_RCC_OscConfig+0x820>)
 8002f76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f7c:	f7fe f96e 	bl	800125c <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f84:	f7fe f96a 	bl	800125c <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e02c      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f96:	4b18      	ldr	r3, [pc, #96]	; (8002ff8 <HAL_RCC_OscConfig+0x820>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d0f0      	beq.n	8002f84 <HAL_RCC_OscConfig+0x7ac>
 8002fa2:	e024      	b.n	8002fee <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	2b0c      	cmp	r3, #12
 8002fa8:	d01f      	beq.n	8002fea <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002faa:	4b13      	ldr	r3, [pc, #76]	; (8002ff8 <HAL_RCC_OscConfig+0x820>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a12      	ldr	r2, [pc, #72]	; (8002ff8 <HAL_RCC_OscConfig+0x820>)
 8002fb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb6:	f7fe f951 	bl	800125c <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fbe:	f7fe f94d 	bl	800125c <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e00f      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fd0:	4b09      	ldr	r3, [pc, #36]	; (8002ff8 <HAL_RCC_OscConfig+0x820>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1f0      	bne.n	8002fbe <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002fdc:	4b06      	ldr	r3, [pc, #24]	; (8002ff8 <HAL_RCC_OscConfig+0x820>)
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	4905      	ldr	r1, [pc, #20]	; (8002ff8 <HAL_RCC_OscConfig+0x820>)
 8002fe2:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <HAL_RCC_OscConfig+0x824>)
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	60cb      	str	r3, [r1, #12]
 8002fe8:	e001      	b.n	8002fee <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e000      	b.n	8002ff0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3720      	adds	r7, #32
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	feeefffc 	.word	0xfeeefffc

08003000 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e0e7      	b.n	80031e4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003014:	4b75      	ldr	r3, [pc, #468]	; (80031ec <HAL_RCC_ClockConfig+0x1ec>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d910      	bls.n	8003044 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003022:	4b72      	ldr	r3, [pc, #456]	; (80031ec <HAL_RCC_ClockConfig+0x1ec>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f023 0207 	bic.w	r2, r3, #7
 800302a:	4970      	ldr	r1, [pc, #448]	; (80031ec <HAL_RCC_ClockConfig+0x1ec>)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	4313      	orrs	r3, r2
 8003030:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003032:	4b6e      	ldr	r3, [pc, #440]	; (80031ec <HAL_RCC_ClockConfig+0x1ec>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	429a      	cmp	r2, r3
 800303e:	d001      	beq.n	8003044 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e0cf      	b.n	80031e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d010      	beq.n	8003072 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	4b66      	ldr	r3, [pc, #408]	; (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800305c:	429a      	cmp	r2, r3
 800305e:	d908      	bls.n	8003072 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003060:	4b63      	ldr	r3, [pc, #396]	; (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	4960      	ldr	r1, [pc, #384]	; (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 800306e:	4313      	orrs	r3, r2
 8003070:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d04c      	beq.n	8003118 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b03      	cmp	r3, #3
 8003084:	d107      	bne.n	8003096 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003086:	4b5a      	ldr	r3, [pc, #360]	; (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d121      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e0a6      	b.n	80031e4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b02      	cmp	r3, #2
 800309c:	d107      	bne.n	80030ae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800309e:	4b54      	ldr	r3, [pc, #336]	; (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d115      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e09a      	b.n	80031e4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d107      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030b6:	4b4e      	ldr	r3, [pc, #312]	; (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d109      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e08e      	b.n	80031e4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030c6:	4b4a      	ldr	r3, [pc, #296]	; (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e086      	b.n	80031e4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030d6:	4b46      	ldr	r3, [pc, #280]	; (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f023 0203 	bic.w	r2, r3, #3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	4943      	ldr	r1, [pc, #268]	; (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030e8:	f7fe f8b8 	bl	800125c <HAL_GetTick>
 80030ec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ee:	e00a      	b.n	8003106 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030f0:	f7fe f8b4 	bl	800125c <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80030fe:	4293      	cmp	r3, r2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e06e      	b.n	80031e4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003106:	4b3a      	ldr	r3, [pc, #232]	; (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 020c 	and.w	r2, r3, #12
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	429a      	cmp	r2, r3
 8003116:	d1eb      	bne.n	80030f0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d010      	beq.n	8003146 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	4b31      	ldr	r3, [pc, #196]	; (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003130:	429a      	cmp	r2, r3
 8003132:	d208      	bcs.n	8003146 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003134:	4b2e      	ldr	r3, [pc, #184]	; (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	492b      	ldr	r1, [pc, #172]	; (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003142:	4313      	orrs	r3, r2
 8003144:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003146:	4b29      	ldr	r3, [pc, #164]	; (80031ec <HAL_RCC_ClockConfig+0x1ec>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0307 	and.w	r3, r3, #7
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	429a      	cmp	r2, r3
 8003152:	d210      	bcs.n	8003176 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003154:	4b25      	ldr	r3, [pc, #148]	; (80031ec <HAL_RCC_ClockConfig+0x1ec>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f023 0207 	bic.w	r2, r3, #7
 800315c:	4923      	ldr	r1, [pc, #140]	; (80031ec <HAL_RCC_ClockConfig+0x1ec>)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	4313      	orrs	r3, r2
 8003162:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003164:	4b21      	ldr	r3, [pc, #132]	; (80031ec <HAL_RCC_ClockConfig+0x1ec>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d001      	beq.n	8003176 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e036      	b.n	80031e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0304 	and.w	r3, r3, #4
 800317e:	2b00      	cmp	r3, #0
 8003180:	d008      	beq.n	8003194 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003182:	4b1b      	ldr	r3, [pc, #108]	; (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	4918      	ldr	r1, [pc, #96]	; (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003190:	4313      	orrs	r3, r2
 8003192:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0308 	and.w	r3, r3, #8
 800319c:	2b00      	cmp	r3, #0
 800319e:	d009      	beq.n	80031b4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031a0:	4b13      	ldr	r3, [pc, #76]	; (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	4910      	ldr	r1, [pc, #64]	; (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031b4:	f000 f824 	bl	8003200 <HAL_RCC_GetSysClockFreq>
 80031b8:	4602      	mov	r2, r0
 80031ba:	4b0d      	ldr	r3, [pc, #52]	; (80031f0 <HAL_RCC_ClockConfig+0x1f0>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	091b      	lsrs	r3, r3, #4
 80031c0:	f003 030f 	and.w	r3, r3, #15
 80031c4:	490b      	ldr	r1, [pc, #44]	; (80031f4 <HAL_RCC_ClockConfig+0x1f4>)
 80031c6:	5ccb      	ldrb	r3, [r1, r3]
 80031c8:	f003 031f 	and.w	r3, r3, #31
 80031cc:	fa22 f303 	lsr.w	r3, r2, r3
 80031d0:	4a09      	ldr	r2, [pc, #36]	; (80031f8 <HAL_RCC_ClockConfig+0x1f8>)
 80031d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80031d4:	4b09      	ldr	r3, [pc, #36]	; (80031fc <HAL_RCC_ClockConfig+0x1fc>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7fd ff49 	bl	8001070 <HAL_InitTick>
 80031de:	4603      	mov	r3, r0
 80031e0:	72fb      	strb	r3, [r7, #11]

  return status;
 80031e2:	7afb      	ldrb	r3, [r7, #11]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40022000 	.word	0x40022000
 80031f0:	40021000 	.word	0x40021000
 80031f4:	08008054 	.word	0x08008054
 80031f8:	20000000 	.word	0x20000000
 80031fc:	20000004 	.word	0x20000004

08003200 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003200:	b480      	push	{r7}
 8003202:	b089      	sub	sp, #36	; 0x24
 8003204:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003206:	2300      	movs	r3, #0
 8003208:	61fb      	str	r3, [r7, #28]
 800320a:	2300      	movs	r3, #0
 800320c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800320e:	4b3e      	ldr	r3, [pc, #248]	; (8003308 <HAL_RCC_GetSysClockFreq+0x108>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 030c 	and.w	r3, r3, #12
 8003216:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003218:	4b3b      	ldr	r3, [pc, #236]	; (8003308 <HAL_RCC_GetSysClockFreq+0x108>)
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f003 0303 	and.w	r3, r3, #3
 8003220:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d005      	beq.n	8003234 <HAL_RCC_GetSysClockFreq+0x34>
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	2b0c      	cmp	r3, #12
 800322c:	d121      	bne.n	8003272 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d11e      	bne.n	8003272 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003234:	4b34      	ldr	r3, [pc, #208]	; (8003308 <HAL_RCC_GetSysClockFreq+0x108>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0308 	and.w	r3, r3, #8
 800323c:	2b00      	cmp	r3, #0
 800323e:	d107      	bne.n	8003250 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003240:	4b31      	ldr	r3, [pc, #196]	; (8003308 <HAL_RCC_GetSysClockFreq+0x108>)
 8003242:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003246:	0a1b      	lsrs	r3, r3, #8
 8003248:	f003 030f 	and.w	r3, r3, #15
 800324c:	61fb      	str	r3, [r7, #28]
 800324e:	e005      	b.n	800325c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003250:	4b2d      	ldr	r3, [pc, #180]	; (8003308 <HAL_RCC_GetSysClockFreq+0x108>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	091b      	lsrs	r3, r3, #4
 8003256:	f003 030f 	and.w	r3, r3, #15
 800325a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800325c:	4a2b      	ldr	r2, [pc, #172]	; (800330c <HAL_RCC_GetSysClockFreq+0x10c>)
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003264:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10d      	bne.n	8003288 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003270:	e00a      	b.n	8003288 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	2b04      	cmp	r3, #4
 8003276:	d102      	bne.n	800327e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003278:	4b25      	ldr	r3, [pc, #148]	; (8003310 <HAL_RCC_GetSysClockFreq+0x110>)
 800327a:	61bb      	str	r3, [r7, #24]
 800327c:	e004      	b.n	8003288 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	2b08      	cmp	r3, #8
 8003282:	d101      	bne.n	8003288 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003284:	4b23      	ldr	r3, [pc, #140]	; (8003314 <HAL_RCC_GetSysClockFreq+0x114>)
 8003286:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	2b0c      	cmp	r3, #12
 800328c:	d134      	bne.n	80032f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800328e:	4b1e      	ldr	r3, [pc, #120]	; (8003308 <HAL_RCC_GetSysClockFreq+0x108>)
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	2b02      	cmp	r3, #2
 800329c:	d003      	beq.n	80032a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	2b03      	cmp	r3, #3
 80032a2:	d003      	beq.n	80032ac <HAL_RCC_GetSysClockFreq+0xac>
 80032a4:	e005      	b.n	80032b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80032a6:	4b1a      	ldr	r3, [pc, #104]	; (8003310 <HAL_RCC_GetSysClockFreq+0x110>)
 80032a8:	617b      	str	r3, [r7, #20]
      break;
 80032aa:	e005      	b.n	80032b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80032ac:	4b19      	ldr	r3, [pc, #100]	; (8003314 <HAL_RCC_GetSysClockFreq+0x114>)
 80032ae:	617b      	str	r3, [r7, #20]
      break;
 80032b0:	e002      	b.n	80032b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	617b      	str	r3, [r7, #20]
      break;
 80032b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032b8:	4b13      	ldr	r3, [pc, #76]	; (8003308 <HAL_RCC_GetSysClockFreq+0x108>)
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	091b      	lsrs	r3, r3, #4
 80032be:	f003 0307 	and.w	r3, r3, #7
 80032c2:	3301      	adds	r3, #1
 80032c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80032c6:	4b10      	ldr	r3, [pc, #64]	; (8003308 <HAL_RCC_GetSysClockFreq+0x108>)
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	0a1b      	lsrs	r3, r3, #8
 80032cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	fb03 f202 	mul.w	r2, r3, r2
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032de:	4b0a      	ldr	r3, [pc, #40]	; (8003308 <HAL_RCC_GetSysClockFreq+0x108>)
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	0e5b      	lsrs	r3, r3, #25
 80032e4:	f003 0303 	and.w	r3, r3, #3
 80032e8:	3301      	adds	r3, #1
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80032f8:	69bb      	ldr	r3, [r7, #24]
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3724      	adds	r7, #36	; 0x24
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	40021000 	.word	0x40021000
 800330c:	0800806c 	.word	0x0800806c
 8003310:	00f42400 	.word	0x00f42400
 8003314:	01312d00 	.word	0x01312d00

08003318 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800331c:	4b03      	ldr	r3, [pc, #12]	; (800332c <HAL_RCC_GetHCLKFreq+0x14>)
 800331e:	681b      	ldr	r3, [r3, #0]
}
 8003320:	4618      	mov	r0, r3
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	20000000 	.word	0x20000000

08003330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003334:	f7ff fff0 	bl	8003318 <HAL_RCC_GetHCLKFreq>
 8003338:	4602      	mov	r2, r0
 800333a:	4b06      	ldr	r3, [pc, #24]	; (8003354 <HAL_RCC_GetPCLK1Freq+0x24>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	0a1b      	lsrs	r3, r3, #8
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	4904      	ldr	r1, [pc, #16]	; (8003358 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003346:	5ccb      	ldrb	r3, [r1, r3]
 8003348:	f003 031f 	and.w	r3, r3, #31
 800334c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003350:	4618      	mov	r0, r3
 8003352:	bd80      	pop	{r7, pc}
 8003354:	40021000 	.word	0x40021000
 8003358:	08008064 	.word	0x08008064

0800335c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003360:	f7ff ffda 	bl	8003318 <HAL_RCC_GetHCLKFreq>
 8003364:	4602      	mov	r2, r0
 8003366:	4b06      	ldr	r3, [pc, #24]	; (8003380 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	0adb      	lsrs	r3, r3, #11
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	4904      	ldr	r1, [pc, #16]	; (8003384 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003372:	5ccb      	ldrb	r3, [r1, r3]
 8003374:	f003 031f 	and.w	r3, r3, #31
 8003378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800337c:	4618      	mov	r0, r3
 800337e:	bd80      	pop	{r7, pc}
 8003380:	40021000 	.word	0x40021000
 8003384:	08008064 	.word	0x08008064

08003388 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	220f      	movs	r2, #15
 8003396:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003398:	4b12      	ldr	r3, [pc, #72]	; (80033e4 <HAL_RCC_GetClockConfig+0x5c>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f003 0203 	and.w	r2, r3, #3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80033a4:	4b0f      	ldr	r3, [pc, #60]	; (80033e4 <HAL_RCC_GetClockConfig+0x5c>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80033b0:	4b0c      	ldr	r3, [pc, #48]	; (80033e4 <HAL_RCC_GetClockConfig+0x5c>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80033bc:	4b09      	ldr	r3, [pc, #36]	; (80033e4 <HAL_RCC_GetClockConfig+0x5c>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	08db      	lsrs	r3, r3, #3
 80033c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80033ca:	4b07      	ldr	r3, [pc, #28]	; (80033e8 <HAL_RCC_GetClockConfig+0x60>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0207 	and.w	r2, r3, #7
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	601a      	str	r2, [r3, #0]
}
 80033d6:	bf00      	nop
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	40021000 	.word	0x40021000
 80033e8:	40022000 	.word	0x40022000

080033ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80033f4:	2300      	movs	r3, #0
 80033f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80033f8:	4b2a      	ldr	r3, [pc, #168]	; (80034a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d003      	beq.n	800340c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003404:	f7ff f984 	bl	8002710 <HAL_PWREx_GetVoltageRange>
 8003408:	6178      	str	r0, [r7, #20]
 800340a:	e014      	b.n	8003436 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800340c:	4b25      	ldr	r3, [pc, #148]	; (80034a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800340e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003410:	4a24      	ldr	r2, [pc, #144]	; (80034a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003416:	6593      	str	r3, [r2, #88]	; 0x58
 8003418:	4b22      	ldr	r3, [pc, #136]	; (80034a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800341a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800341c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003420:	60fb      	str	r3, [r7, #12]
 8003422:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003424:	f7ff f974 	bl	8002710 <HAL_PWREx_GetVoltageRange>
 8003428:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800342a:	4b1e      	ldr	r3, [pc, #120]	; (80034a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800342c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342e:	4a1d      	ldr	r2, [pc, #116]	; (80034a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003434:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800343c:	d10b      	bne.n	8003456 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b80      	cmp	r3, #128	; 0x80
 8003442:	d919      	bls.n	8003478 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2ba0      	cmp	r3, #160	; 0xa0
 8003448:	d902      	bls.n	8003450 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800344a:	2302      	movs	r3, #2
 800344c:	613b      	str	r3, [r7, #16]
 800344e:	e013      	b.n	8003478 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003450:	2301      	movs	r3, #1
 8003452:	613b      	str	r3, [r7, #16]
 8003454:	e010      	b.n	8003478 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b80      	cmp	r3, #128	; 0x80
 800345a:	d902      	bls.n	8003462 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800345c:	2303      	movs	r3, #3
 800345e:	613b      	str	r3, [r7, #16]
 8003460:	e00a      	b.n	8003478 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b80      	cmp	r3, #128	; 0x80
 8003466:	d102      	bne.n	800346e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003468:	2302      	movs	r3, #2
 800346a:	613b      	str	r3, [r7, #16]
 800346c:	e004      	b.n	8003478 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b70      	cmp	r3, #112	; 0x70
 8003472:	d101      	bne.n	8003478 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003474:	2301      	movs	r3, #1
 8003476:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003478:	4b0b      	ldr	r3, [pc, #44]	; (80034a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f023 0207 	bic.w	r2, r3, #7
 8003480:	4909      	ldr	r1, [pc, #36]	; (80034a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	4313      	orrs	r3, r2
 8003486:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003488:	4b07      	ldr	r3, [pc, #28]	; (80034a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	429a      	cmp	r2, r3
 8003494:	d001      	beq.n	800349a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e000      	b.n	800349c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3718      	adds	r7, #24
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40021000 	.word	0x40021000
 80034a8:	40022000 	.word	0x40022000

080034ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034b4:	2300      	movs	r3, #0
 80034b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034b8:	2300      	movs	r3, #0
 80034ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d031      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034d0:	d01a      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80034d2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034d6:	d814      	bhi.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d009      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80034dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034e0:	d10f      	bne.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80034e2:	4b5d      	ldr	r3, [pc, #372]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	4a5c      	ldr	r2, [pc, #368]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ec:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034ee:	e00c      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	3304      	adds	r3, #4
 80034f4:	2100      	movs	r1, #0
 80034f6:	4618      	mov	r0, r3
 80034f8:	f000 f9f0 	bl	80038dc <RCCEx_PLLSAI1_Config>
 80034fc:	4603      	mov	r3, r0
 80034fe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003500:	e003      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	74fb      	strb	r3, [r7, #19]
      break;
 8003506:	e000      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003508:	bf00      	nop
    }

    if(ret == HAL_OK)
 800350a:	7cfb      	ldrb	r3, [r7, #19]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10b      	bne.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003510:	4b51      	ldr	r3, [pc, #324]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003516:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351e:	494e      	ldr	r1, [pc, #312]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003520:	4313      	orrs	r3, r2
 8003522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003526:	e001      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003528:	7cfb      	ldrb	r3, [r7, #19]
 800352a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 809e 	beq.w	8003676 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800353a:	2300      	movs	r3, #0
 800353c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800353e:	4b46      	ldr	r3, [pc, #280]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800354a:	2301      	movs	r3, #1
 800354c:	e000      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800354e:	2300      	movs	r3, #0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00d      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003554:	4b40      	ldr	r3, [pc, #256]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003558:	4a3f      	ldr	r2, [pc, #252]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800355a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800355e:	6593      	str	r3, [r2, #88]	; 0x58
 8003560:	4b3d      	ldr	r3, [pc, #244]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003568:	60bb      	str	r3, [r7, #8]
 800356a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800356c:	2301      	movs	r3, #1
 800356e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003570:	4b3a      	ldr	r3, [pc, #232]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a39      	ldr	r2, [pc, #228]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800357a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800357c:	f7fd fe6e 	bl	800125c <HAL_GetTick>
 8003580:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003582:	e009      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003584:	f7fd fe6a 	bl	800125c <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d902      	bls.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	74fb      	strb	r3, [r7, #19]
        break;
 8003596:	e005      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003598:	4b30      	ldr	r3, [pc, #192]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0ef      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80035a4:	7cfb      	ldrb	r3, [r7, #19]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d15a      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035aa:	4b2b      	ldr	r3, [pc, #172]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035b4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d01e      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d019      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035c6:	4b24      	ldr	r3, [pc, #144]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035d0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035d2:	4b21      	ldr	r3, [pc, #132]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d8:	4a1f      	ldr	r2, [pc, #124]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035e2:	4b1d      	ldr	r3, [pc, #116]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e8:	4a1b      	ldr	r2, [pc, #108]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80035f2:	4a19      	ldr	r2, [pc, #100]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b00      	cmp	r3, #0
 8003602:	d016      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003604:	f7fd fe2a 	bl	800125c <HAL_GetTick>
 8003608:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800360a:	e00b      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800360c:	f7fd fe26 	bl	800125c <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	f241 3288 	movw	r2, #5000	; 0x1388
 800361a:	4293      	cmp	r3, r2
 800361c:	d902      	bls.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	74fb      	strb	r3, [r7, #19]
            break;
 8003622:	e006      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003624:	4b0c      	ldr	r3, [pc, #48]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0ec      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003632:	7cfb      	ldrb	r3, [r7, #19]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10b      	bne.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003638:	4b07      	ldr	r3, [pc, #28]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800363a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003646:	4904      	ldr	r1, [pc, #16]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003648:	4313      	orrs	r3, r2
 800364a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800364e:	e009      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003650:	7cfb      	ldrb	r3, [r7, #19]
 8003652:	74bb      	strb	r3, [r7, #18]
 8003654:	e006      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003656:	bf00      	nop
 8003658:	40021000 	.word	0x40021000
 800365c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003660:	7cfb      	ldrb	r3, [r7, #19]
 8003662:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003664:	7c7b      	ldrb	r3, [r7, #17]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d105      	bne.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800366a:	4b9b      	ldr	r3, [pc, #620]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800366c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800366e:	4a9a      	ldr	r2, [pc, #616]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003670:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003674:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00a      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003682:	4b95      	ldr	r3, [pc, #596]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003688:	f023 0203 	bic.w	r2, r3, #3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	4991      	ldr	r1, [pc, #580]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003692:	4313      	orrs	r3, r2
 8003694:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00a      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036a4:	4b8c      	ldr	r3, [pc, #560]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80036a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036aa:	f023 020c 	bic.w	r2, r3, #12
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b2:	4989      	ldr	r1, [pc, #548]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0304 	and.w	r3, r3, #4
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00a      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036c6:	4b84      	ldr	r3, [pc, #528]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80036c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d4:	4980      	ldr	r1, [pc, #512]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0320 	and.w	r3, r3, #32
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00a      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036e8:	4b7b      	ldr	r3, [pc, #492]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80036ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f6:	4978      	ldr	r1, [pc, #480]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00a      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800370a:	4b73      	ldr	r3, [pc, #460]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800370c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003710:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003718:	496f      	ldr	r1, [pc, #444]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800371a:	4313      	orrs	r3, r2
 800371c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00a      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800372c:	4b6a      	ldr	r3, [pc, #424]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800372e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003732:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	4967      	ldr	r1, [pc, #412]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800373c:	4313      	orrs	r3, r2
 800373e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00a      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800374e:	4b62      	ldr	r3, [pc, #392]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003754:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375c:	495e      	ldr	r1, [pc, #376]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800375e:	4313      	orrs	r3, r2
 8003760:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00a      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003770:	4b59      	ldr	r3, [pc, #356]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003776:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800377e:	4956      	ldr	r1, [pc, #344]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003780:	4313      	orrs	r3, r2
 8003782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00a      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003792:	4b51      	ldr	r3, [pc, #324]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003798:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a0:	494d      	ldr	r1, [pc, #308]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d028      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80037b4:	4b48      	ldr	r3, [pc, #288]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80037b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037c2:	4945      	ldr	r1, [pc, #276]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037d2:	d106      	bne.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037d4:	4b40      	ldr	r3, [pc, #256]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	4a3f      	ldr	r2, [pc, #252]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80037da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037de:	60d3      	str	r3, [r2, #12]
 80037e0:	e011      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037ea:	d10c      	bne.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3304      	adds	r3, #4
 80037f0:	2101      	movs	r1, #1
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 f872 	bl	80038dc <RCCEx_PLLSAI1_Config>
 80037f8:	4603      	mov	r3, r0
 80037fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037fc:	7cfb      	ldrb	r3, [r7, #19]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8003802:	7cfb      	ldrb	r3, [r7, #19]
 8003804:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d028      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003812:	4b31      	ldr	r3, [pc, #196]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003818:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003820:	492d      	ldr	r1, [pc, #180]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003822:	4313      	orrs	r3, r2
 8003824:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800382c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003830:	d106      	bne.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003832:	4b29      	ldr	r3, [pc, #164]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	4a28      	ldr	r2, [pc, #160]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003838:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800383c:	60d3      	str	r3, [r2, #12]
 800383e:	e011      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003844:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003848:	d10c      	bne.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	3304      	adds	r3, #4
 800384e:	2101      	movs	r1, #1
 8003850:	4618      	mov	r0, r3
 8003852:	f000 f843 	bl	80038dc <RCCEx_PLLSAI1_Config>
 8003856:	4603      	mov	r3, r0
 8003858:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800385a:	7cfb      	ldrb	r3, [r7, #19]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003860:	7cfb      	ldrb	r3, [r7, #19]
 8003862:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d01c      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003870:	4b19      	ldr	r3, [pc, #100]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003876:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800387e:	4916      	ldr	r1, [pc, #88]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003880:	4313      	orrs	r3, r2
 8003882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800388a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800388e:	d10c      	bne.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	3304      	adds	r3, #4
 8003894:	2102      	movs	r1, #2
 8003896:	4618      	mov	r0, r3
 8003898:	f000 f820 	bl	80038dc <RCCEx_PLLSAI1_Config>
 800389c:	4603      	mov	r3, r0
 800389e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038a0:	7cfb      	ldrb	r3, [r7, #19]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 80038a6:	7cfb      	ldrb	r3, [r7, #19]
 80038a8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00a      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80038b6:	4b08      	ldr	r3, [pc, #32]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80038b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038bc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c4:	4904      	ldr	r1, [pc, #16]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80038cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	40021000 	.word	0x40021000

080038dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038e6:	2300      	movs	r3, #0
 80038e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038ea:	4b74      	ldr	r3, [pc, #464]	; (8003abc <RCCEx_PLLSAI1_Config+0x1e0>)
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f003 0303 	and.w	r3, r3, #3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d018      	beq.n	8003928 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80038f6:	4b71      	ldr	r3, [pc, #452]	; (8003abc <RCCEx_PLLSAI1_Config+0x1e0>)
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	f003 0203 	and.w	r2, r3, #3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	429a      	cmp	r2, r3
 8003904:	d10d      	bne.n	8003922 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
       ||
 800390a:	2b00      	cmp	r3, #0
 800390c:	d009      	beq.n	8003922 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800390e:	4b6b      	ldr	r3, [pc, #428]	; (8003abc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	091b      	lsrs	r3, r3, #4
 8003914:	f003 0307 	and.w	r3, r3, #7
 8003918:	1c5a      	adds	r2, r3, #1
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
       ||
 800391e:	429a      	cmp	r2, r3
 8003920:	d047      	beq.n	80039b2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	73fb      	strb	r3, [r7, #15]
 8003926:	e044      	b.n	80039b2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2b03      	cmp	r3, #3
 800392e:	d018      	beq.n	8003962 <RCCEx_PLLSAI1_Config+0x86>
 8003930:	2b03      	cmp	r3, #3
 8003932:	d825      	bhi.n	8003980 <RCCEx_PLLSAI1_Config+0xa4>
 8003934:	2b01      	cmp	r3, #1
 8003936:	d002      	beq.n	800393e <RCCEx_PLLSAI1_Config+0x62>
 8003938:	2b02      	cmp	r3, #2
 800393a:	d009      	beq.n	8003950 <RCCEx_PLLSAI1_Config+0x74>
 800393c:	e020      	b.n	8003980 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800393e:	4b5f      	ldr	r3, [pc, #380]	; (8003abc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d11d      	bne.n	8003986 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800394e:	e01a      	b.n	8003986 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003950:	4b5a      	ldr	r3, [pc, #360]	; (8003abc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003958:	2b00      	cmp	r3, #0
 800395a:	d116      	bne.n	800398a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003960:	e013      	b.n	800398a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003962:	4b56      	ldr	r3, [pc, #344]	; (8003abc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10f      	bne.n	800398e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800396e:	4b53      	ldr	r3, [pc, #332]	; (8003abc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d109      	bne.n	800398e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800397e:	e006      	b.n	800398e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	73fb      	strb	r3, [r7, #15]
      break;
 8003984:	e004      	b.n	8003990 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003986:	bf00      	nop
 8003988:	e002      	b.n	8003990 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800398a:	bf00      	nop
 800398c:	e000      	b.n	8003990 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800398e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003990:	7bfb      	ldrb	r3, [r7, #15]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10d      	bne.n	80039b2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003996:	4b49      	ldr	r3, [pc, #292]	; (8003abc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6819      	ldr	r1, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	3b01      	subs	r3, #1
 80039a8:	011b      	lsls	r3, r3, #4
 80039aa:	430b      	orrs	r3, r1
 80039ac:	4943      	ldr	r1, [pc, #268]	; (8003abc <RCCEx_PLLSAI1_Config+0x1e0>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80039b2:	7bfb      	ldrb	r3, [r7, #15]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d17c      	bne.n	8003ab2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80039b8:	4b40      	ldr	r3, [pc, #256]	; (8003abc <RCCEx_PLLSAI1_Config+0x1e0>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a3f      	ldr	r2, [pc, #252]	; (8003abc <RCCEx_PLLSAI1_Config+0x1e0>)
 80039be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039c4:	f7fd fc4a 	bl	800125c <HAL_GetTick>
 80039c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039ca:	e009      	b.n	80039e0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039cc:	f7fd fc46 	bl	800125c <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d902      	bls.n	80039e0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	73fb      	strb	r3, [r7, #15]
        break;
 80039de:	e005      	b.n	80039ec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039e0:	4b36      	ldr	r3, [pc, #216]	; (8003abc <RCCEx_PLLSAI1_Config+0x1e0>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1ef      	bne.n	80039cc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80039ec:	7bfb      	ldrb	r3, [r7, #15]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d15f      	bne.n	8003ab2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d110      	bne.n	8003a1a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039f8:	4b30      	ldr	r3, [pc, #192]	; (8003abc <RCCEx_PLLSAI1_Config+0x1e0>)
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003a00:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	6892      	ldr	r2, [r2, #8]
 8003a08:	0211      	lsls	r1, r2, #8
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	68d2      	ldr	r2, [r2, #12]
 8003a0e:	06d2      	lsls	r2, r2, #27
 8003a10:	430a      	orrs	r2, r1
 8003a12:	492a      	ldr	r1, [pc, #168]	; (8003abc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	610b      	str	r3, [r1, #16]
 8003a18:	e027      	b.n	8003a6a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d112      	bne.n	8003a46 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a20:	4b26      	ldr	r3, [pc, #152]	; (8003abc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003a28:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	6892      	ldr	r2, [r2, #8]
 8003a30:	0211      	lsls	r1, r2, #8
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6912      	ldr	r2, [r2, #16]
 8003a36:	0852      	lsrs	r2, r2, #1
 8003a38:	3a01      	subs	r2, #1
 8003a3a:	0552      	lsls	r2, r2, #21
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	491f      	ldr	r1, [pc, #124]	; (8003abc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	610b      	str	r3, [r1, #16]
 8003a44:	e011      	b.n	8003a6a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a46:	4b1d      	ldr	r3, [pc, #116]	; (8003abc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a4e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	6892      	ldr	r2, [r2, #8]
 8003a56:	0211      	lsls	r1, r2, #8
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	6952      	ldr	r2, [r2, #20]
 8003a5c:	0852      	lsrs	r2, r2, #1
 8003a5e:	3a01      	subs	r2, #1
 8003a60:	0652      	lsls	r2, r2, #25
 8003a62:	430a      	orrs	r2, r1
 8003a64:	4915      	ldr	r1, [pc, #84]	; (8003abc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a6a:	4b14      	ldr	r3, [pc, #80]	; (8003abc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a13      	ldr	r2, [pc, #76]	; (8003abc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a74:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a76:	f7fd fbf1 	bl	800125c <HAL_GetTick>
 8003a7a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a7c:	e009      	b.n	8003a92 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a7e:	f7fd fbed 	bl	800125c <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d902      	bls.n	8003a92 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	73fb      	strb	r3, [r7, #15]
          break;
 8003a90:	e005      	b.n	8003a9e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a92:	4b0a      	ldr	r3, [pc, #40]	; (8003abc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d0ef      	beq.n	8003a7e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003a9e:	7bfb      	ldrb	r3, [r7, #15]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d106      	bne.n	8003ab2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003aa4:	4b05      	ldr	r3, [pc, #20]	; (8003abc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aa6:	691a      	ldr	r2, [r3, #16]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	4903      	ldr	r1, [pc, #12]	; (8003abc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	40021000 	.word	0x40021000

08003ac0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e095      	b.n	8003bfe <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d108      	bne.n	8003aec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ae2:	d009      	beq.n	8003af8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	61da      	str	r2, [r3, #28]
 8003aea:	e005      	b.n	8003af8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d106      	bne.n	8003b18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f7fd f976 	bl	8000e04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b2e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b38:	d902      	bls.n	8003b40 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	60fb      	str	r3, [r7, #12]
 8003b3e:	e002      	b.n	8003b46 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b44:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003b4e:	d007      	beq.n	8003b60 <HAL_SPI_Init+0xa0>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b58:	d002      	beq.n	8003b60 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b70:	431a      	orrs	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	431a      	orrs	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	69db      	ldr	r3, [r3, #28]
 8003b94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba2:	ea42 0103 	orr.w	r1, r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003baa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	0c1b      	lsrs	r3, r3, #16
 8003bbc:	f003 0204 	and.w	r2, r3, #4
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc4:	f003 0310 	and.w	r3, r3, #16
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003bdc:	ea42 0103 	orr.w	r1, r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	430a      	orrs	r2, r1
 8003bec:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b082      	sub	sp, #8
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d101      	bne.n	8003c18 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e049      	b.n	8003cac <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d106      	bne.n	8003c32 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 f841 	bl	8003cb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2202      	movs	r2, #2
 8003c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	3304      	adds	r3, #4
 8003c42:	4619      	mov	r1, r3
 8003c44:	4610      	mov	r0, r2
 8003c46:	f000 fb45 	bl	80042d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d001      	beq.n	8003ce0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e03b      	b.n	8003d58 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f042 0201 	orr.w	r2, r2, #1
 8003cf6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a19      	ldr	r2, [pc, #100]	; (8003d64 <HAL_TIM_Base_Start_IT+0x9c>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d009      	beq.n	8003d16 <HAL_TIM_Base_Start_IT+0x4e>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d0a:	d004      	beq.n	8003d16 <HAL_TIM_Base_Start_IT+0x4e>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a15      	ldr	r2, [pc, #84]	; (8003d68 <HAL_TIM_Base_Start_IT+0xa0>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d115      	bne.n	8003d42 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	4b13      	ldr	r3, [pc, #76]	; (8003d6c <HAL_TIM_Base_Start_IT+0xa4>)
 8003d1e:	4013      	ands	r3, r2
 8003d20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2b06      	cmp	r3, #6
 8003d26:	d015      	beq.n	8003d54 <HAL_TIM_Base_Start_IT+0x8c>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d2e:	d011      	beq.n	8003d54 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f042 0201 	orr.w	r2, r2, #1
 8003d3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d40:	e008      	b.n	8003d54 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f042 0201 	orr.w	r2, r2, #1
 8003d50:	601a      	str	r2, [r3, #0]
 8003d52:	e000      	b.n	8003d56 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d54:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3714      	adds	r7, #20
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	40012c00 	.word	0x40012c00
 8003d68:	40014000 	.word	0x40014000
 8003d6c:	00010007 	.word	0x00010007

08003d70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e049      	b.n	8003e16 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d106      	bne.n	8003d9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7fd f878 	bl	8000e8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2202      	movs	r2, #2
 8003da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	3304      	adds	r3, #4
 8003dac:	4619      	mov	r1, r3
 8003dae:	4610      	mov	r0, r2
 8003db0:	f000 fa90 	bl	80042d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b082      	sub	sp, #8
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d122      	bne.n	8003e7a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d11b      	bne.n	8003e7a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f06f 0202 	mvn.w	r2, #2
 8003e4a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	f003 0303 	and.w	r3, r3, #3
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d003      	beq.n	8003e68 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 fa19 	bl	8004298 <HAL_TIM_IC_CaptureCallback>
 8003e66:	e005      	b.n	8003e74 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 fa0b 	bl	8004284 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 fa1c 	bl	80042ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	f003 0304 	and.w	r3, r3, #4
 8003e84:	2b04      	cmp	r3, #4
 8003e86:	d122      	bne.n	8003ece <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	f003 0304 	and.w	r3, r3, #4
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d11b      	bne.n	8003ece <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f06f 0204 	mvn.w	r2, #4
 8003e9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 f9ef 	bl	8004298 <HAL_TIM_IC_CaptureCallback>
 8003eba:	e005      	b.n	8003ec8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 f9e1 	bl	8004284 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f9f2 	bl	80042ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	f003 0308 	and.w	r3, r3, #8
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	d122      	bne.n	8003f22 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	f003 0308 	and.w	r3, r3, #8
 8003ee6:	2b08      	cmp	r3, #8
 8003ee8:	d11b      	bne.n	8003f22 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f06f 0208 	mvn.w	r2, #8
 8003ef2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2204      	movs	r2, #4
 8003ef8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	69db      	ldr	r3, [r3, #28]
 8003f00:	f003 0303 	and.w	r3, r3, #3
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d003      	beq.n	8003f10 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 f9c5 	bl	8004298 <HAL_TIM_IC_CaptureCallback>
 8003f0e:	e005      	b.n	8003f1c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 f9b7 	bl	8004284 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f9c8 	bl	80042ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	f003 0310 	and.w	r3, r3, #16
 8003f2c:	2b10      	cmp	r3, #16
 8003f2e:	d122      	bne.n	8003f76 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	f003 0310 	and.w	r3, r3, #16
 8003f3a:	2b10      	cmp	r3, #16
 8003f3c:	d11b      	bne.n	8003f76 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f06f 0210 	mvn.w	r2, #16
 8003f46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2208      	movs	r2, #8
 8003f4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	69db      	ldr	r3, [r3, #28]
 8003f54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d003      	beq.n	8003f64 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 f99b 	bl	8004298 <HAL_TIM_IC_CaptureCallback>
 8003f62:	e005      	b.n	8003f70 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 f98d 	bl	8004284 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f99e 	bl	80042ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d10e      	bne.n	8003fa2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d107      	bne.n	8003fa2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f06f 0201 	mvn.w	r2, #1
 8003f9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f7fc fdd7 	bl	8000b50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fac:	2b80      	cmp	r3, #128	; 0x80
 8003fae:	d10e      	bne.n	8003fce <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fba:	2b80      	cmp	r3, #128	; 0x80
 8003fbc:	d107      	bne.n	8003fce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 fcd5 	bl	8004978 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fdc:	d10e      	bne.n	8003ffc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe8:	2b80      	cmp	r3, #128	; 0x80
 8003fea:	d107      	bne.n	8003ffc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 fcc8 	bl	800498c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004006:	2b40      	cmp	r3, #64	; 0x40
 8004008:	d10e      	bne.n	8004028 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004014:	2b40      	cmp	r3, #64	; 0x40
 8004016:	d107      	bne.n	8004028 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f94c 	bl	80042c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	f003 0320 	and.w	r3, r3, #32
 8004032:	2b20      	cmp	r3, #32
 8004034:	d10e      	bne.n	8004054 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	f003 0320 	and.w	r3, r3, #32
 8004040:	2b20      	cmp	r3, #32
 8004042:	d107      	bne.n	8004054 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f06f 0220 	mvn.w	r2, #32
 800404c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 fc88 	bl	8004964 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004054:	bf00      	nop
 8004056:	3708      	adds	r7, #8
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004068:	2300      	movs	r3, #0
 800406a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004072:	2b01      	cmp	r3, #1
 8004074:	d101      	bne.n	800407a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004076:	2302      	movs	r3, #2
 8004078:	e0ff      	b.n	800427a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b14      	cmp	r3, #20
 8004086:	f200 80f0 	bhi.w	800426a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800408a:	a201      	add	r2, pc, #4	; (adr r2, 8004090 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800408c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004090:	080040e5 	.word	0x080040e5
 8004094:	0800426b 	.word	0x0800426b
 8004098:	0800426b 	.word	0x0800426b
 800409c:	0800426b 	.word	0x0800426b
 80040a0:	08004125 	.word	0x08004125
 80040a4:	0800426b 	.word	0x0800426b
 80040a8:	0800426b 	.word	0x0800426b
 80040ac:	0800426b 	.word	0x0800426b
 80040b0:	08004167 	.word	0x08004167
 80040b4:	0800426b 	.word	0x0800426b
 80040b8:	0800426b 	.word	0x0800426b
 80040bc:	0800426b 	.word	0x0800426b
 80040c0:	080041a7 	.word	0x080041a7
 80040c4:	0800426b 	.word	0x0800426b
 80040c8:	0800426b 	.word	0x0800426b
 80040cc:	0800426b 	.word	0x0800426b
 80040d0:	080041e9 	.word	0x080041e9
 80040d4:	0800426b 	.word	0x0800426b
 80040d8:	0800426b 	.word	0x0800426b
 80040dc:	0800426b 	.word	0x0800426b
 80040e0:	08004229 	.word	0x08004229
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68b9      	ldr	r1, [r7, #8]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f000 f956 	bl	800439c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	699a      	ldr	r2, [r3, #24]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f042 0208 	orr.w	r2, r2, #8
 80040fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	699a      	ldr	r2, [r3, #24]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 0204 	bic.w	r2, r2, #4
 800410e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6999      	ldr	r1, [r3, #24]
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	691a      	ldr	r2, [r3, #16]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	430a      	orrs	r2, r1
 8004120:	619a      	str	r2, [r3, #24]
      break;
 8004122:	e0a5      	b.n	8004270 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68b9      	ldr	r1, [r7, #8]
 800412a:	4618      	mov	r0, r3
 800412c:	f000 f9b2 	bl	8004494 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	699a      	ldr	r2, [r3, #24]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800413e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	699a      	ldr	r2, [r3, #24]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800414e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6999      	ldr	r1, [r3, #24]
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	021a      	lsls	r2, r3, #8
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	430a      	orrs	r2, r1
 8004162:	619a      	str	r2, [r3, #24]
      break;
 8004164:	e084      	b.n	8004270 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68b9      	ldr	r1, [r7, #8]
 800416c:	4618      	mov	r0, r3
 800416e:	f000 fa0b 	bl	8004588 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	69da      	ldr	r2, [r3, #28]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f042 0208 	orr.w	r2, r2, #8
 8004180:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	69da      	ldr	r2, [r3, #28]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 0204 	bic.w	r2, r2, #4
 8004190:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	69d9      	ldr	r1, [r3, #28]
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	691a      	ldr	r2, [r3, #16]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	430a      	orrs	r2, r1
 80041a2:	61da      	str	r2, [r3, #28]
      break;
 80041a4:	e064      	b.n	8004270 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68b9      	ldr	r1, [r7, #8]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f000 fa63 	bl	8004678 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	69da      	ldr	r2, [r3, #28]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	69da      	ldr	r2, [r3, #28]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	69d9      	ldr	r1, [r3, #28]
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	021a      	lsls	r2, r3, #8
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	61da      	str	r2, [r3, #28]
      break;
 80041e6:	e043      	b.n	8004270 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68b9      	ldr	r1, [r7, #8]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 faa0 	bl	8004734 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f042 0208 	orr.w	r2, r2, #8
 8004202:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 0204 	bic.w	r2, r2, #4
 8004212:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	691a      	ldr	r2, [r3, #16]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004226:	e023      	b.n	8004270 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68b9      	ldr	r1, [r7, #8]
 800422e:	4618      	mov	r0, r3
 8004230:	f000 fad8 	bl	80047e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004242:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004252:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	021a      	lsls	r2, r3, #8
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	430a      	orrs	r2, r1
 8004266:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004268:	e002      	b.n	8004270 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	75fb      	strb	r3, [r7, #23]
      break;
 800426e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004278:	7dfb      	ldrb	r3, [r7, #23]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3718      	adds	r7, #24
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop

08004284 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a2a      	ldr	r2, [pc, #168]	; (8004390 <TIM_Base_SetConfig+0xbc>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d003      	beq.n	80042f4 <TIM_Base_SetConfig+0x20>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042f2:	d108      	bne.n	8004306 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	4313      	orrs	r3, r2
 8004304:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a21      	ldr	r2, [pc, #132]	; (8004390 <TIM_Base_SetConfig+0xbc>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d00b      	beq.n	8004326 <TIM_Base_SetConfig+0x52>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004314:	d007      	beq.n	8004326 <TIM_Base_SetConfig+0x52>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a1e      	ldr	r2, [pc, #120]	; (8004394 <TIM_Base_SetConfig+0xc0>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d003      	beq.n	8004326 <TIM_Base_SetConfig+0x52>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a1d      	ldr	r2, [pc, #116]	; (8004398 <TIM_Base_SetConfig+0xc4>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d108      	bne.n	8004338 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800432c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	4313      	orrs	r3, r2
 8004336:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	4313      	orrs	r3, r2
 8004344:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	689a      	ldr	r2, [r3, #8]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a0c      	ldr	r2, [pc, #48]	; (8004390 <TIM_Base_SetConfig+0xbc>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d007      	beq.n	8004374 <TIM_Base_SetConfig+0xa0>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a0b      	ldr	r2, [pc, #44]	; (8004394 <TIM_Base_SetConfig+0xc0>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d003      	beq.n	8004374 <TIM_Base_SetConfig+0xa0>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a0a      	ldr	r2, [pc, #40]	; (8004398 <TIM_Base_SetConfig+0xc4>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d103      	bne.n	800437c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	691a      	ldr	r2, [r3, #16]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	615a      	str	r2, [r3, #20]
}
 8004382:	bf00      	nop
 8004384:	3714      	adds	r7, #20
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	40012c00 	.word	0x40012c00
 8004394:	40014000 	.word	0x40014000
 8004398:	40014400 	.word	0x40014400

0800439c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800439c:	b480      	push	{r7}
 800439e:	b087      	sub	sp, #28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	f023 0201 	bic.w	r2, r3, #1
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f023 0303 	bic.w	r3, r3, #3
 80043d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	4313      	orrs	r3, r2
 80043e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f023 0302 	bic.w	r3, r3, #2
 80043e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a24      	ldr	r2, [pc, #144]	; (8004488 <TIM_OC1_SetConfig+0xec>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d007      	beq.n	800440c <TIM_OC1_SetConfig+0x70>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a23      	ldr	r2, [pc, #140]	; (800448c <TIM_OC1_SetConfig+0xf0>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d003      	beq.n	800440c <TIM_OC1_SetConfig+0x70>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a22      	ldr	r2, [pc, #136]	; (8004490 <TIM_OC1_SetConfig+0xf4>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d10c      	bne.n	8004426 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	f023 0308 	bic.w	r3, r3, #8
 8004412:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	4313      	orrs	r3, r2
 800441c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	f023 0304 	bic.w	r3, r3, #4
 8004424:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a17      	ldr	r2, [pc, #92]	; (8004488 <TIM_OC1_SetConfig+0xec>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d007      	beq.n	800443e <TIM_OC1_SetConfig+0xa2>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a16      	ldr	r2, [pc, #88]	; (800448c <TIM_OC1_SetConfig+0xf0>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d003      	beq.n	800443e <TIM_OC1_SetConfig+0xa2>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a15      	ldr	r2, [pc, #84]	; (8004490 <TIM_OC1_SetConfig+0xf4>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d111      	bne.n	8004462 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004444:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800444c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	4313      	orrs	r3, r2
 8004456:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	4313      	orrs	r3, r2
 8004460:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	621a      	str	r2, [r3, #32]
}
 800447c:	bf00      	nop
 800447e:	371c      	adds	r7, #28
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr
 8004488:	40012c00 	.word	0x40012c00
 800448c:	40014000 	.word	0x40014000
 8004490:	40014400 	.word	0x40014400

08004494 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004494:	b480      	push	{r7}
 8004496:	b087      	sub	sp, #28
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	f023 0210 	bic.w	r2, r3, #16
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	021b      	lsls	r3, r3, #8
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	4313      	orrs	r3, r2
 80044da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f023 0320 	bic.w	r3, r3, #32
 80044e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	011b      	lsls	r3, r3, #4
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a22      	ldr	r2, [pc, #136]	; (800457c <TIM_OC2_SetConfig+0xe8>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d10d      	bne.n	8004514 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	011b      	lsls	r3, r3, #4
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	4313      	orrs	r3, r2
 800450a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004512:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a19      	ldr	r2, [pc, #100]	; (800457c <TIM_OC2_SetConfig+0xe8>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d007      	beq.n	800452c <TIM_OC2_SetConfig+0x98>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a18      	ldr	r2, [pc, #96]	; (8004580 <TIM_OC2_SetConfig+0xec>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d003      	beq.n	800452c <TIM_OC2_SetConfig+0x98>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a17      	ldr	r2, [pc, #92]	; (8004584 <TIM_OC2_SetConfig+0xf0>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d113      	bne.n	8004554 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004532:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800453a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	4313      	orrs	r3, r2
 8004546:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	4313      	orrs	r3, r2
 8004552:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685a      	ldr	r2, [r3, #4]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	621a      	str	r2, [r3, #32]
}
 800456e:	bf00      	nop
 8004570:	371c      	adds	r7, #28
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	40012c00 	.word	0x40012c00
 8004580:	40014000 	.word	0x40014000
 8004584:	40014400 	.word	0x40014400

08004588 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004588:	b480      	push	{r7}
 800458a:	b087      	sub	sp, #28
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f023 0303 	bic.w	r3, r3, #3
 80045c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	021b      	lsls	r3, r3, #8
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	4313      	orrs	r3, r2
 80045e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a21      	ldr	r2, [pc, #132]	; (800466c <TIM_OC3_SetConfig+0xe4>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d10d      	bne.n	8004606 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	021b      	lsls	r3, r3, #8
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004604:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a18      	ldr	r2, [pc, #96]	; (800466c <TIM_OC3_SetConfig+0xe4>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d007      	beq.n	800461e <TIM_OC3_SetConfig+0x96>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a17      	ldr	r2, [pc, #92]	; (8004670 <TIM_OC3_SetConfig+0xe8>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d003      	beq.n	800461e <TIM_OC3_SetConfig+0x96>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a16      	ldr	r2, [pc, #88]	; (8004674 <TIM_OC3_SetConfig+0xec>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d113      	bne.n	8004646 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004624:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800462c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	011b      	lsls	r3, r3, #4
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	4313      	orrs	r3, r2
 8004638:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	011b      	lsls	r3, r3, #4
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	4313      	orrs	r3, r2
 8004644:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685a      	ldr	r2, [r3, #4]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	621a      	str	r2, [r3, #32]
}
 8004660:	bf00      	nop
 8004662:	371c      	adds	r7, #28
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr
 800466c:	40012c00 	.word	0x40012c00
 8004670:	40014000 	.word	0x40014000
 8004674:	40014400 	.word	0x40014400

08004678 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004678:	b480      	push	{r7}
 800467a:	b087      	sub	sp, #28
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	69db      	ldr	r3, [r3, #28]
 800469e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	021b      	lsls	r3, r3, #8
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	4313      	orrs	r3, r2
 80046be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	031b      	lsls	r3, r3, #12
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a14      	ldr	r2, [pc, #80]	; (8004728 <TIM_OC4_SetConfig+0xb0>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d007      	beq.n	80046ec <TIM_OC4_SetConfig+0x74>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a13      	ldr	r2, [pc, #76]	; (800472c <TIM_OC4_SetConfig+0xb4>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d003      	beq.n	80046ec <TIM_OC4_SetConfig+0x74>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a12      	ldr	r2, [pc, #72]	; (8004730 <TIM_OC4_SetConfig+0xb8>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d109      	bne.n	8004700 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	019b      	lsls	r3, r3, #6
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	685a      	ldr	r2, [r3, #4]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	621a      	str	r2, [r3, #32]
}
 800471a:	bf00      	nop
 800471c:	371c      	adds	r7, #28
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	40012c00 	.word	0x40012c00
 800472c:	40014000 	.word	0x40014000
 8004730:	40014400 	.word	0x40014400

08004734 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004734:	b480      	push	{r7}
 8004736:	b087      	sub	sp, #28
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800475a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	4313      	orrs	r3, r2
 8004770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004778:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	041b      	lsls	r3, r3, #16
 8004780:	693a      	ldr	r2, [r7, #16]
 8004782:	4313      	orrs	r3, r2
 8004784:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a13      	ldr	r2, [pc, #76]	; (80047d8 <TIM_OC5_SetConfig+0xa4>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d007      	beq.n	800479e <TIM_OC5_SetConfig+0x6a>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a12      	ldr	r2, [pc, #72]	; (80047dc <TIM_OC5_SetConfig+0xa8>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d003      	beq.n	800479e <TIM_OC5_SetConfig+0x6a>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a11      	ldr	r2, [pc, #68]	; (80047e0 <TIM_OC5_SetConfig+0xac>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d109      	bne.n	80047b2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	021b      	lsls	r3, r3, #8
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	685a      	ldr	r2, [r3, #4]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	621a      	str	r2, [r3, #32]
}
 80047cc:	bf00      	nop
 80047ce:	371c      	adds	r7, #28
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr
 80047d8:	40012c00 	.word	0x40012c00
 80047dc:	40014000 	.word	0x40014000
 80047e0:	40014400 	.word	0x40014400

080047e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b087      	sub	sp, #28
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800480a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	021b      	lsls	r3, r3, #8
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	4313      	orrs	r3, r2
 8004822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800482a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	051b      	lsls	r3, r3, #20
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	4313      	orrs	r3, r2
 8004836:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a14      	ldr	r2, [pc, #80]	; (800488c <TIM_OC6_SetConfig+0xa8>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d007      	beq.n	8004850 <TIM_OC6_SetConfig+0x6c>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a13      	ldr	r2, [pc, #76]	; (8004890 <TIM_OC6_SetConfig+0xac>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d003      	beq.n	8004850 <TIM_OC6_SetConfig+0x6c>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a12      	ldr	r2, [pc, #72]	; (8004894 <TIM_OC6_SetConfig+0xb0>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d109      	bne.n	8004864 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004856:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	029b      	lsls	r3, r3, #10
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	4313      	orrs	r3, r2
 8004862:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	685a      	ldr	r2, [r3, #4]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	621a      	str	r2, [r3, #32]
}
 800487e:	bf00      	nop
 8004880:	371c      	adds	r7, #28
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	40012c00 	.word	0x40012c00
 8004890:	40014000 	.word	0x40014000
 8004894:	40014400 	.word	0x40014400

08004898 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d101      	bne.n	80048b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048ac:	2302      	movs	r3, #2
 80048ae:	e04f      	b.n	8004950 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2202      	movs	r2, #2
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a21      	ldr	r2, [pc, #132]	; (800495c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d108      	bne.n	80048ec <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80048e0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a14      	ldr	r2, [pc, #80]	; (800495c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d009      	beq.n	8004924 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004918:	d004      	beq.n	8004924 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a10      	ldr	r2, [pc, #64]	; (8004960 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d10c      	bne.n	800493e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800492a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	68ba      	ldr	r2, [r7, #8]
 8004932:	4313      	orrs	r3, r2
 8004934:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68ba      	ldr	r2, [r7, #8]
 800493c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3714      	adds	r7, #20
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	40012c00 	.word	0x40012c00
 8004960:	40014000 	.word	0x40014000

08004964 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004994:	bf00      	nop
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e040      	b.n	8004a34 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d106      	bne.n	80049c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7fc fab6 	bl	8000f34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2224      	movs	r2, #36	; 0x24
 80049cc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 0201 	bic.w	r2, r2, #1
 80049dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f82c 	bl	8004a3c <UART_SetConfig>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d101      	bne.n	80049ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e022      	b.n	8004a34 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d002      	beq.n	80049fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 fa7a 	bl	8004ef0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689a      	ldr	r2, [r3, #8]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f042 0201 	orr.w	r2, r2, #1
 8004a2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 fb01 	bl	8005034 <UART_CheckIdleState>
 8004a32:	4603      	mov	r3, r0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3708      	adds	r7, #8
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a40:	b08a      	sub	sp, #40	; 0x28
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a46:	2300      	movs	r3, #0
 8004a48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	689a      	ldr	r2, [r3, #8]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	431a      	orrs	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	69db      	ldr	r3, [r3, #28]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	4b9e      	ldr	r3, [pc, #632]	; (8004ce4 <UART_SetConfig+0x2a8>)
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	6812      	ldr	r2, [r2, #0]
 8004a72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a74:	430b      	orrs	r3, r1
 8004a76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	68da      	ldr	r2, [r3, #12]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a93      	ldr	r2, [pc, #588]	; (8004ce8 <UART_SetConfig+0x2ac>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d004      	beq.n	8004aa8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a8a      	ldr	r2, [pc, #552]	; (8004cec <UART_SetConfig+0x2b0>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d126      	bne.n	8004b14 <UART_SetConfig+0xd8>
 8004ac6:	4b8a      	ldr	r3, [pc, #552]	; (8004cf0 <UART_SetConfig+0x2b4>)
 8004ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004acc:	f003 0303 	and.w	r3, r3, #3
 8004ad0:	2b03      	cmp	r3, #3
 8004ad2:	d81b      	bhi.n	8004b0c <UART_SetConfig+0xd0>
 8004ad4:	a201      	add	r2, pc, #4	; (adr r2, 8004adc <UART_SetConfig+0xa0>)
 8004ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ada:	bf00      	nop
 8004adc:	08004aed 	.word	0x08004aed
 8004ae0:	08004afd 	.word	0x08004afd
 8004ae4:	08004af5 	.word	0x08004af5
 8004ae8:	08004b05 	.word	0x08004b05
 8004aec:	2301      	movs	r3, #1
 8004aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004af2:	e0ab      	b.n	8004c4c <UART_SetConfig+0x210>
 8004af4:	2302      	movs	r3, #2
 8004af6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004afa:	e0a7      	b.n	8004c4c <UART_SetConfig+0x210>
 8004afc:	2304      	movs	r3, #4
 8004afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b02:	e0a3      	b.n	8004c4c <UART_SetConfig+0x210>
 8004b04:	2308      	movs	r3, #8
 8004b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b0a:	e09f      	b.n	8004c4c <UART_SetConfig+0x210>
 8004b0c:	2310      	movs	r3, #16
 8004b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b12:	e09b      	b.n	8004c4c <UART_SetConfig+0x210>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a76      	ldr	r2, [pc, #472]	; (8004cf4 <UART_SetConfig+0x2b8>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d138      	bne.n	8004b90 <UART_SetConfig+0x154>
 8004b1e:	4b74      	ldr	r3, [pc, #464]	; (8004cf0 <UART_SetConfig+0x2b4>)
 8004b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b24:	f003 030c 	and.w	r3, r3, #12
 8004b28:	2b0c      	cmp	r3, #12
 8004b2a:	d82d      	bhi.n	8004b88 <UART_SetConfig+0x14c>
 8004b2c:	a201      	add	r2, pc, #4	; (adr r2, 8004b34 <UART_SetConfig+0xf8>)
 8004b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b32:	bf00      	nop
 8004b34:	08004b69 	.word	0x08004b69
 8004b38:	08004b89 	.word	0x08004b89
 8004b3c:	08004b89 	.word	0x08004b89
 8004b40:	08004b89 	.word	0x08004b89
 8004b44:	08004b79 	.word	0x08004b79
 8004b48:	08004b89 	.word	0x08004b89
 8004b4c:	08004b89 	.word	0x08004b89
 8004b50:	08004b89 	.word	0x08004b89
 8004b54:	08004b71 	.word	0x08004b71
 8004b58:	08004b89 	.word	0x08004b89
 8004b5c:	08004b89 	.word	0x08004b89
 8004b60:	08004b89 	.word	0x08004b89
 8004b64:	08004b81 	.word	0x08004b81
 8004b68:	2300      	movs	r3, #0
 8004b6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b6e:	e06d      	b.n	8004c4c <UART_SetConfig+0x210>
 8004b70:	2302      	movs	r3, #2
 8004b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b76:	e069      	b.n	8004c4c <UART_SetConfig+0x210>
 8004b78:	2304      	movs	r3, #4
 8004b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b7e:	e065      	b.n	8004c4c <UART_SetConfig+0x210>
 8004b80:	2308      	movs	r3, #8
 8004b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b86:	e061      	b.n	8004c4c <UART_SetConfig+0x210>
 8004b88:	2310      	movs	r3, #16
 8004b8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b8e:	e05d      	b.n	8004c4c <UART_SetConfig+0x210>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a58      	ldr	r2, [pc, #352]	; (8004cf8 <UART_SetConfig+0x2bc>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d125      	bne.n	8004be6 <UART_SetConfig+0x1aa>
 8004b9a:	4b55      	ldr	r3, [pc, #340]	; (8004cf0 <UART_SetConfig+0x2b4>)
 8004b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004ba4:	2b30      	cmp	r3, #48	; 0x30
 8004ba6:	d016      	beq.n	8004bd6 <UART_SetConfig+0x19a>
 8004ba8:	2b30      	cmp	r3, #48	; 0x30
 8004baa:	d818      	bhi.n	8004bde <UART_SetConfig+0x1a2>
 8004bac:	2b20      	cmp	r3, #32
 8004bae:	d00a      	beq.n	8004bc6 <UART_SetConfig+0x18a>
 8004bb0:	2b20      	cmp	r3, #32
 8004bb2:	d814      	bhi.n	8004bde <UART_SetConfig+0x1a2>
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d002      	beq.n	8004bbe <UART_SetConfig+0x182>
 8004bb8:	2b10      	cmp	r3, #16
 8004bba:	d008      	beq.n	8004bce <UART_SetConfig+0x192>
 8004bbc:	e00f      	b.n	8004bde <UART_SetConfig+0x1a2>
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bc4:	e042      	b.n	8004c4c <UART_SetConfig+0x210>
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bcc:	e03e      	b.n	8004c4c <UART_SetConfig+0x210>
 8004bce:	2304      	movs	r3, #4
 8004bd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bd4:	e03a      	b.n	8004c4c <UART_SetConfig+0x210>
 8004bd6:	2308      	movs	r3, #8
 8004bd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bdc:	e036      	b.n	8004c4c <UART_SetConfig+0x210>
 8004bde:	2310      	movs	r3, #16
 8004be0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004be4:	e032      	b.n	8004c4c <UART_SetConfig+0x210>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a3f      	ldr	r2, [pc, #252]	; (8004ce8 <UART_SetConfig+0x2ac>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d12a      	bne.n	8004c46 <UART_SetConfig+0x20a>
 8004bf0:	4b3f      	ldr	r3, [pc, #252]	; (8004cf0 <UART_SetConfig+0x2b4>)
 8004bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004bfa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bfe:	d01a      	beq.n	8004c36 <UART_SetConfig+0x1fa>
 8004c00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c04:	d81b      	bhi.n	8004c3e <UART_SetConfig+0x202>
 8004c06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c0a:	d00c      	beq.n	8004c26 <UART_SetConfig+0x1ea>
 8004c0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c10:	d815      	bhi.n	8004c3e <UART_SetConfig+0x202>
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <UART_SetConfig+0x1e2>
 8004c16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c1a:	d008      	beq.n	8004c2e <UART_SetConfig+0x1f2>
 8004c1c:	e00f      	b.n	8004c3e <UART_SetConfig+0x202>
 8004c1e:	2300      	movs	r3, #0
 8004c20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c24:	e012      	b.n	8004c4c <UART_SetConfig+0x210>
 8004c26:	2302      	movs	r3, #2
 8004c28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c2c:	e00e      	b.n	8004c4c <UART_SetConfig+0x210>
 8004c2e:	2304      	movs	r3, #4
 8004c30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c34:	e00a      	b.n	8004c4c <UART_SetConfig+0x210>
 8004c36:	2308      	movs	r3, #8
 8004c38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c3c:	e006      	b.n	8004c4c <UART_SetConfig+0x210>
 8004c3e:	2310      	movs	r3, #16
 8004c40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c44:	e002      	b.n	8004c4c <UART_SetConfig+0x210>
 8004c46:	2310      	movs	r3, #16
 8004c48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a25      	ldr	r2, [pc, #148]	; (8004ce8 <UART_SetConfig+0x2ac>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	f040 808a 	bne.w	8004d6c <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c5c:	2b08      	cmp	r3, #8
 8004c5e:	d824      	bhi.n	8004caa <UART_SetConfig+0x26e>
 8004c60:	a201      	add	r2, pc, #4	; (adr r2, 8004c68 <UART_SetConfig+0x22c>)
 8004c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c66:	bf00      	nop
 8004c68:	08004c8d 	.word	0x08004c8d
 8004c6c:	08004cab 	.word	0x08004cab
 8004c70:	08004c95 	.word	0x08004c95
 8004c74:	08004cab 	.word	0x08004cab
 8004c78:	08004c9b 	.word	0x08004c9b
 8004c7c:	08004cab 	.word	0x08004cab
 8004c80:	08004cab 	.word	0x08004cab
 8004c84:	08004cab 	.word	0x08004cab
 8004c88:	08004ca3 	.word	0x08004ca3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c8c:	f7fe fb50 	bl	8003330 <HAL_RCC_GetPCLK1Freq>
 8004c90:	61f8      	str	r0, [r7, #28]
        break;
 8004c92:	e010      	b.n	8004cb6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c94:	4b19      	ldr	r3, [pc, #100]	; (8004cfc <UART_SetConfig+0x2c0>)
 8004c96:	61fb      	str	r3, [r7, #28]
        break;
 8004c98:	e00d      	b.n	8004cb6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c9a:	f7fe fab1 	bl	8003200 <HAL_RCC_GetSysClockFreq>
 8004c9e:	61f8      	str	r0, [r7, #28]
        break;
 8004ca0:	e009      	b.n	8004cb6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ca2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ca6:	61fb      	str	r3, [r7, #28]
        break;
 8004ca8:	e005      	b.n	8004cb6 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8004caa:	2300      	movs	r3, #0
 8004cac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004cb4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f000 8109 	beq.w	8004ed0 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	685a      	ldr	r2, [r3, #4]
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	005b      	lsls	r3, r3, #1
 8004cc6:	4413      	add	r3, r2
 8004cc8:	69fa      	ldr	r2, [r7, #28]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d305      	bcc.n	8004cda <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004cd4:	69fa      	ldr	r2, [r7, #28]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d912      	bls.n	8004d00 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004ce0:	e0f6      	b.n	8004ed0 <UART_SetConfig+0x494>
 8004ce2:	bf00      	nop
 8004ce4:	efff69f3 	.word	0xefff69f3
 8004ce8:	40008000 	.word	0x40008000
 8004cec:	40013800 	.word	0x40013800
 8004cf0:	40021000 	.word	0x40021000
 8004cf4:	40004400 	.word	0x40004400
 8004cf8:	40004800 	.word	0x40004800
 8004cfc:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	2200      	movs	r2, #0
 8004d04:	461c      	mov	r4, r3
 8004d06:	4615      	mov	r5, r2
 8004d08:	f04f 0200 	mov.w	r2, #0
 8004d0c:	f04f 0300 	mov.w	r3, #0
 8004d10:	022b      	lsls	r3, r5, #8
 8004d12:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004d16:	0222      	lsls	r2, r4, #8
 8004d18:	68f9      	ldr	r1, [r7, #12]
 8004d1a:	6849      	ldr	r1, [r1, #4]
 8004d1c:	0849      	lsrs	r1, r1, #1
 8004d1e:	2000      	movs	r0, #0
 8004d20:	4688      	mov	r8, r1
 8004d22:	4681      	mov	r9, r0
 8004d24:	eb12 0a08 	adds.w	sl, r2, r8
 8004d28:	eb43 0b09 	adc.w	fp, r3, r9
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	603b      	str	r3, [r7, #0]
 8004d34:	607a      	str	r2, [r7, #4]
 8004d36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d3a:	4650      	mov	r0, sl
 8004d3c:	4659      	mov	r1, fp
 8004d3e:	f7fb fa47 	bl	80001d0 <__aeabi_uldivmod>
 8004d42:	4602      	mov	r2, r0
 8004d44:	460b      	mov	r3, r1
 8004d46:	4613      	mov	r3, r2
 8004d48:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d50:	d308      	bcc.n	8004d64 <UART_SetConfig+0x328>
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d58:	d204      	bcs.n	8004d64 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	69ba      	ldr	r2, [r7, #24]
 8004d60:	60da      	str	r2, [r3, #12]
 8004d62:	e0b5      	b.n	8004ed0 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004d6a:	e0b1      	b.n	8004ed0 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	69db      	ldr	r3, [r3, #28]
 8004d70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d74:	d15d      	bne.n	8004e32 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8004d76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d7a:	2b08      	cmp	r3, #8
 8004d7c:	d827      	bhi.n	8004dce <UART_SetConfig+0x392>
 8004d7e:	a201      	add	r2, pc, #4	; (adr r2, 8004d84 <UART_SetConfig+0x348>)
 8004d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d84:	08004da9 	.word	0x08004da9
 8004d88:	08004db1 	.word	0x08004db1
 8004d8c:	08004db9 	.word	0x08004db9
 8004d90:	08004dcf 	.word	0x08004dcf
 8004d94:	08004dbf 	.word	0x08004dbf
 8004d98:	08004dcf 	.word	0x08004dcf
 8004d9c:	08004dcf 	.word	0x08004dcf
 8004da0:	08004dcf 	.word	0x08004dcf
 8004da4:	08004dc7 	.word	0x08004dc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004da8:	f7fe fac2 	bl	8003330 <HAL_RCC_GetPCLK1Freq>
 8004dac:	61f8      	str	r0, [r7, #28]
        break;
 8004dae:	e014      	b.n	8004dda <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004db0:	f7fe fad4 	bl	800335c <HAL_RCC_GetPCLK2Freq>
 8004db4:	61f8      	str	r0, [r7, #28]
        break;
 8004db6:	e010      	b.n	8004dda <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004db8:	4b4c      	ldr	r3, [pc, #304]	; (8004eec <UART_SetConfig+0x4b0>)
 8004dba:	61fb      	str	r3, [r7, #28]
        break;
 8004dbc:	e00d      	b.n	8004dda <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dbe:	f7fe fa1f 	bl	8003200 <HAL_RCC_GetSysClockFreq>
 8004dc2:	61f8      	str	r0, [r7, #28]
        break;
 8004dc4:	e009      	b.n	8004dda <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dca:	61fb      	str	r3, [r7, #28]
        break;
 8004dcc:	e005      	b.n	8004dda <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004dd8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d077      	beq.n	8004ed0 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	005a      	lsls	r2, r3, #1
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	085b      	lsrs	r3, r3, #1
 8004dea:	441a      	add	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	2b0f      	cmp	r3, #15
 8004dfa:	d916      	bls.n	8004e2a <UART_SetConfig+0x3ee>
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e02:	d212      	bcs.n	8004e2a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	f023 030f 	bic.w	r3, r3, #15
 8004e0c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	085b      	lsrs	r3, r3, #1
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	f003 0307 	and.w	r3, r3, #7
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	8afb      	ldrh	r3, [r7, #22]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	8afa      	ldrh	r2, [r7, #22]
 8004e26:	60da      	str	r2, [r3, #12]
 8004e28:	e052      	b.n	8004ed0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004e30:	e04e      	b.n	8004ed0 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e36:	2b08      	cmp	r3, #8
 8004e38:	d827      	bhi.n	8004e8a <UART_SetConfig+0x44e>
 8004e3a:	a201      	add	r2, pc, #4	; (adr r2, 8004e40 <UART_SetConfig+0x404>)
 8004e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e40:	08004e65 	.word	0x08004e65
 8004e44:	08004e6d 	.word	0x08004e6d
 8004e48:	08004e75 	.word	0x08004e75
 8004e4c:	08004e8b 	.word	0x08004e8b
 8004e50:	08004e7b 	.word	0x08004e7b
 8004e54:	08004e8b 	.word	0x08004e8b
 8004e58:	08004e8b 	.word	0x08004e8b
 8004e5c:	08004e8b 	.word	0x08004e8b
 8004e60:	08004e83 	.word	0x08004e83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e64:	f7fe fa64 	bl	8003330 <HAL_RCC_GetPCLK1Freq>
 8004e68:	61f8      	str	r0, [r7, #28]
        break;
 8004e6a:	e014      	b.n	8004e96 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e6c:	f7fe fa76 	bl	800335c <HAL_RCC_GetPCLK2Freq>
 8004e70:	61f8      	str	r0, [r7, #28]
        break;
 8004e72:	e010      	b.n	8004e96 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e74:	4b1d      	ldr	r3, [pc, #116]	; (8004eec <UART_SetConfig+0x4b0>)
 8004e76:	61fb      	str	r3, [r7, #28]
        break;
 8004e78:	e00d      	b.n	8004e96 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e7a:	f7fe f9c1 	bl	8003200 <HAL_RCC_GetSysClockFreq>
 8004e7e:	61f8      	str	r0, [r7, #28]
        break;
 8004e80:	e009      	b.n	8004e96 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e86:	61fb      	str	r3, [r7, #28]
        break;
 8004e88:	e005      	b.n	8004e96 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004e94:	bf00      	nop
    }

    if (pclk != 0U)
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d019      	beq.n	8004ed0 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	085a      	lsrs	r2, r3, #1
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	441a      	add	r2, r3
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	2b0f      	cmp	r3, #15
 8004eb4:	d909      	bls.n	8004eca <UART_SetConfig+0x48e>
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ebc:	d205      	bcs.n	8004eca <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	60da      	str	r2, [r3, #12]
 8004ec8:	e002      	b.n	8004ed0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004edc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3728      	adds	r7, #40	; 0x28
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004eea:	bf00      	nop
 8004eec:	00f42400 	.word	0x00f42400

08004ef0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efc:	f003 0301 	and.w	r3, r3, #1
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00a      	beq.n	8004f1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00a      	beq.n	8004f3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f40:	f003 0304 	and.w	r3, r3, #4
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00a      	beq.n	8004f5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f62:	f003 0308 	and.w	r3, r3, #8
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00a      	beq.n	8004f80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f84:	f003 0310 	and.w	r3, r3, #16
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00a      	beq.n	8004fa2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	f003 0320 	and.w	r3, r3, #32
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00a      	beq.n	8004fc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d01a      	beq.n	8005006 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fee:	d10a      	bne.n	8005006 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	430a      	orrs	r2, r1
 8005004:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00a      	beq.n	8005028 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	430a      	orrs	r2, r1
 8005026:	605a      	str	r2, [r3, #4]
  }
}
 8005028:	bf00      	nop
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af02      	add	r7, sp, #8
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005044:	f7fc f90a 	bl	800125c <HAL_GetTick>
 8005048:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0308 	and.w	r3, r3, #8
 8005054:	2b08      	cmp	r3, #8
 8005056:	d10e      	bne.n	8005076 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005058:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800505c:	9300      	str	r3, [sp, #0]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f82d 	bl	80050c6 <UART_WaitOnFlagUntilTimeout>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e023      	b.n	80050be <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0304 	and.w	r3, r3, #4
 8005080:	2b04      	cmp	r3, #4
 8005082:	d10e      	bne.n	80050a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005084:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005088:	9300      	str	r3, [sp, #0]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f817 	bl	80050c6 <UART_WaitOnFlagUntilTimeout>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d001      	beq.n	80050a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e00d      	b.n	80050be <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2220      	movs	r2, #32
 80050a6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2220      	movs	r2, #32
 80050ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b09c      	sub	sp, #112	; 0x70
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	60f8      	str	r0, [r7, #12]
 80050ce:	60b9      	str	r1, [r7, #8]
 80050d0:	603b      	str	r3, [r7, #0]
 80050d2:	4613      	mov	r3, r2
 80050d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050d6:	e0a5      	b.n	8005224 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050de:	f000 80a1 	beq.w	8005224 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050e2:	f7fc f8bb 	bl	800125c <HAL_GetTick>
 80050e6:	4602      	mov	r2, r0
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d302      	bcc.n	80050f8 <UART_WaitOnFlagUntilTimeout+0x32>
 80050f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d13e      	bne.n	8005176 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005100:	e853 3f00 	ldrex	r3, [r3]
 8005104:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005108:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800510c:	667b      	str	r3, [r7, #100]	; 0x64
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	461a      	mov	r2, r3
 8005114:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005116:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005118:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800511c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800511e:	e841 2300 	strex	r3, r2, [r1]
 8005122:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005124:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1e6      	bne.n	80050f8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	3308      	adds	r3, #8
 8005130:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005134:	e853 3f00 	ldrex	r3, [r3]
 8005138:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800513a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513c:	f023 0301 	bic.w	r3, r3, #1
 8005140:	663b      	str	r3, [r7, #96]	; 0x60
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	3308      	adds	r3, #8
 8005148:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800514a:	64ba      	str	r2, [r7, #72]	; 0x48
 800514c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005150:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005152:	e841 2300 	strex	r3, r2, [r1]
 8005156:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1e5      	bne.n	800512a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2220      	movs	r2, #32
 8005162:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2220      	movs	r2, #32
 8005168:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e067      	b.n	8005246 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0304 	and.w	r3, r3, #4
 8005180:	2b00      	cmp	r3, #0
 8005182:	d04f      	beq.n	8005224 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	69db      	ldr	r3, [r3, #28]
 800518a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800518e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005192:	d147      	bne.n	8005224 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800519c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a6:	e853 3f00 	ldrex	r3, [r3]
 80051aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80051b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	461a      	mov	r2, r3
 80051ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051bc:	637b      	str	r3, [r7, #52]	; 0x34
 80051be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051c4:	e841 2300 	strex	r3, r2, [r1]
 80051c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80051ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1e6      	bne.n	800519e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	3308      	adds	r3, #8
 80051d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	e853 3f00 	ldrex	r3, [r3]
 80051de:	613b      	str	r3, [r7, #16]
   return(result);
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	f023 0301 	bic.w	r3, r3, #1
 80051e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	3308      	adds	r3, #8
 80051ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80051f0:	623a      	str	r2, [r7, #32]
 80051f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f4:	69f9      	ldr	r1, [r7, #28]
 80051f6:	6a3a      	ldr	r2, [r7, #32]
 80051f8:	e841 2300 	strex	r3, r2, [r1]
 80051fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d1e5      	bne.n	80051d0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2220      	movs	r2, #32
 8005208:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2220      	movs	r2, #32
 800520e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2220      	movs	r2, #32
 8005214:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e010      	b.n	8005246 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	69da      	ldr	r2, [r3, #28]
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	4013      	ands	r3, r2
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	429a      	cmp	r2, r3
 8005232:	bf0c      	ite	eq
 8005234:	2301      	moveq	r3, #1
 8005236:	2300      	movne	r3, #0
 8005238:	b2db      	uxtb	r3, r3
 800523a:	461a      	mov	r2, r3
 800523c:	79fb      	ldrb	r3, [r7, #7]
 800523e:	429a      	cmp	r2, r3
 8005240:	f43f af4a 	beq.w	80050d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3770      	adds	r7, #112	; 0x70
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
	...

08005250 <__NVIC_SetPriority>:
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	4603      	mov	r3, r0
 8005258:	6039      	str	r1, [r7, #0]
 800525a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800525c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005260:	2b00      	cmp	r3, #0
 8005262:	db0a      	blt.n	800527a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	b2da      	uxtb	r2, r3
 8005268:	490c      	ldr	r1, [pc, #48]	; (800529c <__NVIC_SetPriority+0x4c>)
 800526a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800526e:	0112      	lsls	r2, r2, #4
 8005270:	b2d2      	uxtb	r2, r2
 8005272:	440b      	add	r3, r1
 8005274:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005278:	e00a      	b.n	8005290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	b2da      	uxtb	r2, r3
 800527e:	4908      	ldr	r1, [pc, #32]	; (80052a0 <__NVIC_SetPriority+0x50>)
 8005280:	79fb      	ldrb	r3, [r7, #7]
 8005282:	f003 030f 	and.w	r3, r3, #15
 8005286:	3b04      	subs	r3, #4
 8005288:	0112      	lsls	r2, r2, #4
 800528a:	b2d2      	uxtb	r2, r2
 800528c:	440b      	add	r3, r1
 800528e:	761a      	strb	r2, [r3, #24]
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr
 800529c:	e000e100 	.word	0xe000e100
 80052a0:	e000ed00 	.word	0xe000ed00

080052a4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80052a4:	b580      	push	{r7, lr}
 80052a6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80052a8:	4b05      	ldr	r3, [pc, #20]	; (80052c0 <SysTick_Handler+0x1c>)
 80052aa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80052ac:	f001 fd2a 	bl	8006d04 <xTaskGetSchedulerState>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d001      	beq.n	80052ba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80052b6:	f002 fb0f 	bl	80078d8 <xPortSysTickHandler>
  }
}
 80052ba:	bf00      	nop
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	e000e010 	.word	0xe000e010

080052c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80052c4:	b580      	push	{r7, lr}
 80052c6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80052c8:	2100      	movs	r1, #0
 80052ca:	f06f 0004 	mvn.w	r0, #4
 80052ce:	f7ff ffbf 	bl	8005250 <__NVIC_SetPriority>
#endif
}
 80052d2:	bf00      	nop
 80052d4:	bd80      	pop	{r7, pc}
	...

080052d8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052de:	f3ef 8305 	mrs	r3, IPSR
 80052e2:	603b      	str	r3, [r7, #0]
  return(result);
 80052e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80052ea:	f06f 0305 	mvn.w	r3, #5
 80052ee:	607b      	str	r3, [r7, #4]
 80052f0:	e00c      	b.n	800530c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80052f2:	4b0a      	ldr	r3, [pc, #40]	; (800531c <osKernelInitialize+0x44>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d105      	bne.n	8005306 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80052fa:	4b08      	ldr	r3, [pc, #32]	; (800531c <osKernelInitialize+0x44>)
 80052fc:	2201      	movs	r2, #1
 80052fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005300:	2300      	movs	r3, #0
 8005302:	607b      	str	r3, [r7, #4]
 8005304:	e002      	b.n	800530c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005306:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800530a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800530c:	687b      	ldr	r3, [r7, #4]
}
 800530e:	4618      	mov	r0, r3
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	200003ac 	.word	0x200003ac

08005320 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005326:	f3ef 8305 	mrs	r3, IPSR
 800532a:	603b      	str	r3, [r7, #0]
  return(result);
 800532c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800532e:	2b00      	cmp	r3, #0
 8005330:	d003      	beq.n	800533a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005332:	f06f 0305 	mvn.w	r3, #5
 8005336:	607b      	str	r3, [r7, #4]
 8005338:	e010      	b.n	800535c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800533a:	4b0b      	ldr	r3, [pc, #44]	; (8005368 <osKernelStart+0x48>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d109      	bne.n	8005356 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005342:	f7ff ffbf 	bl	80052c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005346:	4b08      	ldr	r3, [pc, #32]	; (8005368 <osKernelStart+0x48>)
 8005348:	2202      	movs	r2, #2
 800534a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800534c:	f001 f87c 	bl	8006448 <vTaskStartScheduler>
      stat = osOK;
 8005350:	2300      	movs	r3, #0
 8005352:	607b      	str	r3, [r7, #4]
 8005354:	e002      	b.n	800535c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005356:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800535a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800535c:	687b      	ldr	r3, [r7, #4]
}
 800535e:	4618      	mov	r0, r3
 8005360:	3708      	adds	r7, #8
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	200003ac 	.word	0x200003ac

0800536c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800536c:	b580      	push	{r7, lr}
 800536e:	b08e      	sub	sp, #56	; 0x38
 8005370:	af04      	add	r7, sp, #16
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005378:	2300      	movs	r3, #0
 800537a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800537c:	f3ef 8305 	mrs	r3, IPSR
 8005380:	617b      	str	r3, [r7, #20]
  return(result);
 8005382:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005384:	2b00      	cmp	r3, #0
 8005386:	d17e      	bne.n	8005486 <osThreadNew+0x11a>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d07b      	beq.n	8005486 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800538e:	2380      	movs	r3, #128	; 0x80
 8005390:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005392:	2318      	movs	r3, #24
 8005394:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005396:	2300      	movs	r3, #0
 8005398:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800539a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800539e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d045      	beq.n	8005432 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d002      	beq.n	80053b4 <osThreadNew+0x48>
        name = attr->name;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d002      	beq.n	80053c2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d008      	beq.n	80053da <osThreadNew+0x6e>
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	2b38      	cmp	r3, #56	; 0x38
 80053cc:	d805      	bhi.n	80053da <osThreadNew+0x6e>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <osThreadNew+0x72>
        return (NULL);
 80053da:	2300      	movs	r3, #0
 80053dc:	e054      	b.n	8005488 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d003      	beq.n	80053ee <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	089b      	lsrs	r3, r3, #2
 80053ec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00e      	beq.n	8005414 <osThreadNew+0xa8>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	2bbb      	cmp	r3, #187	; 0xbb
 80053fc:	d90a      	bls.n	8005414 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005402:	2b00      	cmp	r3, #0
 8005404:	d006      	beq.n	8005414 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d002      	beq.n	8005414 <osThreadNew+0xa8>
        mem = 1;
 800540e:	2301      	movs	r3, #1
 8005410:	61bb      	str	r3, [r7, #24]
 8005412:	e010      	b.n	8005436 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d10c      	bne.n	8005436 <osThreadNew+0xca>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d108      	bne.n	8005436 <osThreadNew+0xca>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d104      	bne.n	8005436 <osThreadNew+0xca>
          mem = 0;
 800542c:	2300      	movs	r3, #0
 800542e:	61bb      	str	r3, [r7, #24]
 8005430:	e001      	b.n	8005436 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005432:	2300      	movs	r3, #0
 8005434:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	2b01      	cmp	r3, #1
 800543a:	d110      	bne.n	800545e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005444:	9202      	str	r2, [sp, #8]
 8005446:	9301      	str	r3, [sp, #4]
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	9300      	str	r3, [sp, #0]
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	6a3a      	ldr	r2, [r7, #32]
 8005450:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f000 fe0c 	bl	8006070 <xTaskCreateStatic>
 8005458:	4603      	mov	r3, r0
 800545a:	613b      	str	r3, [r7, #16]
 800545c:	e013      	b.n	8005486 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d110      	bne.n	8005486 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005464:	6a3b      	ldr	r3, [r7, #32]
 8005466:	b29a      	uxth	r2, r3
 8005468:	f107 0310 	add.w	r3, r7, #16
 800546c:	9301      	str	r3, [sp, #4]
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	9300      	str	r3, [sp, #0]
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f000 fe57 	bl	800612a <xTaskCreate>
 800547c:	4603      	mov	r3, r0
 800547e:	2b01      	cmp	r3, #1
 8005480:	d001      	beq.n	8005486 <osThreadNew+0x11a>
            hTask = NULL;
 8005482:	2300      	movs	r3, #0
 8005484:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005486:	693b      	ldr	r3, [r7, #16]
}
 8005488:	4618      	mov	r0, r3
 800548a:	3728      	adds	r7, #40	; 0x28
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005498:	f3ef 8305 	mrs	r3, IPSR
 800549c:	60bb      	str	r3, [r7, #8]
  return(result);
 800549e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d003      	beq.n	80054ac <osDelay+0x1c>
    stat = osErrorISR;
 80054a4:	f06f 0305 	mvn.w	r3, #5
 80054a8:	60fb      	str	r3, [r7, #12]
 80054aa:	e007      	b.n	80054bc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80054ac:	2300      	movs	r3, #0
 80054ae:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d002      	beq.n	80054bc <osDelay+0x2c>
      vTaskDelay(ticks);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 ff92 	bl	80063e0 <vTaskDelay>
    }
  }

  return (stat);
 80054bc:	68fb      	ldr	r3, [r7, #12]
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
	...

080054c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	4a07      	ldr	r2, [pc, #28]	; (80054f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80054d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	4a06      	ldr	r2, [pc, #24]	; (80054f8 <vApplicationGetIdleTaskMemory+0x30>)
 80054de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2280      	movs	r2, #128	; 0x80
 80054e4:	601a      	str	r2, [r3, #0]
}
 80054e6:	bf00      	nop
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	200003b0 	.word	0x200003b0
 80054f8:	2000046c 	.word	0x2000046c

080054fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	4a07      	ldr	r2, [pc, #28]	; (8005528 <vApplicationGetTimerTaskMemory+0x2c>)
 800550c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	4a06      	ldr	r2, [pc, #24]	; (800552c <vApplicationGetTimerTaskMemory+0x30>)
 8005512:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f44f 7280 	mov.w	r2, #256	; 0x100
 800551a:	601a      	str	r2, [r3, #0]
}
 800551c:	bf00      	nop
 800551e:	3714      	adds	r7, #20
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr
 8005528:	2000066c 	.word	0x2000066c
 800552c:	20000728 	.word	0x20000728

08005530 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f103 0208 	add.w	r2, r3, #8
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005548:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f103 0208 	add.w	r2, r3, #8
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f103 0208 	add.w	r2, r3, #8
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800557e:	bf00      	nop
 8005580:	370c      	adds	r7, #12
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800558a:	b480      	push	{r7}
 800558c:	b085      	sub	sp, #20
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
 8005592:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	689a      	ldr	r2, [r3, #8]
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	683a      	ldr	r2, [r7, #0]
 80055ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	683a      	ldr	r2, [r7, #0]
 80055b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	1c5a      	adds	r2, r3, #1
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	601a      	str	r2, [r3, #0]
}
 80055c6:	bf00      	nop
 80055c8:	3714      	adds	r7, #20
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr

080055d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055d2:	b480      	push	{r7}
 80055d4:	b085      	sub	sp, #20
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
 80055da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055e8:	d103      	bne.n	80055f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	e00c      	b.n	800560c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	3308      	adds	r3, #8
 80055f6:	60fb      	str	r3, [r7, #12]
 80055f8:	e002      	b.n	8005600 <vListInsert+0x2e>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	60fb      	str	r3, [r7, #12]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68ba      	ldr	r2, [r7, #8]
 8005608:	429a      	cmp	r2, r3
 800560a:	d2f6      	bcs.n	80055fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	685a      	ldr	r2, [r3, #4]
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	683a      	ldr	r2, [r7, #0]
 800561a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	683a      	ldr	r2, [r7, #0]
 8005626:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	1c5a      	adds	r2, r3, #1
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	601a      	str	r2, [r3, #0]
}
 8005638:	bf00      	nop
 800563a:	3714      	adds	r7, #20
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	6892      	ldr	r2, [r2, #8]
 800565a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	6852      	ldr	r2, [r2, #4]
 8005664:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	429a      	cmp	r2, r3
 800566e:	d103      	bne.n	8005678 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	689a      	ldr	r2, [r3, #8]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	1e5a      	subs	r2, r3, #1
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
}
 800568c:	4618      	mov	r0, r3
 800568e:	3714      	adds	r7, #20
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d10a      	bne.n	80056c2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80056ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b0:	f383 8811 	msr	BASEPRI, r3
 80056b4:	f3bf 8f6f 	isb	sy
 80056b8:	f3bf 8f4f 	dsb	sy
 80056bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80056be:	bf00      	nop
 80056c0:	e7fe      	b.n	80056c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80056c2:	f002 f877 	bl	80077b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ce:	68f9      	ldr	r1, [r7, #12]
 80056d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80056d2:	fb01 f303 	mul.w	r3, r1, r3
 80056d6:	441a      	add	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056f2:	3b01      	subs	r3, #1
 80056f4:	68f9      	ldr	r1, [r7, #12]
 80056f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80056f8:	fb01 f303 	mul.w	r3, r1, r3
 80056fc:	441a      	add	r2, r3
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	22ff      	movs	r2, #255	; 0xff
 8005706:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	22ff      	movs	r2, #255	; 0xff
 800570e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d114      	bne.n	8005742 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d01a      	beq.n	8005756 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	3310      	adds	r3, #16
 8005724:	4618      	mov	r0, r3
 8005726:	f001 f929 	bl	800697c <xTaskRemoveFromEventList>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d012      	beq.n	8005756 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005730:	4b0c      	ldr	r3, [pc, #48]	; (8005764 <xQueueGenericReset+0xcc>)
 8005732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005736:	601a      	str	r2, [r3, #0]
 8005738:	f3bf 8f4f 	dsb	sy
 800573c:	f3bf 8f6f 	isb	sy
 8005740:	e009      	b.n	8005756 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	3310      	adds	r3, #16
 8005746:	4618      	mov	r0, r3
 8005748:	f7ff fef2 	bl	8005530 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	3324      	adds	r3, #36	; 0x24
 8005750:	4618      	mov	r0, r3
 8005752:	f7ff feed 	bl	8005530 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005756:	f002 f85d 	bl	8007814 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800575a:	2301      	movs	r3, #1
}
 800575c:	4618      	mov	r0, r3
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}
 8005764:	e000ed04 	.word	0xe000ed04

08005768 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005768:	b580      	push	{r7, lr}
 800576a:	b08e      	sub	sp, #56	; 0x38
 800576c:	af02      	add	r7, sp, #8
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
 8005774:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d10a      	bne.n	8005792 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800577c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005780:	f383 8811 	msr	BASEPRI, r3
 8005784:	f3bf 8f6f 	isb	sy
 8005788:	f3bf 8f4f 	dsb	sy
 800578c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800578e:	bf00      	nop
 8005790:	e7fe      	b.n	8005790 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d10a      	bne.n	80057ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579c:	f383 8811 	msr	BASEPRI, r3
 80057a0:	f3bf 8f6f 	isb	sy
 80057a4:	f3bf 8f4f 	dsb	sy
 80057a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80057aa:	bf00      	nop
 80057ac:	e7fe      	b.n	80057ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d002      	beq.n	80057ba <xQueueGenericCreateStatic+0x52>
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d001      	beq.n	80057be <xQueueGenericCreateStatic+0x56>
 80057ba:	2301      	movs	r3, #1
 80057bc:	e000      	b.n	80057c0 <xQueueGenericCreateStatic+0x58>
 80057be:	2300      	movs	r3, #0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10a      	bne.n	80057da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80057c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c8:	f383 8811 	msr	BASEPRI, r3
 80057cc:	f3bf 8f6f 	isb	sy
 80057d0:	f3bf 8f4f 	dsb	sy
 80057d4:	623b      	str	r3, [r7, #32]
}
 80057d6:	bf00      	nop
 80057d8:	e7fe      	b.n	80057d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d102      	bne.n	80057e6 <xQueueGenericCreateStatic+0x7e>
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d101      	bne.n	80057ea <xQueueGenericCreateStatic+0x82>
 80057e6:	2301      	movs	r3, #1
 80057e8:	e000      	b.n	80057ec <xQueueGenericCreateStatic+0x84>
 80057ea:	2300      	movs	r3, #0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10a      	bne.n	8005806 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80057f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f4:	f383 8811 	msr	BASEPRI, r3
 80057f8:	f3bf 8f6f 	isb	sy
 80057fc:	f3bf 8f4f 	dsb	sy
 8005800:	61fb      	str	r3, [r7, #28]
}
 8005802:	bf00      	nop
 8005804:	e7fe      	b.n	8005804 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005806:	2350      	movs	r3, #80	; 0x50
 8005808:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	2b50      	cmp	r3, #80	; 0x50
 800580e:	d00a      	beq.n	8005826 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005814:	f383 8811 	msr	BASEPRI, r3
 8005818:	f3bf 8f6f 	isb	sy
 800581c:	f3bf 8f4f 	dsb	sy
 8005820:	61bb      	str	r3, [r7, #24]
}
 8005822:	bf00      	nop
 8005824:	e7fe      	b.n	8005824 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005826:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800582c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00d      	beq.n	800584e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005834:	2201      	movs	r2, #1
 8005836:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800583a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800583e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	4613      	mov	r3, r2
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	68b9      	ldr	r1, [r7, #8]
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f000 f805 	bl	8005858 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800584e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005850:	4618      	mov	r0, r3
 8005852:	3730      	adds	r7, #48	; 0x30
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
 8005864:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d103      	bne.n	8005874 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	69ba      	ldr	r2, [r7, #24]
 8005870:	601a      	str	r2, [r3, #0]
 8005872:	e002      	b.n	800587a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	68ba      	ldr	r2, [r7, #8]
 8005884:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005886:	2101      	movs	r1, #1
 8005888:	69b8      	ldr	r0, [r7, #24]
 800588a:	f7ff ff05 	bl	8005698 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	78fa      	ldrb	r2, [r7, #3]
 8005892:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005896:	bf00      	nop
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
	...

080058a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b08e      	sub	sp, #56	; 0x38
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
 80058ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80058ae:	2300      	movs	r3, #0
 80058b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80058b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d10a      	bne.n	80058d2 <xQueueGenericSend+0x32>
	__asm volatile
 80058bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c0:	f383 8811 	msr	BASEPRI, r3
 80058c4:	f3bf 8f6f 	isb	sy
 80058c8:	f3bf 8f4f 	dsb	sy
 80058cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80058ce:	bf00      	nop
 80058d0:	e7fe      	b.n	80058d0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d103      	bne.n	80058e0 <xQueueGenericSend+0x40>
 80058d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d101      	bne.n	80058e4 <xQueueGenericSend+0x44>
 80058e0:	2301      	movs	r3, #1
 80058e2:	e000      	b.n	80058e6 <xQueueGenericSend+0x46>
 80058e4:	2300      	movs	r3, #0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10a      	bne.n	8005900 <xQueueGenericSend+0x60>
	__asm volatile
 80058ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ee:	f383 8811 	msr	BASEPRI, r3
 80058f2:	f3bf 8f6f 	isb	sy
 80058f6:	f3bf 8f4f 	dsb	sy
 80058fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80058fc:	bf00      	nop
 80058fe:	e7fe      	b.n	80058fe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	2b02      	cmp	r3, #2
 8005904:	d103      	bne.n	800590e <xQueueGenericSend+0x6e>
 8005906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800590a:	2b01      	cmp	r3, #1
 800590c:	d101      	bne.n	8005912 <xQueueGenericSend+0x72>
 800590e:	2301      	movs	r3, #1
 8005910:	e000      	b.n	8005914 <xQueueGenericSend+0x74>
 8005912:	2300      	movs	r3, #0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10a      	bne.n	800592e <xQueueGenericSend+0x8e>
	__asm volatile
 8005918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591c:	f383 8811 	msr	BASEPRI, r3
 8005920:	f3bf 8f6f 	isb	sy
 8005924:	f3bf 8f4f 	dsb	sy
 8005928:	623b      	str	r3, [r7, #32]
}
 800592a:	bf00      	nop
 800592c:	e7fe      	b.n	800592c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800592e:	f001 f9e9 	bl	8006d04 <xTaskGetSchedulerState>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d102      	bne.n	800593e <xQueueGenericSend+0x9e>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <xQueueGenericSend+0xa2>
 800593e:	2301      	movs	r3, #1
 8005940:	e000      	b.n	8005944 <xQueueGenericSend+0xa4>
 8005942:	2300      	movs	r3, #0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d10a      	bne.n	800595e <xQueueGenericSend+0xbe>
	__asm volatile
 8005948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594c:	f383 8811 	msr	BASEPRI, r3
 8005950:	f3bf 8f6f 	isb	sy
 8005954:	f3bf 8f4f 	dsb	sy
 8005958:	61fb      	str	r3, [r7, #28]
}
 800595a:	bf00      	nop
 800595c:	e7fe      	b.n	800595c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800595e:	f001 ff29 	bl	80077b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005964:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800596a:	429a      	cmp	r2, r3
 800596c:	d302      	bcc.n	8005974 <xQueueGenericSend+0xd4>
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	2b02      	cmp	r3, #2
 8005972:	d129      	bne.n	80059c8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005974:	683a      	ldr	r2, [r7, #0]
 8005976:	68b9      	ldr	r1, [r7, #8]
 8005978:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800597a:	f000 fa0b 	bl	8005d94 <prvCopyDataToQueue>
 800597e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005984:	2b00      	cmp	r3, #0
 8005986:	d010      	beq.n	80059aa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598a:	3324      	adds	r3, #36	; 0x24
 800598c:	4618      	mov	r0, r3
 800598e:	f000 fff5 	bl	800697c <xTaskRemoveFromEventList>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d013      	beq.n	80059c0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005998:	4b3f      	ldr	r3, [pc, #252]	; (8005a98 <xQueueGenericSend+0x1f8>)
 800599a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800599e:	601a      	str	r2, [r3, #0]
 80059a0:	f3bf 8f4f 	dsb	sy
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	e00a      	b.n	80059c0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80059aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d007      	beq.n	80059c0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80059b0:	4b39      	ldr	r3, [pc, #228]	; (8005a98 <xQueueGenericSend+0x1f8>)
 80059b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059b6:	601a      	str	r2, [r3, #0]
 80059b8:	f3bf 8f4f 	dsb	sy
 80059bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80059c0:	f001 ff28 	bl	8007814 <vPortExitCritical>
				return pdPASS;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e063      	b.n	8005a90 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d103      	bne.n	80059d6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80059ce:	f001 ff21 	bl	8007814 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80059d2:	2300      	movs	r3, #0
 80059d4:	e05c      	b.n	8005a90 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80059d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d106      	bne.n	80059ea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80059dc:	f107 0314 	add.w	r3, r7, #20
 80059e0:	4618      	mov	r0, r3
 80059e2:	f001 f82f 	bl	8006a44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80059e6:	2301      	movs	r3, #1
 80059e8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80059ea:	f001 ff13 	bl	8007814 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80059ee:	f000 fd9b 	bl	8006528 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80059f2:	f001 fedf 	bl	80077b4 <vPortEnterCritical>
 80059f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059fc:	b25b      	sxtb	r3, r3
 80059fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a02:	d103      	bne.n	8005a0c <xQueueGenericSend+0x16c>
 8005a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a12:	b25b      	sxtb	r3, r3
 8005a14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a18:	d103      	bne.n	8005a22 <xQueueGenericSend+0x182>
 8005a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a22:	f001 fef7 	bl	8007814 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a26:	1d3a      	adds	r2, r7, #4
 8005a28:	f107 0314 	add.w	r3, r7, #20
 8005a2c:	4611      	mov	r1, r2
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f001 f81e 	bl	8006a70 <xTaskCheckForTimeOut>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d124      	bne.n	8005a84 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005a3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a3c:	f000 faa2 	bl	8005f84 <prvIsQueueFull>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d018      	beq.n	8005a78 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a48:	3310      	adds	r3, #16
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	4611      	mov	r1, r2
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f000 ff44 	bl	80068dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005a54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a56:	f000 fa2d 	bl	8005eb4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005a5a:	f000 fd73 	bl	8006544 <xTaskResumeAll>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f47f af7c 	bne.w	800595e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005a66:	4b0c      	ldr	r3, [pc, #48]	; (8005a98 <xQueueGenericSend+0x1f8>)
 8005a68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a6c:	601a      	str	r2, [r3, #0]
 8005a6e:	f3bf 8f4f 	dsb	sy
 8005a72:	f3bf 8f6f 	isb	sy
 8005a76:	e772      	b.n	800595e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005a78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a7a:	f000 fa1b 	bl	8005eb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a7e:	f000 fd61 	bl	8006544 <xTaskResumeAll>
 8005a82:	e76c      	b.n	800595e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005a84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a86:	f000 fa15 	bl	8005eb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a8a:	f000 fd5b 	bl	8006544 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005a8e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3738      	adds	r7, #56	; 0x38
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	e000ed04 	.word	0xe000ed04

08005a9c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b090      	sub	sp, #64	; 0x40
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
 8005aa8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10a      	bne.n	8005aca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab8:	f383 8811 	msr	BASEPRI, r3
 8005abc:	f3bf 8f6f 	isb	sy
 8005ac0:	f3bf 8f4f 	dsb	sy
 8005ac4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005ac6:	bf00      	nop
 8005ac8:	e7fe      	b.n	8005ac8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d103      	bne.n	8005ad8 <xQueueGenericSendFromISR+0x3c>
 8005ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d101      	bne.n	8005adc <xQueueGenericSendFromISR+0x40>
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e000      	b.n	8005ade <xQueueGenericSendFromISR+0x42>
 8005adc:	2300      	movs	r3, #0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d10a      	bne.n	8005af8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae6:	f383 8811 	msr	BASEPRI, r3
 8005aea:	f3bf 8f6f 	isb	sy
 8005aee:	f3bf 8f4f 	dsb	sy
 8005af2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005af4:	bf00      	nop
 8005af6:	e7fe      	b.n	8005af6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d103      	bne.n	8005b06 <xQueueGenericSendFromISR+0x6a>
 8005afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d101      	bne.n	8005b0a <xQueueGenericSendFromISR+0x6e>
 8005b06:	2301      	movs	r3, #1
 8005b08:	e000      	b.n	8005b0c <xQueueGenericSendFromISR+0x70>
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d10a      	bne.n	8005b26 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b14:	f383 8811 	msr	BASEPRI, r3
 8005b18:	f3bf 8f6f 	isb	sy
 8005b1c:	f3bf 8f4f 	dsb	sy
 8005b20:	623b      	str	r3, [r7, #32]
}
 8005b22:	bf00      	nop
 8005b24:	e7fe      	b.n	8005b24 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b26:	f001 ff27 	bl	8007978 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005b2a:	f3ef 8211 	mrs	r2, BASEPRI
 8005b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b32:	f383 8811 	msr	BASEPRI, r3
 8005b36:	f3bf 8f6f 	isb	sy
 8005b3a:	f3bf 8f4f 	dsb	sy
 8005b3e:	61fa      	str	r2, [r7, #28]
 8005b40:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005b42:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b44:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d302      	bcc.n	8005b58 <xQueueGenericSendFromISR+0xbc>
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d12f      	bne.n	8005bb8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b66:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b68:	683a      	ldr	r2, [r7, #0]
 8005b6a:	68b9      	ldr	r1, [r7, #8]
 8005b6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005b6e:	f000 f911 	bl	8005d94 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005b72:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005b76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b7a:	d112      	bne.n	8005ba2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d016      	beq.n	8005bb2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b86:	3324      	adds	r3, #36	; 0x24
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f000 fef7 	bl	800697c <xTaskRemoveFromEventList>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00e      	beq.n	8005bb2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00b      	beq.n	8005bb2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	601a      	str	r2, [r3, #0]
 8005ba0:	e007      	b.n	8005bb2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005ba2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	b25a      	sxtb	r2, r3
 8005bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005bb6:	e001      	b.n	8005bbc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bbe:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005bc6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3740      	adds	r7, #64	; 0x40
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
	...

08005bd4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b08c      	sub	sp, #48	; 0x30
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005be0:	2300      	movs	r3, #0
 8005be2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10a      	bne.n	8005c04 <xQueueReceive+0x30>
	__asm volatile
 8005bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf2:	f383 8811 	msr	BASEPRI, r3
 8005bf6:	f3bf 8f6f 	isb	sy
 8005bfa:	f3bf 8f4f 	dsb	sy
 8005bfe:	623b      	str	r3, [r7, #32]
}
 8005c00:	bf00      	nop
 8005c02:	e7fe      	b.n	8005c02 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d103      	bne.n	8005c12 <xQueueReceive+0x3e>
 8005c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d101      	bne.n	8005c16 <xQueueReceive+0x42>
 8005c12:	2301      	movs	r3, #1
 8005c14:	e000      	b.n	8005c18 <xQueueReceive+0x44>
 8005c16:	2300      	movs	r3, #0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d10a      	bne.n	8005c32 <xQueueReceive+0x5e>
	__asm volatile
 8005c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c20:	f383 8811 	msr	BASEPRI, r3
 8005c24:	f3bf 8f6f 	isb	sy
 8005c28:	f3bf 8f4f 	dsb	sy
 8005c2c:	61fb      	str	r3, [r7, #28]
}
 8005c2e:	bf00      	nop
 8005c30:	e7fe      	b.n	8005c30 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c32:	f001 f867 	bl	8006d04 <xTaskGetSchedulerState>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d102      	bne.n	8005c42 <xQueueReceive+0x6e>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d101      	bne.n	8005c46 <xQueueReceive+0x72>
 8005c42:	2301      	movs	r3, #1
 8005c44:	e000      	b.n	8005c48 <xQueueReceive+0x74>
 8005c46:	2300      	movs	r3, #0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d10a      	bne.n	8005c62 <xQueueReceive+0x8e>
	__asm volatile
 8005c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c50:	f383 8811 	msr	BASEPRI, r3
 8005c54:	f3bf 8f6f 	isb	sy
 8005c58:	f3bf 8f4f 	dsb	sy
 8005c5c:	61bb      	str	r3, [r7, #24]
}
 8005c5e:	bf00      	nop
 8005c60:	e7fe      	b.n	8005c60 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c62:	f001 fda7 	bl	80077b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d01f      	beq.n	8005cb2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005c72:	68b9      	ldr	r1, [r7, #8]
 8005c74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c76:	f000 f8f7 	bl	8005e68 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	1e5a      	subs	r2, r3, #1
 8005c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c80:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00f      	beq.n	8005caa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8c:	3310      	adds	r3, #16
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f000 fe74 	bl	800697c <xTaskRemoveFromEventList>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d007      	beq.n	8005caa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005c9a:	4b3d      	ldr	r3, [pc, #244]	; (8005d90 <xQueueReceive+0x1bc>)
 8005c9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ca0:	601a      	str	r2, [r3, #0]
 8005ca2:	f3bf 8f4f 	dsb	sy
 8005ca6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005caa:	f001 fdb3 	bl	8007814 <vPortExitCritical>
				return pdPASS;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e069      	b.n	8005d86 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d103      	bne.n	8005cc0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005cb8:	f001 fdac 	bl	8007814 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	e062      	b.n	8005d86 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d106      	bne.n	8005cd4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005cc6:	f107 0310 	add.w	r3, r7, #16
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f000 feba 	bl	8006a44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005cd4:	f001 fd9e 	bl	8007814 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005cd8:	f000 fc26 	bl	8006528 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005cdc:	f001 fd6a 	bl	80077b4 <vPortEnterCritical>
 8005ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ce6:	b25b      	sxtb	r3, r3
 8005ce8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cec:	d103      	bne.n	8005cf6 <xQueueReceive+0x122>
 8005cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cfc:	b25b      	sxtb	r3, r3
 8005cfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d02:	d103      	bne.n	8005d0c <xQueueReceive+0x138>
 8005d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d0c:	f001 fd82 	bl	8007814 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d10:	1d3a      	adds	r2, r7, #4
 8005d12:	f107 0310 	add.w	r3, r7, #16
 8005d16:	4611      	mov	r1, r2
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f000 fea9 	bl	8006a70 <xTaskCheckForTimeOut>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d123      	bne.n	8005d6c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d26:	f000 f917 	bl	8005f58 <prvIsQueueEmpty>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d017      	beq.n	8005d60 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d32:	3324      	adds	r3, #36	; 0x24
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	4611      	mov	r1, r2
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f000 fdcf 	bl	80068dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005d3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d40:	f000 f8b8 	bl	8005eb4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005d44:	f000 fbfe 	bl	8006544 <xTaskResumeAll>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d189      	bne.n	8005c62 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005d4e:	4b10      	ldr	r3, [pc, #64]	; (8005d90 <xQueueReceive+0x1bc>)
 8005d50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d54:	601a      	str	r2, [r3, #0]
 8005d56:	f3bf 8f4f 	dsb	sy
 8005d5a:	f3bf 8f6f 	isb	sy
 8005d5e:	e780      	b.n	8005c62 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005d60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d62:	f000 f8a7 	bl	8005eb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d66:	f000 fbed 	bl	8006544 <xTaskResumeAll>
 8005d6a:	e77a      	b.n	8005c62 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005d6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d6e:	f000 f8a1 	bl	8005eb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d72:	f000 fbe7 	bl	8006544 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d78:	f000 f8ee 	bl	8005f58 <prvIsQueueEmpty>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f43f af6f 	beq.w	8005c62 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005d84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3730      	adds	r7, #48	; 0x30
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	e000ed04 	.word	0xe000ed04

08005d94 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b086      	sub	sp, #24
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005da0:	2300      	movs	r3, #0
 8005da2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10d      	bne.n	8005dce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d14d      	bne.n	8005e56 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f000 ffbe 	bl	8006d40 <xTaskPriorityDisinherit>
 8005dc4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	609a      	str	r2, [r3, #8]
 8005dcc:	e043      	b.n	8005e56 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d119      	bne.n	8005e08 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6858      	ldr	r0, [r3, #4]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ddc:	461a      	mov	r2, r3
 8005dde:	68b9      	ldr	r1, [r7, #8]
 8005de0:	f002 f81a 	bl	8007e18 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	685a      	ldr	r2, [r3, #4]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dec:	441a      	add	r2, r3
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	685a      	ldr	r2, [r3, #4]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d32b      	bcc.n	8005e56 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	605a      	str	r2, [r3, #4]
 8005e06:	e026      	b.n	8005e56 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	68d8      	ldr	r0, [r3, #12]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e10:	461a      	mov	r2, r3
 8005e12:	68b9      	ldr	r1, [r7, #8]
 8005e14:	f002 f800 	bl	8007e18 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	68da      	ldr	r2, [r3, #12]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e20:	425b      	negs	r3, r3
 8005e22:	441a      	add	r2, r3
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	68da      	ldr	r2, [r3, #12]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d207      	bcs.n	8005e44 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	689a      	ldr	r2, [r3, #8]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3c:	425b      	negs	r3, r3
 8005e3e:	441a      	add	r2, r3
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d105      	bne.n	8005e56 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d002      	beq.n	8005e56 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	3b01      	subs	r3, #1
 8005e54:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	1c5a      	adds	r2, r3, #1
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005e5e:	697b      	ldr	r3, [r7, #20]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3718      	adds	r7, #24
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d018      	beq.n	8005eac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	68da      	ldr	r2, [r3, #12]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e82:	441a      	add	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	68da      	ldr	r2, [r3, #12]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d303      	bcc.n	8005e9c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	68d9      	ldr	r1, [r3, #12]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	6838      	ldr	r0, [r7, #0]
 8005ea8:	f001 ffb6 	bl	8007e18 <memcpy>
	}
}
 8005eac:	bf00      	nop
 8005eae:	3708      	adds	r7, #8
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005ebc:	f001 fc7a 	bl	80077b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ec6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ec8:	e011      	b.n	8005eee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d012      	beq.n	8005ef8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	3324      	adds	r3, #36	; 0x24
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f000 fd50 	bl	800697c <xTaskRemoveFromEventList>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d001      	beq.n	8005ee6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005ee2:	f000 fe27 	bl	8006b34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005ee6:	7bfb      	ldrb	r3, [r7, #15]
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	dce9      	bgt.n	8005eca <prvUnlockQueue+0x16>
 8005ef6:	e000      	b.n	8005efa <prvUnlockQueue+0x46>
					break;
 8005ef8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	22ff      	movs	r2, #255	; 0xff
 8005efe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005f02:	f001 fc87 	bl	8007814 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005f06:	f001 fc55 	bl	80077b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f10:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f12:	e011      	b.n	8005f38 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d012      	beq.n	8005f42 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	3310      	adds	r3, #16
 8005f20:	4618      	mov	r0, r3
 8005f22:	f000 fd2b 	bl	800697c <xTaskRemoveFromEventList>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d001      	beq.n	8005f30 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005f2c:	f000 fe02 	bl	8006b34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005f30:	7bbb      	ldrb	r3, [r7, #14]
 8005f32:	3b01      	subs	r3, #1
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	dce9      	bgt.n	8005f14 <prvUnlockQueue+0x60>
 8005f40:	e000      	b.n	8005f44 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005f42:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	22ff      	movs	r2, #255	; 0xff
 8005f48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005f4c:	f001 fc62 	bl	8007814 <vPortExitCritical>
}
 8005f50:	bf00      	nop
 8005f52:	3710      	adds	r7, #16
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f60:	f001 fc28 	bl	80077b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d102      	bne.n	8005f72 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	60fb      	str	r3, [r7, #12]
 8005f70:	e001      	b.n	8005f76 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005f72:	2300      	movs	r3, #0
 8005f74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f76:	f001 fc4d 	bl	8007814 <vPortExitCritical>

	return xReturn;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f8c:	f001 fc12 	bl	80077b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d102      	bne.n	8005fa2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	60fb      	str	r3, [r7, #12]
 8005fa0:	e001      	b.n	8005fa6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005fa6:	f001 fc35 	bl	8007814 <vPortExitCritical>

	return xReturn;
 8005faa:	68fb      	ldr	r3, [r7, #12]
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	60fb      	str	r3, [r7, #12]
 8005fc2:	e014      	b.n	8005fee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005fc4:	4a0f      	ldr	r2, [pc, #60]	; (8006004 <vQueueAddToRegistry+0x50>)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d10b      	bne.n	8005fe8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005fd0:	490c      	ldr	r1, [pc, #48]	; (8006004 <vQueueAddToRegistry+0x50>)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	683a      	ldr	r2, [r7, #0]
 8005fd6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005fda:	4a0a      	ldr	r2, [pc, #40]	; (8006004 <vQueueAddToRegistry+0x50>)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	00db      	lsls	r3, r3, #3
 8005fe0:	4413      	add	r3, r2
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005fe6:	e006      	b.n	8005ff6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	3301      	adds	r3, #1
 8005fec:	60fb      	str	r3, [r7, #12]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2b07      	cmp	r3, #7
 8005ff2:	d9e7      	bls.n	8005fc4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005ff4:	bf00      	nop
 8005ff6:	bf00      	nop
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	20000b28 	.word	0x20000b28

08006008 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006018:	f001 fbcc 	bl	80077b4 <vPortEnterCritical>
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006022:	b25b      	sxtb	r3, r3
 8006024:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006028:	d103      	bne.n	8006032 <vQueueWaitForMessageRestricted+0x2a>
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006038:	b25b      	sxtb	r3, r3
 800603a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800603e:	d103      	bne.n	8006048 <vQueueWaitForMessageRestricted+0x40>
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	2200      	movs	r2, #0
 8006044:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006048:	f001 fbe4 	bl	8007814 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006050:	2b00      	cmp	r3, #0
 8006052:	d106      	bne.n	8006062 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	3324      	adds	r3, #36	; 0x24
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	68b9      	ldr	r1, [r7, #8]
 800605c:	4618      	mov	r0, r3
 800605e:	f000 fc61 	bl	8006924 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006062:	6978      	ldr	r0, [r7, #20]
 8006064:	f7ff ff26 	bl	8005eb4 <prvUnlockQueue>
	}
 8006068:	bf00      	nop
 800606a:	3718      	adds	r7, #24
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006070:	b580      	push	{r7, lr}
 8006072:	b08e      	sub	sp, #56	; 0x38
 8006074:	af04      	add	r7, sp, #16
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
 800607c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800607e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006080:	2b00      	cmp	r3, #0
 8006082:	d10a      	bne.n	800609a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006088:	f383 8811 	msr	BASEPRI, r3
 800608c:	f3bf 8f6f 	isb	sy
 8006090:	f3bf 8f4f 	dsb	sy
 8006094:	623b      	str	r3, [r7, #32]
}
 8006096:	bf00      	nop
 8006098:	e7fe      	b.n	8006098 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800609a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609c:	2b00      	cmp	r3, #0
 800609e:	d10a      	bne.n	80060b6 <xTaskCreateStatic+0x46>
	__asm volatile
 80060a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a4:	f383 8811 	msr	BASEPRI, r3
 80060a8:	f3bf 8f6f 	isb	sy
 80060ac:	f3bf 8f4f 	dsb	sy
 80060b0:	61fb      	str	r3, [r7, #28]
}
 80060b2:	bf00      	nop
 80060b4:	e7fe      	b.n	80060b4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80060b6:	23bc      	movs	r3, #188	; 0xbc
 80060b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	2bbc      	cmp	r3, #188	; 0xbc
 80060be:	d00a      	beq.n	80060d6 <xTaskCreateStatic+0x66>
	__asm volatile
 80060c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c4:	f383 8811 	msr	BASEPRI, r3
 80060c8:	f3bf 8f6f 	isb	sy
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	61bb      	str	r3, [r7, #24]
}
 80060d2:	bf00      	nop
 80060d4:	e7fe      	b.n	80060d4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80060d6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80060d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d01e      	beq.n	800611c <xTaskCreateStatic+0xac>
 80060de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d01b      	beq.n	800611c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80060e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060ec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80060ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f0:	2202      	movs	r2, #2
 80060f2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80060f6:	2300      	movs	r3, #0
 80060f8:	9303      	str	r3, [sp, #12]
 80060fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fc:	9302      	str	r3, [sp, #8]
 80060fe:	f107 0314 	add.w	r3, r7, #20
 8006102:	9301      	str	r3, [sp, #4]
 8006104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006106:	9300      	str	r3, [sp, #0]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	68b9      	ldr	r1, [r7, #8]
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f000 f850 	bl	80061b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006114:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006116:	f000 f8f3 	bl	8006300 <prvAddNewTaskToReadyList>
 800611a:	e001      	b.n	8006120 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800611c:	2300      	movs	r3, #0
 800611e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006120:	697b      	ldr	r3, [r7, #20]
	}
 8006122:	4618      	mov	r0, r3
 8006124:	3728      	adds	r7, #40	; 0x28
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800612a:	b580      	push	{r7, lr}
 800612c:	b08c      	sub	sp, #48	; 0x30
 800612e:	af04      	add	r7, sp, #16
 8006130:	60f8      	str	r0, [r7, #12]
 8006132:	60b9      	str	r1, [r7, #8]
 8006134:	603b      	str	r3, [r7, #0]
 8006136:	4613      	mov	r3, r2
 8006138:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800613a:	88fb      	ldrh	r3, [r7, #6]
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	4618      	mov	r0, r3
 8006140:	f001 fc5a 	bl	80079f8 <pvPortMalloc>
 8006144:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00e      	beq.n	800616a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800614c:	20bc      	movs	r0, #188	; 0xbc
 800614e:	f001 fc53 	bl	80079f8 <pvPortMalloc>
 8006152:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d003      	beq.n	8006162 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	697a      	ldr	r2, [r7, #20]
 800615e:	631a      	str	r2, [r3, #48]	; 0x30
 8006160:	e005      	b.n	800616e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006162:	6978      	ldr	r0, [r7, #20]
 8006164:	f001 fd14 	bl	8007b90 <vPortFree>
 8006168:	e001      	b.n	800616e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800616a:	2300      	movs	r3, #0
 800616c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d017      	beq.n	80061a4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800617c:	88fa      	ldrh	r2, [r7, #6]
 800617e:	2300      	movs	r3, #0
 8006180:	9303      	str	r3, [sp, #12]
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	9302      	str	r3, [sp, #8]
 8006186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006188:	9301      	str	r3, [sp, #4]
 800618a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618c:	9300      	str	r3, [sp, #0]
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	68b9      	ldr	r1, [r7, #8]
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f000 f80e 	bl	80061b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006198:	69f8      	ldr	r0, [r7, #28]
 800619a:	f000 f8b1 	bl	8006300 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800619e:	2301      	movs	r3, #1
 80061a0:	61bb      	str	r3, [r7, #24]
 80061a2:	e002      	b.n	80061aa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80061a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80061aa:	69bb      	ldr	r3, [r7, #24]
	}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3720      	adds	r7, #32
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b088      	sub	sp, #32
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]
 80061c0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80061c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	461a      	mov	r2, r3
 80061cc:	21a5      	movs	r1, #165	; 0xa5
 80061ce:	f001 fe31 	bl	8007e34 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80061d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80061dc:	3b01      	subs	r3, #1
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	4413      	add	r3, r2
 80061e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	f023 0307 	bic.w	r3, r3, #7
 80061ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	f003 0307 	and.w	r3, r3, #7
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00a      	beq.n	800620c <prvInitialiseNewTask+0x58>
	__asm volatile
 80061f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fa:	f383 8811 	msr	BASEPRI, r3
 80061fe:	f3bf 8f6f 	isb	sy
 8006202:	f3bf 8f4f 	dsb	sy
 8006206:	617b      	str	r3, [r7, #20]
}
 8006208:	bf00      	nop
 800620a:	e7fe      	b.n	800620a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d01f      	beq.n	8006252 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006212:	2300      	movs	r3, #0
 8006214:	61fb      	str	r3, [r7, #28]
 8006216:	e012      	b.n	800623e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	4413      	add	r3, r2
 800621e:	7819      	ldrb	r1, [r3, #0]
 8006220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	4413      	add	r3, r2
 8006226:	3334      	adds	r3, #52	; 0x34
 8006228:	460a      	mov	r2, r1
 800622a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800622c:	68ba      	ldr	r2, [r7, #8]
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	4413      	add	r3, r2
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d006      	beq.n	8006246 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	3301      	adds	r3, #1
 800623c:	61fb      	str	r3, [r7, #28]
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	2b0f      	cmp	r3, #15
 8006242:	d9e9      	bls.n	8006218 <prvInitialiseNewTask+0x64>
 8006244:	e000      	b.n	8006248 <prvInitialiseNewTask+0x94>
			{
				break;
 8006246:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624a:	2200      	movs	r2, #0
 800624c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006250:	e003      	b.n	800625a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006254:	2200      	movs	r2, #0
 8006256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800625a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625c:	2b37      	cmp	r3, #55	; 0x37
 800625e:	d901      	bls.n	8006264 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006260:	2337      	movs	r3, #55	; 0x37
 8006262:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006266:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006268:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800626a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800626e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006272:	2200      	movs	r2, #0
 8006274:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006278:	3304      	adds	r3, #4
 800627a:	4618      	mov	r0, r3
 800627c:	f7ff f978 	bl	8005570 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006282:	3318      	adds	r3, #24
 8006284:	4618      	mov	r0, r3
 8006286:	f7ff f973 	bl	8005570 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800628a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800628e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006292:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006298:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800629a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800629e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80062a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a2:	2200      	movs	r2, #0
 80062a4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80062a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80062b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b2:	3354      	adds	r3, #84	; 0x54
 80062b4:	2260      	movs	r2, #96	; 0x60
 80062b6:	2100      	movs	r1, #0
 80062b8:	4618      	mov	r0, r3
 80062ba:	f001 fdbb 	bl	8007e34 <memset>
 80062be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c0:	4a0c      	ldr	r2, [pc, #48]	; (80062f4 <prvInitialiseNewTask+0x140>)
 80062c2:	659a      	str	r2, [r3, #88]	; 0x58
 80062c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c6:	4a0c      	ldr	r2, [pc, #48]	; (80062f8 <prvInitialiseNewTask+0x144>)
 80062c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80062ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062cc:	4a0b      	ldr	r2, [pc, #44]	; (80062fc <prvInitialiseNewTask+0x148>)
 80062ce:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80062d0:	683a      	ldr	r2, [r7, #0]
 80062d2:	68f9      	ldr	r1, [r7, #12]
 80062d4:	69b8      	ldr	r0, [r7, #24]
 80062d6:	f001 f943 	bl	8007560 <pxPortInitialiseStack>
 80062da:	4602      	mov	r2, r0
 80062dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062de:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80062e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d002      	beq.n	80062ec <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80062e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062ec:	bf00      	nop
 80062ee:	3720      	adds	r7, #32
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	080080bc 	.word	0x080080bc
 80062f8:	080080dc 	.word	0x080080dc
 80062fc:	0800809c 	.word	0x0800809c

08006300 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006308:	f001 fa54 	bl	80077b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800630c:	4b2d      	ldr	r3, [pc, #180]	; (80063c4 <prvAddNewTaskToReadyList+0xc4>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	3301      	adds	r3, #1
 8006312:	4a2c      	ldr	r2, [pc, #176]	; (80063c4 <prvAddNewTaskToReadyList+0xc4>)
 8006314:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006316:	4b2c      	ldr	r3, [pc, #176]	; (80063c8 <prvAddNewTaskToReadyList+0xc8>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d109      	bne.n	8006332 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800631e:	4a2a      	ldr	r2, [pc, #168]	; (80063c8 <prvAddNewTaskToReadyList+0xc8>)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006324:	4b27      	ldr	r3, [pc, #156]	; (80063c4 <prvAddNewTaskToReadyList+0xc4>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2b01      	cmp	r3, #1
 800632a:	d110      	bne.n	800634e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800632c:	f000 fc28 	bl	8006b80 <prvInitialiseTaskLists>
 8006330:	e00d      	b.n	800634e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006332:	4b26      	ldr	r3, [pc, #152]	; (80063cc <prvAddNewTaskToReadyList+0xcc>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d109      	bne.n	800634e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800633a:	4b23      	ldr	r3, [pc, #140]	; (80063c8 <prvAddNewTaskToReadyList+0xc8>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006344:	429a      	cmp	r2, r3
 8006346:	d802      	bhi.n	800634e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006348:	4a1f      	ldr	r2, [pc, #124]	; (80063c8 <prvAddNewTaskToReadyList+0xc8>)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800634e:	4b20      	ldr	r3, [pc, #128]	; (80063d0 <prvAddNewTaskToReadyList+0xd0>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	3301      	adds	r3, #1
 8006354:	4a1e      	ldr	r2, [pc, #120]	; (80063d0 <prvAddNewTaskToReadyList+0xd0>)
 8006356:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006358:	4b1d      	ldr	r3, [pc, #116]	; (80063d0 <prvAddNewTaskToReadyList+0xd0>)
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006364:	4b1b      	ldr	r3, [pc, #108]	; (80063d4 <prvAddNewTaskToReadyList+0xd4>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	429a      	cmp	r2, r3
 800636a:	d903      	bls.n	8006374 <prvAddNewTaskToReadyList+0x74>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006370:	4a18      	ldr	r2, [pc, #96]	; (80063d4 <prvAddNewTaskToReadyList+0xd4>)
 8006372:	6013      	str	r3, [r2, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006378:	4613      	mov	r3, r2
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	4413      	add	r3, r2
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	4a15      	ldr	r2, [pc, #84]	; (80063d8 <prvAddNewTaskToReadyList+0xd8>)
 8006382:	441a      	add	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	3304      	adds	r3, #4
 8006388:	4619      	mov	r1, r3
 800638a:	4610      	mov	r0, r2
 800638c:	f7ff f8fd 	bl	800558a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006390:	f001 fa40 	bl	8007814 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006394:	4b0d      	ldr	r3, [pc, #52]	; (80063cc <prvAddNewTaskToReadyList+0xcc>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d00e      	beq.n	80063ba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800639c:	4b0a      	ldr	r3, [pc, #40]	; (80063c8 <prvAddNewTaskToReadyList+0xc8>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d207      	bcs.n	80063ba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80063aa:	4b0c      	ldr	r3, [pc, #48]	; (80063dc <prvAddNewTaskToReadyList+0xdc>)
 80063ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063b0:	601a      	str	r2, [r3, #0]
 80063b2:	f3bf 8f4f 	dsb	sy
 80063b6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063ba:	bf00      	nop
 80063bc:	3708      	adds	r7, #8
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	2000103c 	.word	0x2000103c
 80063c8:	20000b68 	.word	0x20000b68
 80063cc:	20001048 	.word	0x20001048
 80063d0:	20001058 	.word	0x20001058
 80063d4:	20001044 	.word	0x20001044
 80063d8:	20000b6c 	.word	0x20000b6c
 80063dc:	e000ed04 	.word	0xe000ed04

080063e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80063e8:	2300      	movs	r3, #0
 80063ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d017      	beq.n	8006422 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80063f2:	4b13      	ldr	r3, [pc, #76]	; (8006440 <vTaskDelay+0x60>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00a      	beq.n	8006410 <vTaskDelay+0x30>
	__asm volatile
 80063fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fe:	f383 8811 	msr	BASEPRI, r3
 8006402:	f3bf 8f6f 	isb	sy
 8006406:	f3bf 8f4f 	dsb	sy
 800640a:	60bb      	str	r3, [r7, #8]
}
 800640c:	bf00      	nop
 800640e:	e7fe      	b.n	800640e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006410:	f000 f88a 	bl	8006528 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006414:	2100      	movs	r1, #0
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 fd00 	bl	8006e1c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800641c:	f000 f892 	bl	8006544 <xTaskResumeAll>
 8006420:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d107      	bne.n	8006438 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006428:	4b06      	ldr	r3, [pc, #24]	; (8006444 <vTaskDelay+0x64>)
 800642a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800642e:	601a      	str	r2, [r3, #0]
 8006430:	f3bf 8f4f 	dsb	sy
 8006434:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006438:	bf00      	nop
 800643a:	3710      	adds	r7, #16
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	20001064 	.word	0x20001064
 8006444:	e000ed04 	.word	0xe000ed04

08006448 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b08a      	sub	sp, #40	; 0x28
 800644c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800644e:	2300      	movs	r3, #0
 8006450:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006452:	2300      	movs	r3, #0
 8006454:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006456:	463a      	mov	r2, r7
 8006458:	1d39      	adds	r1, r7, #4
 800645a:	f107 0308 	add.w	r3, r7, #8
 800645e:	4618      	mov	r0, r3
 8006460:	f7ff f832 	bl	80054c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006464:	6839      	ldr	r1, [r7, #0]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	68ba      	ldr	r2, [r7, #8]
 800646a:	9202      	str	r2, [sp, #8]
 800646c:	9301      	str	r3, [sp, #4]
 800646e:	2300      	movs	r3, #0
 8006470:	9300      	str	r3, [sp, #0]
 8006472:	2300      	movs	r3, #0
 8006474:	460a      	mov	r2, r1
 8006476:	4924      	ldr	r1, [pc, #144]	; (8006508 <vTaskStartScheduler+0xc0>)
 8006478:	4824      	ldr	r0, [pc, #144]	; (800650c <vTaskStartScheduler+0xc4>)
 800647a:	f7ff fdf9 	bl	8006070 <xTaskCreateStatic>
 800647e:	4603      	mov	r3, r0
 8006480:	4a23      	ldr	r2, [pc, #140]	; (8006510 <vTaskStartScheduler+0xc8>)
 8006482:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006484:	4b22      	ldr	r3, [pc, #136]	; (8006510 <vTaskStartScheduler+0xc8>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d002      	beq.n	8006492 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800648c:	2301      	movs	r3, #1
 800648e:	617b      	str	r3, [r7, #20]
 8006490:	e001      	b.n	8006496 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006492:	2300      	movs	r3, #0
 8006494:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d102      	bne.n	80064a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800649c:	f000 fd12 	bl	8006ec4 <xTimerCreateTimerTask>
 80064a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d11b      	bne.n	80064e0 <vTaskStartScheduler+0x98>
	__asm volatile
 80064a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ac:	f383 8811 	msr	BASEPRI, r3
 80064b0:	f3bf 8f6f 	isb	sy
 80064b4:	f3bf 8f4f 	dsb	sy
 80064b8:	613b      	str	r3, [r7, #16]
}
 80064ba:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80064bc:	4b15      	ldr	r3, [pc, #84]	; (8006514 <vTaskStartScheduler+0xcc>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	3354      	adds	r3, #84	; 0x54
 80064c2:	4a15      	ldr	r2, [pc, #84]	; (8006518 <vTaskStartScheduler+0xd0>)
 80064c4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80064c6:	4b15      	ldr	r3, [pc, #84]	; (800651c <vTaskStartScheduler+0xd4>)
 80064c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80064ce:	4b14      	ldr	r3, [pc, #80]	; (8006520 <vTaskStartScheduler+0xd8>)
 80064d0:	2201      	movs	r2, #1
 80064d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80064d4:	4b13      	ldr	r3, [pc, #76]	; (8006524 <vTaskStartScheduler+0xdc>)
 80064d6:	2200      	movs	r2, #0
 80064d8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80064da:	f001 f8c9 	bl	8007670 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80064de:	e00e      	b.n	80064fe <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064e6:	d10a      	bne.n	80064fe <vTaskStartScheduler+0xb6>
	__asm volatile
 80064e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ec:	f383 8811 	msr	BASEPRI, r3
 80064f0:	f3bf 8f6f 	isb	sy
 80064f4:	f3bf 8f4f 	dsb	sy
 80064f8:	60fb      	str	r3, [r7, #12]
}
 80064fa:	bf00      	nop
 80064fc:	e7fe      	b.n	80064fc <vTaskStartScheduler+0xb4>
}
 80064fe:	bf00      	nop
 8006500:	3718      	adds	r7, #24
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	08007ff4 	.word	0x08007ff4
 800650c:	08006b4d 	.word	0x08006b4d
 8006510:	20001060 	.word	0x20001060
 8006514:	20000b68 	.word	0x20000b68
 8006518:	20000010 	.word	0x20000010
 800651c:	2000105c 	.word	0x2000105c
 8006520:	20001048 	.word	0x20001048
 8006524:	20001040 	.word	0x20001040

08006528 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006528:	b480      	push	{r7}
 800652a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800652c:	4b04      	ldr	r3, [pc, #16]	; (8006540 <vTaskSuspendAll+0x18>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	3301      	adds	r3, #1
 8006532:	4a03      	ldr	r2, [pc, #12]	; (8006540 <vTaskSuspendAll+0x18>)
 8006534:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006536:	bf00      	nop
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr
 8006540:	20001064 	.word	0x20001064

08006544 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800654a:	2300      	movs	r3, #0
 800654c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800654e:	2300      	movs	r3, #0
 8006550:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006552:	4b42      	ldr	r3, [pc, #264]	; (800665c <xTaskResumeAll+0x118>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d10a      	bne.n	8006570 <xTaskResumeAll+0x2c>
	__asm volatile
 800655a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655e:	f383 8811 	msr	BASEPRI, r3
 8006562:	f3bf 8f6f 	isb	sy
 8006566:	f3bf 8f4f 	dsb	sy
 800656a:	603b      	str	r3, [r7, #0]
}
 800656c:	bf00      	nop
 800656e:	e7fe      	b.n	800656e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006570:	f001 f920 	bl	80077b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006574:	4b39      	ldr	r3, [pc, #228]	; (800665c <xTaskResumeAll+0x118>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	3b01      	subs	r3, #1
 800657a:	4a38      	ldr	r2, [pc, #224]	; (800665c <xTaskResumeAll+0x118>)
 800657c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800657e:	4b37      	ldr	r3, [pc, #220]	; (800665c <xTaskResumeAll+0x118>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d162      	bne.n	800664c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006586:	4b36      	ldr	r3, [pc, #216]	; (8006660 <xTaskResumeAll+0x11c>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d05e      	beq.n	800664c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800658e:	e02f      	b.n	80065f0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006590:	4b34      	ldr	r3, [pc, #208]	; (8006664 <xTaskResumeAll+0x120>)
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	3318      	adds	r3, #24
 800659c:	4618      	mov	r0, r3
 800659e:	f7ff f851 	bl	8005644 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	3304      	adds	r3, #4
 80065a6:	4618      	mov	r0, r3
 80065a8:	f7ff f84c 	bl	8005644 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065b0:	4b2d      	ldr	r3, [pc, #180]	; (8006668 <xTaskResumeAll+0x124>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d903      	bls.n	80065c0 <xTaskResumeAll+0x7c>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065bc:	4a2a      	ldr	r2, [pc, #168]	; (8006668 <xTaskResumeAll+0x124>)
 80065be:	6013      	str	r3, [r2, #0]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065c4:	4613      	mov	r3, r2
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	4413      	add	r3, r2
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	4a27      	ldr	r2, [pc, #156]	; (800666c <xTaskResumeAll+0x128>)
 80065ce:	441a      	add	r2, r3
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	3304      	adds	r3, #4
 80065d4:	4619      	mov	r1, r3
 80065d6:	4610      	mov	r0, r2
 80065d8:	f7fe ffd7 	bl	800558a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065e0:	4b23      	ldr	r3, [pc, #140]	; (8006670 <xTaskResumeAll+0x12c>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d302      	bcc.n	80065f0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80065ea:	4b22      	ldr	r3, [pc, #136]	; (8006674 <xTaskResumeAll+0x130>)
 80065ec:	2201      	movs	r2, #1
 80065ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065f0:	4b1c      	ldr	r3, [pc, #112]	; (8006664 <xTaskResumeAll+0x120>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d1cb      	bne.n	8006590 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d001      	beq.n	8006602 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80065fe:	f000 fb61 	bl	8006cc4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006602:	4b1d      	ldr	r3, [pc, #116]	; (8006678 <xTaskResumeAll+0x134>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d010      	beq.n	8006630 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800660e:	f000 f847 	bl	80066a0 <xTaskIncrementTick>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d002      	beq.n	800661e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006618:	4b16      	ldr	r3, [pc, #88]	; (8006674 <xTaskResumeAll+0x130>)
 800661a:	2201      	movs	r2, #1
 800661c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	3b01      	subs	r3, #1
 8006622:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1f1      	bne.n	800660e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800662a:	4b13      	ldr	r3, [pc, #76]	; (8006678 <xTaskResumeAll+0x134>)
 800662c:	2200      	movs	r2, #0
 800662e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006630:	4b10      	ldr	r3, [pc, #64]	; (8006674 <xTaskResumeAll+0x130>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d009      	beq.n	800664c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006638:	2301      	movs	r3, #1
 800663a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800663c:	4b0f      	ldr	r3, [pc, #60]	; (800667c <xTaskResumeAll+0x138>)
 800663e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006642:	601a      	str	r2, [r3, #0]
 8006644:	f3bf 8f4f 	dsb	sy
 8006648:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800664c:	f001 f8e2 	bl	8007814 <vPortExitCritical>

	return xAlreadyYielded;
 8006650:	68bb      	ldr	r3, [r7, #8]
}
 8006652:	4618      	mov	r0, r3
 8006654:	3710      	adds	r7, #16
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	20001064 	.word	0x20001064
 8006660:	2000103c 	.word	0x2000103c
 8006664:	20000ffc 	.word	0x20000ffc
 8006668:	20001044 	.word	0x20001044
 800666c:	20000b6c 	.word	0x20000b6c
 8006670:	20000b68 	.word	0x20000b68
 8006674:	20001050 	.word	0x20001050
 8006678:	2000104c 	.word	0x2000104c
 800667c:	e000ed04 	.word	0xe000ed04

08006680 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006686:	4b05      	ldr	r3, [pc, #20]	; (800669c <xTaskGetTickCount+0x1c>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800668c:	687b      	ldr	r3, [r7, #4]
}
 800668e:	4618      	mov	r0, r3
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	20001040 	.word	0x20001040

080066a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b086      	sub	sp, #24
 80066a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80066a6:	2300      	movs	r3, #0
 80066a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066aa:	4b4f      	ldr	r3, [pc, #316]	; (80067e8 <xTaskIncrementTick+0x148>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f040 808f 	bne.w	80067d2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80066b4:	4b4d      	ldr	r3, [pc, #308]	; (80067ec <xTaskIncrementTick+0x14c>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	3301      	adds	r3, #1
 80066ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80066bc:	4a4b      	ldr	r2, [pc, #300]	; (80067ec <xTaskIncrementTick+0x14c>)
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d120      	bne.n	800670a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80066c8:	4b49      	ldr	r3, [pc, #292]	; (80067f0 <xTaskIncrementTick+0x150>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00a      	beq.n	80066e8 <xTaskIncrementTick+0x48>
	__asm volatile
 80066d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d6:	f383 8811 	msr	BASEPRI, r3
 80066da:	f3bf 8f6f 	isb	sy
 80066de:	f3bf 8f4f 	dsb	sy
 80066e2:	603b      	str	r3, [r7, #0]
}
 80066e4:	bf00      	nop
 80066e6:	e7fe      	b.n	80066e6 <xTaskIncrementTick+0x46>
 80066e8:	4b41      	ldr	r3, [pc, #260]	; (80067f0 <xTaskIncrementTick+0x150>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	60fb      	str	r3, [r7, #12]
 80066ee:	4b41      	ldr	r3, [pc, #260]	; (80067f4 <xTaskIncrementTick+0x154>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a3f      	ldr	r2, [pc, #252]	; (80067f0 <xTaskIncrementTick+0x150>)
 80066f4:	6013      	str	r3, [r2, #0]
 80066f6:	4a3f      	ldr	r2, [pc, #252]	; (80067f4 <xTaskIncrementTick+0x154>)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6013      	str	r3, [r2, #0]
 80066fc:	4b3e      	ldr	r3, [pc, #248]	; (80067f8 <xTaskIncrementTick+0x158>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	3301      	adds	r3, #1
 8006702:	4a3d      	ldr	r2, [pc, #244]	; (80067f8 <xTaskIncrementTick+0x158>)
 8006704:	6013      	str	r3, [r2, #0]
 8006706:	f000 fadd 	bl	8006cc4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800670a:	4b3c      	ldr	r3, [pc, #240]	; (80067fc <xTaskIncrementTick+0x15c>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	693a      	ldr	r2, [r7, #16]
 8006710:	429a      	cmp	r2, r3
 8006712:	d349      	bcc.n	80067a8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006714:	4b36      	ldr	r3, [pc, #216]	; (80067f0 <xTaskIncrementTick+0x150>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d104      	bne.n	8006728 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800671e:	4b37      	ldr	r3, [pc, #220]	; (80067fc <xTaskIncrementTick+0x15c>)
 8006720:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006724:	601a      	str	r2, [r3, #0]
					break;
 8006726:	e03f      	b.n	80067a8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006728:	4b31      	ldr	r3, [pc, #196]	; (80067f0 <xTaskIncrementTick+0x150>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006738:	693a      	ldr	r2, [r7, #16]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	429a      	cmp	r2, r3
 800673e:	d203      	bcs.n	8006748 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006740:	4a2e      	ldr	r2, [pc, #184]	; (80067fc <xTaskIncrementTick+0x15c>)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006746:	e02f      	b.n	80067a8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	3304      	adds	r3, #4
 800674c:	4618      	mov	r0, r3
 800674e:	f7fe ff79 	bl	8005644 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006756:	2b00      	cmp	r3, #0
 8006758:	d004      	beq.n	8006764 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	3318      	adds	r3, #24
 800675e:	4618      	mov	r0, r3
 8006760:	f7fe ff70 	bl	8005644 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006768:	4b25      	ldr	r3, [pc, #148]	; (8006800 <xTaskIncrementTick+0x160>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	429a      	cmp	r2, r3
 800676e:	d903      	bls.n	8006778 <xTaskIncrementTick+0xd8>
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006774:	4a22      	ldr	r2, [pc, #136]	; (8006800 <xTaskIncrementTick+0x160>)
 8006776:	6013      	str	r3, [r2, #0]
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800677c:	4613      	mov	r3, r2
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	4413      	add	r3, r2
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	4a1f      	ldr	r2, [pc, #124]	; (8006804 <xTaskIncrementTick+0x164>)
 8006786:	441a      	add	r2, r3
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	3304      	adds	r3, #4
 800678c:	4619      	mov	r1, r3
 800678e:	4610      	mov	r0, r2
 8006790:	f7fe fefb 	bl	800558a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006798:	4b1b      	ldr	r3, [pc, #108]	; (8006808 <xTaskIncrementTick+0x168>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679e:	429a      	cmp	r2, r3
 80067a0:	d3b8      	bcc.n	8006714 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80067a2:	2301      	movs	r3, #1
 80067a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067a6:	e7b5      	b.n	8006714 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80067a8:	4b17      	ldr	r3, [pc, #92]	; (8006808 <xTaskIncrementTick+0x168>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ae:	4915      	ldr	r1, [pc, #84]	; (8006804 <xTaskIncrementTick+0x164>)
 80067b0:	4613      	mov	r3, r2
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	4413      	add	r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	440b      	add	r3, r1
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d901      	bls.n	80067c4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80067c0:	2301      	movs	r3, #1
 80067c2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80067c4:	4b11      	ldr	r3, [pc, #68]	; (800680c <xTaskIncrementTick+0x16c>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d007      	beq.n	80067dc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80067cc:	2301      	movs	r3, #1
 80067ce:	617b      	str	r3, [r7, #20]
 80067d0:	e004      	b.n	80067dc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80067d2:	4b0f      	ldr	r3, [pc, #60]	; (8006810 <xTaskIncrementTick+0x170>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	3301      	adds	r3, #1
 80067d8:	4a0d      	ldr	r2, [pc, #52]	; (8006810 <xTaskIncrementTick+0x170>)
 80067da:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80067dc:	697b      	ldr	r3, [r7, #20]
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3718      	adds	r7, #24
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	20001064 	.word	0x20001064
 80067ec:	20001040 	.word	0x20001040
 80067f0:	20000ff4 	.word	0x20000ff4
 80067f4:	20000ff8 	.word	0x20000ff8
 80067f8:	20001054 	.word	0x20001054
 80067fc:	2000105c 	.word	0x2000105c
 8006800:	20001044 	.word	0x20001044
 8006804:	20000b6c 	.word	0x20000b6c
 8006808:	20000b68 	.word	0x20000b68
 800680c:	20001050 	.word	0x20001050
 8006810:	2000104c 	.word	0x2000104c

08006814 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006814:	b480      	push	{r7}
 8006816:	b085      	sub	sp, #20
 8006818:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800681a:	4b2a      	ldr	r3, [pc, #168]	; (80068c4 <vTaskSwitchContext+0xb0>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d003      	beq.n	800682a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006822:	4b29      	ldr	r3, [pc, #164]	; (80068c8 <vTaskSwitchContext+0xb4>)
 8006824:	2201      	movs	r2, #1
 8006826:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006828:	e046      	b.n	80068b8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800682a:	4b27      	ldr	r3, [pc, #156]	; (80068c8 <vTaskSwitchContext+0xb4>)
 800682c:	2200      	movs	r2, #0
 800682e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006830:	4b26      	ldr	r3, [pc, #152]	; (80068cc <vTaskSwitchContext+0xb8>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	60fb      	str	r3, [r7, #12]
 8006836:	e010      	b.n	800685a <vTaskSwitchContext+0x46>
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d10a      	bne.n	8006854 <vTaskSwitchContext+0x40>
	__asm volatile
 800683e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006842:	f383 8811 	msr	BASEPRI, r3
 8006846:	f3bf 8f6f 	isb	sy
 800684a:	f3bf 8f4f 	dsb	sy
 800684e:	607b      	str	r3, [r7, #4]
}
 8006850:	bf00      	nop
 8006852:	e7fe      	b.n	8006852 <vTaskSwitchContext+0x3e>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	3b01      	subs	r3, #1
 8006858:	60fb      	str	r3, [r7, #12]
 800685a:	491d      	ldr	r1, [pc, #116]	; (80068d0 <vTaskSwitchContext+0xbc>)
 800685c:	68fa      	ldr	r2, [r7, #12]
 800685e:	4613      	mov	r3, r2
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	4413      	add	r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	440b      	add	r3, r1
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d0e4      	beq.n	8006838 <vTaskSwitchContext+0x24>
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	4613      	mov	r3, r2
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	4413      	add	r3, r2
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	4a15      	ldr	r2, [pc, #84]	; (80068d0 <vTaskSwitchContext+0xbc>)
 800687a:	4413      	add	r3, r2
 800687c:	60bb      	str	r3, [r7, #8]
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	685a      	ldr	r2, [r3, #4]
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	605a      	str	r2, [r3, #4]
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	685a      	ldr	r2, [r3, #4]
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	3308      	adds	r3, #8
 8006890:	429a      	cmp	r2, r3
 8006892:	d104      	bne.n	800689e <vTaskSwitchContext+0x8a>
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	685a      	ldr	r2, [r3, #4]
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	605a      	str	r2, [r3, #4]
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	4a0b      	ldr	r2, [pc, #44]	; (80068d4 <vTaskSwitchContext+0xc0>)
 80068a6:	6013      	str	r3, [r2, #0]
 80068a8:	4a08      	ldr	r2, [pc, #32]	; (80068cc <vTaskSwitchContext+0xb8>)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80068ae:	4b09      	ldr	r3, [pc, #36]	; (80068d4 <vTaskSwitchContext+0xc0>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	3354      	adds	r3, #84	; 0x54
 80068b4:	4a08      	ldr	r2, [pc, #32]	; (80068d8 <vTaskSwitchContext+0xc4>)
 80068b6:	6013      	str	r3, [r2, #0]
}
 80068b8:	bf00      	nop
 80068ba:	3714      	adds	r7, #20
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr
 80068c4:	20001064 	.word	0x20001064
 80068c8:	20001050 	.word	0x20001050
 80068cc:	20001044 	.word	0x20001044
 80068d0:	20000b6c 	.word	0x20000b6c
 80068d4:	20000b68 	.word	0x20000b68
 80068d8:	20000010 	.word	0x20000010

080068dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d10a      	bne.n	8006902 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80068ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f0:	f383 8811 	msr	BASEPRI, r3
 80068f4:	f3bf 8f6f 	isb	sy
 80068f8:	f3bf 8f4f 	dsb	sy
 80068fc:	60fb      	str	r3, [r7, #12]
}
 80068fe:	bf00      	nop
 8006900:	e7fe      	b.n	8006900 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006902:	4b07      	ldr	r3, [pc, #28]	; (8006920 <vTaskPlaceOnEventList+0x44>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	3318      	adds	r3, #24
 8006908:	4619      	mov	r1, r3
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f7fe fe61 	bl	80055d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006910:	2101      	movs	r1, #1
 8006912:	6838      	ldr	r0, [r7, #0]
 8006914:	f000 fa82 	bl	8006e1c <prvAddCurrentTaskToDelayedList>
}
 8006918:	bf00      	nop
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}
 8006920:	20000b68 	.word	0x20000b68

08006924 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006924:	b580      	push	{r7, lr}
 8006926:	b086      	sub	sp, #24
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d10a      	bne.n	800694c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693a:	f383 8811 	msr	BASEPRI, r3
 800693e:	f3bf 8f6f 	isb	sy
 8006942:	f3bf 8f4f 	dsb	sy
 8006946:	617b      	str	r3, [r7, #20]
}
 8006948:	bf00      	nop
 800694a:	e7fe      	b.n	800694a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800694c:	4b0a      	ldr	r3, [pc, #40]	; (8006978 <vTaskPlaceOnEventListRestricted+0x54>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	3318      	adds	r3, #24
 8006952:	4619      	mov	r1, r3
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	f7fe fe18 	bl	800558a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d002      	beq.n	8006966 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006960:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006964:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006966:	6879      	ldr	r1, [r7, #4]
 8006968:	68b8      	ldr	r0, [r7, #8]
 800696a:	f000 fa57 	bl	8006e1c <prvAddCurrentTaskToDelayedList>
	}
 800696e:	bf00      	nop
 8006970:	3718      	adds	r7, #24
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	20000b68 	.word	0x20000b68

0800697c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b086      	sub	sp, #24
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d10a      	bne.n	80069a8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006996:	f383 8811 	msr	BASEPRI, r3
 800699a:	f3bf 8f6f 	isb	sy
 800699e:	f3bf 8f4f 	dsb	sy
 80069a2:	60fb      	str	r3, [r7, #12]
}
 80069a4:	bf00      	nop
 80069a6:	e7fe      	b.n	80069a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	3318      	adds	r3, #24
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7fe fe49 	bl	8005644 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069b2:	4b1e      	ldr	r3, [pc, #120]	; (8006a2c <xTaskRemoveFromEventList+0xb0>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d11d      	bne.n	80069f6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	3304      	adds	r3, #4
 80069be:	4618      	mov	r0, r3
 80069c0:	f7fe fe40 	bl	8005644 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c8:	4b19      	ldr	r3, [pc, #100]	; (8006a30 <xTaskRemoveFromEventList+0xb4>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d903      	bls.n	80069d8 <xTaskRemoveFromEventList+0x5c>
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d4:	4a16      	ldr	r2, [pc, #88]	; (8006a30 <xTaskRemoveFromEventList+0xb4>)
 80069d6:	6013      	str	r3, [r2, #0]
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069dc:	4613      	mov	r3, r2
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	4413      	add	r3, r2
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	4a13      	ldr	r2, [pc, #76]	; (8006a34 <xTaskRemoveFromEventList+0xb8>)
 80069e6:	441a      	add	r2, r3
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	3304      	adds	r3, #4
 80069ec:	4619      	mov	r1, r3
 80069ee:	4610      	mov	r0, r2
 80069f0:	f7fe fdcb 	bl	800558a <vListInsertEnd>
 80069f4:	e005      	b.n	8006a02 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	3318      	adds	r3, #24
 80069fa:	4619      	mov	r1, r3
 80069fc:	480e      	ldr	r0, [pc, #56]	; (8006a38 <xTaskRemoveFromEventList+0xbc>)
 80069fe:	f7fe fdc4 	bl	800558a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a06:	4b0d      	ldr	r3, [pc, #52]	; (8006a3c <xTaskRemoveFromEventList+0xc0>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d905      	bls.n	8006a1c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006a10:	2301      	movs	r3, #1
 8006a12:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006a14:	4b0a      	ldr	r3, [pc, #40]	; (8006a40 <xTaskRemoveFromEventList+0xc4>)
 8006a16:	2201      	movs	r2, #1
 8006a18:	601a      	str	r2, [r3, #0]
 8006a1a:	e001      	b.n	8006a20 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006a20:	697b      	ldr	r3, [r7, #20]
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3718      	adds	r7, #24
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	20001064 	.word	0x20001064
 8006a30:	20001044 	.word	0x20001044
 8006a34:	20000b6c 	.word	0x20000b6c
 8006a38:	20000ffc 	.word	0x20000ffc
 8006a3c:	20000b68 	.word	0x20000b68
 8006a40:	20001050 	.word	0x20001050

08006a44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006a4c:	4b06      	ldr	r3, [pc, #24]	; (8006a68 <vTaskInternalSetTimeOutState+0x24>)
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006a54:	4b05      	ldr	r3, [pc, #20]	; (8006a6c <vTaskInternalSetTimeOutState+0x28>)
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	605a      	str	r2, [r3, #4]
}
 8006a5c:	bf00      	nop
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr
 8006a68:	20001054 	.word	0x20001054
 8006a6c:	20001040 	.word	0x20001040

08006a70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b088      	sub	sp, #32
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d10a      	bne.n	8006a96 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a84:	f383 8811 	msr	BASEPRI, r3
 8006a88:	f3bf 8f6f 	isb	sy
 8006a8c:	f3bf 8f4f 	dsb	sy
 8006a90:	613b      	str	r3, [r7, #16]
}
 8006a92:	bf00      	nop
 8006a94:	e7fe      	b.n	8006a94 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10a      	bne.n	8006ab2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa0:	f383 8811 	msr	BASEPRI, r3
 8006aa4:	f3bf 8f6f 	isb	sy
 8006aa8:	f3bf 8f4f 	dsb	sy
 8006aac:	60fb      	str	r3, [r7, #12]
}
 8006aae:	bf00      	nop
 8006ab0:	e7fe      	b.n	8006ab0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006ab2:	f000 fe7f 	bl	80077b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006ab6:	4b1d      	ldr	r3, [pc, #116]	; (8006b2c <xTaskCheckForTimeOut+0xbc>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	69ba      	ldr	r2, [r7, #24]
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ace:	d102      	bne.n	8006ad6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	61fb      	str	r3, [r7, #28]
 8006ad4:	e023      	b.n	8006b1e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	4b15      	ldr	r3, [pc, #84]	; (8006b30 <xTaskCheckForTimeOut+0xc0>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d007      	beq.n	8006af2 <xTaskCheckForTimeOut+0x82>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	69ba      	ldr	r2, [r7, #24]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d302      	bcc.n	8006af2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006aec:	2301      	movs	r3, #1
 8006aee:	61fb      	str	r3, [r7, #28]
 8006af0:	e015      	b.n	8006b1e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	697a      	ldr	r2, [r7, #20]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d20b      	bcs.n	8006b14 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	1ad2      	subs	r2, r2, r3
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f7ff ff9b 	bl	8006a44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	61fb      	str	r3, [r7, #28]
 8006b12:	e004      	b.n	8006b1e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	2200      	movs	r2, #0
 8006b18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006b1e:	f000 fe79 	bl	8007814 <vPortExitCritical>

	return xReturn;
 8006b22:	69fb      	ldr	r3, [r7, #28]
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3720      	adds	r7, #32
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	20001040 	.word	0x20001040
 8006b30:	20001054 	.word	0x20001054

08006b34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006b34:	b480      	push	{r7}
 8006b36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006b38:	4b03      	ldr	r3, [pc, #12]	; (8006b48 <vTaskMissedYield+0x14>)
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	601a      	str	r2, [r3, #0]
}
 8006b3e:	bf00      	nop
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr
 8006b48:	20001050 	.word	0x20001050

08006b4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006b54:	f000 f854 	bl	8006c00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006b58:	4b07      	ldr	r3, [pc, #28]	; (8006b78 <prvIdleTask+0x2c>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d907      	bls.n	8006b70 <prvIdleTask+0x24>
			{
				taskYIELD();
 8006b60:	4b06      	ldr	r3, [pc, #24]	; (8006b7c <prvIdleTask+0x30>)
 8006b62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b66:	601a      	str	r2, [r3, #0]
 8006b68:	f3bf 8f4f 	dsb	sy
 8006b6c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8006b70:	f7f9 fcb0 	bl	80004d4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8006b74:	e7ee      	b.n	8006b54 <prvIdleTask+0x8>
 8006b76:	bf00      	nop
 8006b78:	20000b6c 	.word	0x20000b6c
 8006b7c:	e000ed04 	.word	0xe000ed04

08006b80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b86:	2300      	movs	r3, #0
 8006b88:	607b      	str	r3, [r7, #4]
 8006b8a:	e00c      	b.n	8006ba6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	4613      	mov	r3, r2
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	4413      	add	r3, r2
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	4a12      	ldr	r2, [pc, #72]	; (8006be0 <prvInitialiseTaskLists+0x60>)
 8006b98:	4413      	add	r3, r2
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f7fe fcc8 	bl	8005530 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	607b      	str	r3, [r7, #4]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2b37      	cmp	r3, #55	; 0x37
 8006baa:	d9ef      	bls.n	8006b8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006bac:	480d      	ldr	r0, [pc, #52]	; (8006be4 <prvInitialiseTaskLists+0x64>)
 8006bae:	f7fe fcbf 	bl	8005530 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006bb2:	480d      	ldr	r0, [pc, #52]	; (8006be8 <prvInitialiseTaskLists+0x68>)
 8006bb4:	f7fe fcbc 	bl	8005530 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006bb8:	480c      	ldr	r0, [pc, #48]	; (8006bec <prvInitialiseTaskLists+0x6c>)
 8006bba:	f7fe fcb9 	bl	8005530 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006bbe:	480c      	ldr	r0, [pc, #48]	; (8006bf0 <prvInitialiseTaskLists+0x70>)
 8006bc0:	f7fe fcb6 	bl	8005530 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006bc4:	480b      	ldr	r0, [pc, #44]	; (8006bf4 <prvInitialiseTaskLists+0x74>)
 8006bc6:	f7fe fcb3 	bl	8005530 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006bca:	4b0b      	ldr	r3, [pc, #44]	; (8006bf8 <prvInitialiseTaskLists+0x78>)
 8006bcc:	4a05      	ldr	r2, [pc, #20]	; (8006be4 <prvInitialiseTaskLists+0x64>)
 8006bce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006bd0:	4b0a      	ldr	r3, [pc, #40]	; (8006bfc <prvInitialiseTaskLists+0x7c>)
 8006bd2:	4a05      	ldr	r2, [pc, #20]	; (8006be8 <prvInitialiseTaskLists+0x68>)
 8006bd4:	601a      	str	r2, [r3, #0]
}
 8006bd6:	bf00      	nop
 8006bd8:	3708      	adds	r7, #8
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	20000b6c 	.word	0x20000b6c
 8006be4:	20000fcc 	.word	0x20000fcc
 8006be8:	20000fe0 	.word	0x20000fe0
 8006bec:	20000ffc 	.word	0x20000ffc
 8006bf0:	20001010 	.word	0x20001010
 8006bf4:	20001028 	.word	0x20001028
 8006bf8:	20000ff4 	.word	0x20000ff4
 8006bfc:	20000ff8 	.word	0x20000ff8

08006c00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c06:	e019      	b.n	8006c3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006c08:	f000 fdd4 	bl	80077b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c0c:	4b10      	ldr	r3, [pc, #64]	; (8006c50 <prvCheckTasksWaitingTermination+0x50>)
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	3304      	adds	r3, #4
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f7fe fd13 	bl	8005644 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006c1e:	4b0d      	ldr	r3, [pc, #52]	; (8006c54 <prvCheckTasksWaitingTermination+0x54>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	3b01      	subs	r3, #1
 8006c24:	4a0b      	ldr	r2, [pc, #44]	; (8006c54 <prvCheckTasksWaitingTermination+0x54>)
 8006c26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006c28:	4b0b      	ldr	r3, [pc, #44]	; (8006c58 <prvCheckTasksWaitingTermination+0x58>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	4a0a      	ldr	r2, [pc, #40]	; (8006c58 <prvCheckTasksWaitingTermination+0x58>)
 8006c30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006c32:	f000 fdef 	bl	8007814 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 f810 	bl	8006c5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c3c:	4b06      	ldr	r3, [pc, #24]	; (8006c58 <prvCheckTasksWaitingTermination+0x58>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d1e1      	bne.n	8006c08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006c44:	bf00      	nop
 8006c46:	bf00      	nop
 8006c48:	3708      	adds	r7, #8
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	20001010 	.word	0x20001010
 8006c54:	2000103c 	.word	0x2000103c
 8006c58:	20001024 	.word	0x20001024

08006c5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	3354      	adds	r3, #84	; 0x54
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f001 f8f9 	bl	8007e60 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d108      	bne.n	8006c8a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f000 ff87 	bl	8007b90 <vPortFree>
				vPortFree( pxTCB );
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 ff84 	bl	8007b90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006c88:	e018      	b.n	8006cbc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d103      	bne.n	8006c9c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 ff7b 	bl	8007b90 <vPortFree>
	}
 8006c9a:	e00f      	b.n	8006cbc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006ca2:	2b02      	cmp	r3, #2
 8006ca4:	d00a      	beq.n	8006cbc <prvDeleteTCB+0x60>
	__asm volatile
 8006ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006caa:	f383 8811 	msr	BASEPRI, r3
 8006cae:	f3bf 8f6f 	isb	sy
 8006cb2:	f3bf 8f4f 	dsb	sy
 8006cb6:	60fb      	str	r3, [r7, #12]
}
 8006cb8:	bf00      	nop
 8006cba:	e7fe      	b.n	8006cba <prvDeleteTCB+0x5e>
	}
 8006cbc:	bf00      	nop
 8006cbe:	3710      	adds	r7, #16
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cca:	4b0c      	ldr	r3, [pc, #48]	; (8006cfc <prvResetNextTaskUnblockTime+0x38>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d104      	bne.n	8006cde <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006cd4:	4b0a      	ldr	r3, [pc, #40]	; (8006d00 <prvResetNextTaskUnblockTime+0x3c>)
 8006cd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006cda:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006cdc:	e008      	b.n	8006cf0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cde:	4b07      	ldr	r3, [pc, #28]	; (8006cfc <prvResetNextTaskUnblockTime+0x38>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	4a04      	ldr	r2, [pc, #16]	; (8006d00 <prvResetNextTaskUnblockTime+0x3c>)
 8006cee:	6013      	str	r3, [r2, #0]
}
 8006cf0:	bf00      	nop
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr
 8006cfc:	20000ff4 	.word	0x20000ff4
 8006d00:	2000105c 	.word	0x2000105c

08006d04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006d0a:	4b0b      	ldr	r3, [pc, #44]	; (8006d38 <xTaskGetSchedulerState+0x34>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d102      	bne.n	8006d18 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006d12:	2301      	movs	r3, #1
 8006d14:	607b      	str	r3, [r7, #4]
 8006d16:	e008      	b.n	8006d2a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d18:	4b08      	ldr	r3, [pc, #32]	; (8006d3c <xTaskGetSchedulerState+0x38>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d102      	bne.n	8006d26 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006d20:	2302      	movs	r3, #2
 8006d22:	607b      	str	r3, [r7, #4]
 8006d24:	e001      	b.n	8006d2a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006d26:	2300      	movs	r3, #0
 8006d28:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006d2a:	687b      	ldr	r3, [r7, #4]
	}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr
 8006d38:	20001048 	.word	0x20001048
 8006d3c:	20001064 	.word	0x20001064

08006d40 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b086      	sub	sp, #24
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d056      	beq.n	8006e04 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006d56:	4b2e      	ldr	r3, [pc, #184]	; (8006e10 <xTaskPriorityDisinherit+0xd0>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	693a      	ldr	r2, [r7, #16]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d00a      	beq.n	8006d76 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d64:	f383 8811 	msr	BASEPRI, r3
 8006d68:	f3bf 8f6f 	isb	sy
 8006d6c:	f3bf 8f4f 	dsb	sy
 8006d70:	60fb      	str	r3, [r7, #12]
}
 8006d72:	bf00      	nop
 8006d74:	e7fe      	b.n	8006d74 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d10a      	bne.n	8006d94 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d82:	f383 8811 	msr	BASEPRI, r3
 8006d86:	f3bf 8f6f 	isb	sy
 8006d8a:	f3bf 8f4f 	dsb	sy
 8006d8e:	60bb      	str	r3, [r7, #8]
}
 8006d90:	bf00      	nop
 8006d92:	e7fe      	b.n	8006d92 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d98:	1e5a      	subs	r2, r3, #1
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d02c      	beq.n	8006e04 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d128      	bne.n	8006e04 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	3304      	adds	r3, #4
 8006db6:	4618      	mov	r0, r3
 8006db8:	f7fe fc44 	bl	8005644 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dd4:	4b0f      	ldr	r3, [pc, #60]	; (8006e14 <xTaskPriorityDisinherit+0xd4>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d903      	bls.n	8006de4 <xTaskPriorityDisinherit+0xa4>
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de0:	4a0c      	ldr	r2, [pc, #48]	; (8006e14 <xTaskPriorityDisinherit+0xd4>)
 8006de2:	6013      	str	r3, [r2, #0]
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006de8:	4613      	mov	r3, r2
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	4413      	add	r3, r2
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	4a09      	ldr	r2, [pc, #36]	; (8006e18 <xTaskPriorityDisinherit+0xd8>)
 8006df2:	441a      	add	r2, r3
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	3304      	adds	r3, #4
 8006df8:	4619      	mov	r1, r3
 8006dfa:	4610      	mov	r0, r2
 8006dfc:	f7fe fbc5 	bl	800558a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006e00:	2301      	movs	r3, #1
 8006e02:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e04:	697b      	ldr	r3, [r7, #20]
	}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3718      	adds	r7, #24
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	20000b68 	.word	0x20000b68
 8006e14:	20001044 	.word	0x20001044
 8006e18:	20000b6c 	.word	0x20000b6c

08006e1c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006e26:	4b21      	ldr	r3, [pc, #132]	; (8006eac <prvAddCurrentTaskToDelayedList+0x90>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e2c:	4b20      	ldr	r3, [pc, #128]	; (8006eb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	3304      	adds	r3, #4
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7fe fc06 	bl	8005644 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e3e:	d10a      	bne.n	8006e56 <prvAddCurrentTaskToDelayedList+0x3a>
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d007      	beq.n	8006e56 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e46:	4b1a      	ldr	r3, [pc, #104]	; (8006eb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	3304      	adds	r3, #4
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	4819      	ldr	r0, [pc, #100]	; (8006eb4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006e50:	f7fe fb9b 	bl	800558a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006e54:	e026      	b.n	8006ea4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4413      	add	r3, r2
 8006e5c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006e5e:	4b14      	ldr	r3, [pc, #80]	; (8006eb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68ba      	ldr	r2, [r7, #8]
 8006e64:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006e66:	68ba      	ldr	r2, [r7, #8]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d209      	bcs.n	8006e82 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e6e:	4b12      	ldr	r3, [pc, #72]	; (8006eb8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	4b0f      	ldr	r3, [pc, #60]	; (8006eb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	3304      	adds	r3, #4
 8006e78:	4619      	mov	r1, r3
 8006e7a:	4610      	mov	r0, r2
 8006e7c:	f7fe fba9 	bl	80055d2 <vListInsert>
}
 8006e80:	e010      	b.n	8006ea4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e82:	4b0e      	ldr	r3, [pc, #56]	; (8006ebc <prvAddCurrentTaskToDelayedList+0xa0>)
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	4b0a      	ldr	r3, [pc, #40]	; (8006eb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	3304      	adds	r3, #4
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	4610      	mov	r0, r2
 8006e90:	f7fe fb9f 	bl	80055d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006e94:	4b0a      	ldr	r3, [pc, #40]	; (8006ec0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	68ba      	ldr	r2, [r7, #8]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d202      	bcs.n	8006ea4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006e9e:	4a08      	ldr	r2, [pc, #32]	; (8006ec0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	6013      	str	r3, [r2, #0]
}
 8006ea4:	bf00      	nop
 8006ea6:	3710      	adds	r7, #16
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	20001040 	.word	0x20001040
 8006eb0:	20000b68 	.word	0x20000b68
 8006eb4:	20001028 	.word	0x20001028
 8006eb8:	20000ff8 	.word	0x20000ff8
 8006ebc:	20000ff4 	.word	0x20000ff4
 8006ec0:	2000105c 	.word	0x2000105c

08006ec4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b08a      	sub	sp, #40	; 0x28
 8006ec8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006ece:	f000 fb07 	bl	80074e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006ed2:	4b1c      	ldr	r3, [pc, #112]	; (8006f44 <xTimerCreateTimerTask+0x80>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d021      	beq.n	8006f1e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006eda:	2300      	movs	r3, #0
 8006edc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006ee2:	1d3a      	adds	r2, r7, #4
 8006ee4:	f107 0108 	add.w	r1, r7, #8
 8006ee8:	f107 030c 	add.w	r3, r7, #12
 8006eec:	4618      	mov	r0, r3
 8006eee:	f7fe fb05 	bl	80054fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006ef2:	6879      	ldr	r1, [r7, #4]
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	9202      	str	r2, [sp, #8]
 8006efa:	9301      	str	r3, [sp, #4]
 8006efc:	2302      	movs	r3, #2
 8006efe:	9300      	str	r3, [sp, #0]
 8006f00:	2300      	movs	r3, #0
 8006f02:	460a      	mov	r2, r1
 8006f04:	4910      	ldr	r1, [pc, #64]	; (8006f48 <xTimerCreateTimerTask+0x84>)
 8006f06:	4811      	ldr	r0, [pc, #68]	; (8006f4c <xTimerCreateTimerTask+0x88>)
 8006f08:	f7ff f8b2 	bl	8006070 <xTaskCreateStatic>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	4a10      	ldr	r2, [pc, #64]	; (8006f50 <xTimerCreateTimerTask+0x8c>)
 8006f10:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006f12:	4b0f      	ldr	r3, [pc, #60]	; (8006f50 <xTimerCreateTimerTask+0x8c>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d001      	beq.n	8006f1e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d10a      	bne.n	8006f3a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f28:	f383 8811 	msr	BASEPRI, r3
 8006f2c:	f3bf 8f6f 	isb	sy
 8006f30:	f3bf 8f4f 	dsb	sy
 8006f34:	613b      	str	r3, [r7, #16]
}
 8006f36:	bf00      	nop
 8006f38:	e7fe      	b.n	8006f38 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006f3a:	697b      	ldr	r3, [r7, #20]
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3718      	adds	r7, #24
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	20001098 	.word	0x20001098
 8006f48:	08007ffc 	.word	0x08007ffc
 8006f4c:	08007089 	.word	0x08007089
 8006f50:	2000109c 	.word	0x2000109c

08006f54 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b08a      	sub	sp, #40	; 0x28
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	607a      	str	r2, [r7, #4]
 8006f60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006f62:	2300      	movs	r3, #0
 8006f64:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d10a      	bne.n	8006f82 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f70:	f383 8811 	msr	BASEPRI, r3
 8006f74:	f3bf 8f6f 	isb	sy
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	623b      	str	r3, [r7, #32]
}
 8006f7e:	bf00      	nop
 8006f80:	e7fe      	b.n	8006f80 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006f82:	4b1a      	ldr	r3, [pc, #104]	; (8006fec <xTimerGenericCommand+0x98>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d02a      	beq.n	8006fe0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	2b05      	cmp	r3, #5
 8006f9a:	dc18      	bgt.n	8006fce <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006f9c:	f7ff feb2 	bl	8006d04 <xTaskGetSchedulerState>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b02      	cmp	r3, #2
 8006fa4:	d109      	bne.n	8006fba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006fa6:	4b11      	ldr	r3, [pc, #68]	; (8006fec <xTimerGenericCommand+0x98>)
 8006fa8:	6818      	ldr	r0, [r3, #0]
 8006faa:	f107 0110 	add.w	r1, r7, #16
 8006fae:	2300      	movs	r3, #0
 8006fb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fb2:	f7fe fc75 	bl	80058a0 <xQueueGenericSend>
 8006fb6:	6278      	str	r0, [r7, #36]	; 0x24
 8006fb8:	e012      	b.n	8006fe0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006fba:	4b0c      	ldr	r3, [pc, #48]	; (8006fec <xTimerGenericCommand+0x98>)
 8006fbc:	6818      	ldr	r0, [r3, #0]
 8006fbe:	f107 0110 	add.w	r1, r7, #16
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f7fe fc6b 	bl	80058a0 <xQueueGenericSend>
 8006fca:	6278      	str	r0, [r7, #36]	; 0x24
 8006fcc:	e008      	b.n	8006fe0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006fce:	4b07      	ldr	r3, [pc, #28]	; (8006fec <xTimerGenericCommand+0x98>)
 8006fd0:	6818      	ldr	r0, [r3, #0]
 8006fd2:	f107 0110 	add.w	r1, r7, #16
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	683a      	ldr	r2, [r7, #0]
 8006fda:	f7fe fd5f 	bl	8005a9c <xQueueGenericSendFromISR>
 8006fde:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3728      	adds	r7, #40	; 0x28
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	20001098 	.word	0x20001098

08006ff0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b088      	sub	sp, #32
 8006ff4:	af02      	add	r7, sp, #8
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ffa:	4b22      	ldr	r3, [pc, #136]	; (8007084 <prvProcessExpiredTimer+0x94>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	3304      	adds	r3, #4
 8007008:	4618      	mov	r0, r3
 800700a:	f7fe fb1b 	bl	8005644 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007014:	f003 0304 	and.w	r3, r3, #4
 8007018:	2b00      	cmp	r3, #0
 800701a:	d022      	beq.n	8007062 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	699a      	ldr	r2, [r3, #24]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	18d1      	adds	r1, r2, r3
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	683a      	ldr	r2, [r7, #0]
 8007028:	6978      	ldr	r0, [r7, #20]
 800702a:	f000 f8d1 	bl	80071d0 <prvInsertTimerInActiveList>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d01f      	beq.n	8007074 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007034:	2300      	movs	r3, #0
 8007036:	9300      	str	r3, [sp, #0]
 8007038:	2300      	movs	r3, #0
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	2100      	movs	r1, #0
 800703e:	6978      	ldr	r0, [r7, #20]
 8007040:	f7ff ff88 	bl	8006f54 <xTimerGenericCommand>
 8007044:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d113      	bne.n	8007074 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800704c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007050:	f383 8811 	msr	BASEPRI, r3
 8007054:	f3bf 8f6f 	isb	sy
 8007058:	f3bf 8f4f 	dsb	sy
 800705c:	60fb      	str	r3, [r7, #12]
}
 800705e:	bf00      	nop
 8007060:	e7fe      	b.n	8007060 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007068:	f023 0301 	bic.w	r3, r3, #1
 800706c:	b2da      	uxtb	r2, r3
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	6a1b      	ldr	r3, [r3, #32]
 8007078:	6978      	ldr	r0, [r7, #20]
 800707a:	4798      	blx	r3
}
 800707c:	bf00      	nop
 800707e:	3718      	adds	r7, #24
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	20001090 	.word	0x20001090

08007088 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007090:	f107 0308 	add.w	r3, r7, #8
 8007094:	4618      	mov	r0, r3
 8007096:	f000 f857 	bl	8007148 <prvGetNextExpireTime>
 800709a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	4619      	mov	r1, r3
 80070a0:	68f8      	ldr	r0, [r7, #12]
 80070a2:	f000 f803 	bl	80070ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80070a6:	f000 f8d5 	bl	8007254 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80070aa:	e7f1      	b.n	8007090 <prvTimerTask+0x8>

080070ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80070b6:	f7ff fa37 	bl	8006528 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80070ba:	f107 0308 	add.w	r3, r7, #8
 80070be:	4618      	mov	r0, r3
 80070c0:	f000 f866 	bl	8007190 <prvSampleTimeNow>
 80070c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d130      	bne.n	800712e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d10a      	bne.n	80070e8 <prvProcessTimerOrBlockTask+0x3c>
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d806      	bhi.n	80070e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80070da:	f7ff fa33 	bl	8006544 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80070de:	68f9      	ldr	r1, [r7, #12]
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f7ff ff85 	bl	8006ff0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80070e6:	e024      	b.n	8007132 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d008      	beq.n	8007100 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80070ee:	4b13      	ldr	r3, [pc, #76]	; (800713c <prvProcessTimerOrBlockTask+0x90>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d101      	bne.n	80070fc <prvProcessTimerOrBlockTask+0x50>
 80070f8:	2301      	movs	r3, #1
 80070fa:	e000      	b.n	80070fe <prvProcessTimerOrBlockTask+0x52>
 80070fc:	2300      	movs	r3, #0
 80070fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007100:	4b0f      	ldr	r3, [pc, #60]	; (8007140 <prvProcessTimerOrBlockTask+0x94>)
 8007102:	6818      	ldr	r0, [r3, #0]
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	1ad3      	subs	r3, r2, r3
 800710a:	683a      	ldr	r2, [r7, #0]
 800710c:	4619      	mov	r1, r3
 800710e:	f7fe ff7b 	bl	8006008 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007112:	f7ff fa17 	bl	8006544 <xTaskResumeAll>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d10a      	bne.n	8007132 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800711c:	4b09      	ldr	r3, [pc, #36]	; (8007144 <prvProcessTimerOrBlockTask+0x98>)
 800711e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007122:	601a      	str	r2, [r3, #0]
 8007124:	f3bf 8f4f 	dsb	sy
 8007128:	f3bf 8f6f 	isb	sy
}
 800712c:	e001      	b.n	8007132 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800712e:	f7ff fa09 	bl	8006544 <xTaskResumeAll>
}
 8007132:	bf00      	nop
 8007134:	3710      	adds	r7, #16
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	20001094 	.word	0x20001094
 8007140:	20001098 	.word	0x20001098
 8007144:	e000ed04 	.word	0xe000ed04

08007148 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007148:	b480      	push	{r7}
 800714a:	b085      	sub	sp, #20
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007150:	4b0e      	ldr	r3, [pc, #56]	; (800718c <prvGetNextExpireTime+0x44>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d101      	bne.n	800715e <prvGetNextExpireTime+0x16>
 800715a:	2201      	movs	r2, #1
 800715c:	e000      	b.n	8007160 <prvGetNextExpireTime+0x18>
 800715e:	2200      	movs	r2, #0
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d105      	bne.n	8007178 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800716c:	4b07      	ldr	r3, [pc, #28]	; (800718c <prvGetNextExpireTime+0x44>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	60fb      	str	r3, [r7, #12]
 8007176:	e001      	b.n	800717c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007178:	2300      	movs	r3, #0
 800717a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800717c:	68fb      	ldr	r3, [r7, #12]
}
 800717e:	4618      	mov	r0, r3
 8007180:	3714      	adds	r7, #20
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	20001090 	.word	0x20001090

08007190 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007198:	f7ff fa72 	bl	8006680 <xTaskGetTickCount>
 800719c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800719e:	4b0b      	ldr	r3, [pc, #44]	; (80071cc <prvSampleTimeNow+0x3c>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d205      	bcs.n	80071b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80071a8:	f000 f936 	bl	8007418 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	601a      	str	r2, [r3, #0]
 80071b2:	e002      	b.n	80071ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80071ba:	4a04      	ldr	r2, [pc, #16]	; (80071cc <prvSampleTimeNow+0x3c>)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80071c0:	68fb      	ldr	r3, [r7, #12]
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3710      	adds	r7, #16
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	200010a0 	.word	0x200010a0

080071d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b086      	sub	sp, #24
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	607a      	str	r2, [r7, #4]
 80071dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80071de:	2300      	movs	r3, #0
 80071e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	68ba      	ldr	r2, [r7, #8]
 80071e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80071ee:	68ba      	ldr	r2, [r7, #8]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d812      	bhi.n	800721c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	1ad2      	subs	r2, r2, r3
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	699b      	ldr	r3, [r3, #24]
 8007200:	429a      	cmp	r2, r3
 8007202:	d302      	bcc.n	800720a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007204:	2301      	movs	r3, #1
 8007206:	617b      	str	r3, [r7, #20]
 8007208:	e01b      	b.n	8007242 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800720a:	4b10      	ldr	r3, [pc, #64]	; (800724c <prvInsertTimerInActiveList+0x7c>)
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	3304      	adds	r3, #4
 8007212:	4619      	mov	r1, r3
 8007214:	4610      	mov	r0, r2
 8007216:	f7fe f9dc 	bl	80055d2 <vListInsert>
 800721a:	e012      	b.n	8007242 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	429a      	cmp	r2, r3
 8007222:	d206      	bcs.n	8007232 <prvInsertTimerInActiveList+0x62>
 8007224:	68ba      	ldr	r2, [r7, #8]
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	429a      	cmp	r2, r3
 800722a:	d302      	bcc.n	8007232 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800722c:	2301      	movs	r3, #1
 800722e:	617b      	str	r3, [r7, #20]
 8007230:	e007      	b.n	8007242 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007232:	4b07      	ldr	r3, [pc, #28]	; (8007250 <prvInsertTimerInActiveList+0x80>)
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	3304      	adds	r3, #4
 800723a:	4619      	mov	r1, r3
 800723c:	4610      	mov	r0, r2
 800723e:	f7fe f9c8 	bl	80055d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007242:	697b      	ldr	r3, [r7, #20]
}
 8007244:	4618      	mov	r0, r3
 8007246:	3718      	adds	r7, #24
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}
 800724c:	20001094 	.word	0x20001094
 8007250:	20001090 	.word	0x20001090

08007254 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b08e      	sub	sp, #56	; 0x38
 8007258:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800725a:	e0ca      	b.n	80073f2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2b00      	cmp	r3, #0
 8007260:	da18      	bge.n	8007294 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007262:	1d3b      	adds	r3, r7, #4
 8007264:	3304      	adds	r3, #4
 8007266:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800726a:	2b00      	cmp	r3, #0
 800726c:	d10a      	bne.n	8007284 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800726e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007272:	f383 8811 	msr	BASEPRI, r3
 8007276:	f3bf 8f6f 	isb	sy
 800727a:	f3bf 8f4f 	dsb	sy
 800727e:	61fb      	str	r3, [r7, #28]
}
 8007280:	bf00      	nop
 8007282:	e7fe      	b.n	8007282 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800728a:	6850      	ldr	r0, [r2, #4]
 800728c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800728e:	6892      	ldr	r2, [r2, #8]
 8007290:	4611      	mov	r1, r2
 8007292:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2b00      	cmp	r3, #0
 8007298:	f2c0 80aa 	blt.w	80073f0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80072a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a2:	695b      	ldr	r3, [r3, #20]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d004      	beq.n	80072b2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072aa:	3304      	adds	r3, #4
 80072ac:	4618      	mov	r0, r3
 80072ae:	f7fe f9c9 	bl	8005644 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80072b2:	463b      	mov	r3, r7
 80072b4:	4618      	mov	r0, r3
 80072b6:	f7ff ff6b 	bl	8007190 <prvSampleTimeNow>
 80072ba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2b09      	cmp	r3, #9
 80072c0:	f200 8097 	bhi.w	80073f2 <prvProcessReceivedCommands+0x19e>
 80072c4:	a201      	add	r2, pc, #4	; (adr r2, 80072cc <prvProcessReceivedCommands+0x78>)
 80072c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ca:	bf00      	nop
 80072cc:	080072f5 	.word	0x080072f5
 80072d0:	080072f5 	.word	0x080072f5
 80072d4:	080072f5 	.word	0x080072f5
 80072d8:	08007369 	.word	0x08007369
 80072dc:	0800737d 	.word	0x0800737d
 80072e0:	080073c7 	.word	0x080073c7
 80072e4:	080072f5 	.word	0x080072f5
 80072e8:	080072f5 	.word	0x080072f5
 80072ec:	08007369 	.word	0x08007369
 80072f0:	0800737d 	.word	0x0800737d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80072f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072fa:	f043 0301 	orr.w	r3, r3, #1
 80072fe:	b2da      	uxtb	r2, r3
 8007300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007302:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007306:	68ba      	ldr	r2, [r7, #8]
 8007308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730a:	699b      	ldr	r3, [r3, #24]
 800730c:	18d1      	adds	r1, r2, r3
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007312:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007314:	f7ff ff5c 	bl	80071d0 <prvInsertTimerInActiveList>
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d069      	beq.n	80073f2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800731e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007320:	6a1b      	ldr	r3, [r3, #32]
 8007322:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007324:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007328:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800732c:	f003 0304 	and.w	r3, r3, #4
 8007330:	2b00      	cmp	r3, #0
 8007332:	d05e      	beq.n	80073f2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007334:	68ba      	ldr	r2, [r7, #8]
 8007336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007338:	699b      	ldr	r3, [r3, #24]
 800733a:	441a      	add	r2, r3
 800733c:	2300      	movs	r3, #0
 800733e:	9300      	str	r3, [sp, #0]
 8007340:	2300      	movs	r3, #0
 8007342:	2100      	movs	r1, #0
 8007344:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007346:	f7ff fe05 	bl	8006f54 <xTimerGenericCommand>
 800734a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800734c:	6a3b      	ldr	r3, [r7, #32]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d14f      	bne.n	80073f2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007356:	f383 8811 	msr	BASEPRI, r3
 800735a:	f3bf 8f6f 	isb	sy
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	61bb      	str	r3, [r7, #24]
}
 8007364:	bf00      	nop
 8007366:	e7fe      	b.n	8007366 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800736a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800736e:	f023 0301 	bic.w	r3, r3, #1
 8007372:	b2da      	uxtb	r2, r3
 8007374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007376:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800737a:	e03a      	b.n	80073f2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800737c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007382:	f043 0301 	orr.w	r3, r3, #1
 8007386:	b2da      	uxtb	r2, r3
 8007388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800738a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800738e:	68ba      	ldr	r2, [r7, #8]
 8007390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007392:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007396:	699b      	ldr	r3, [r3, #24]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d10a      	bne.n	80073b2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800739c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a0:	f383 8811 	msr	BASEPRI, r3
 80073a4:	f3bf 8f6f 	isb	sy
 80073a8:	f3bf 8f4f 	dsb	sy
 80073ac:	617b      	str	r3, [r7, #20]
}
 80073ae:	bf00      	nop
 80073b0:	e7fe      	b.n	80073b0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80073b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b4:	699a      	ldr	r2, [r3, #24]
 80073b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b8:	18d1      	adds	r1, r2, r3
 80073ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073c0:	f7ff ff06 	bl	80071d0 <prvInsertTimerInActiveList>
					break;
 80073c4:	e015      	b.n	80073f2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80073c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073cc:	f003 0302 	and.w	r3, r3, #2
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d103      	bne.n	80073dc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80073d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073d6:	f000 fbdb 	bl	8007b90 <vPortFree>
 80073da:	e00a      	b.n	80073f2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80073dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073e2:	f023 0301 	bic.w	r3, r3, #1
 80073e6:	b2da      	uxtb	r2, r3
 80073e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80073ee:	e000      	b.n	80073f2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80073f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80073f2:	4b08      	ldr	r3, [pc, #32]	; (8007414 <prvProcessReceivedCommands+0x1c0>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	1d39      	adds	r1, r7, #4
 80073f8:	2200      	movs	r2, #0
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7fe fbea 	bl	8005bd4 <xQueueReceive>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	f47f af2a 	bne.w	800725c <prvProcessReceivedCommands+0x8>
	}
}
 8007408:	bf00      	nop
 800740a:	bf00      	nop
 800740c:	3730      	adds	r7, #48	; 0x30
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	20001098 	.word	0x20001098

08007418 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b088      	sub	sp, #32
 800741c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800741e:	e048      	b.n	80074b2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007420:	4b2d      	ldr	r3, [pc, #180]	; (80074d8 <prvSwitchTimerLists+0xc0>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800742a:	4b2b      	ldr	r3, [pc, #172]	; (80074d8 <prvSwitchTimerLists+0xc0>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	3304      	adds	r3, #4
 8007438:	4618      	mov	r0, r3
 800743a:	f7fe f903 	bl	8005644 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6a1b      	ldr	r3, [r3, #32]
 8007442:	68f8      	ldr	r0, [r7, #12]
 8007444:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800744c:	f003 0304 	and.w	r3, r3, #4
 8007450:	2b00      	cmp	r3, #0
 8007452:	d02e      	beq.n	80074b2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	699b      	ldr	r3, [r3, #24]
 8007458:	693a      	ldr	r2, [r7, #16]
 800745a:	4413      	add	r3, r2
 800745c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800745e:	68ba      	ldr	r2, [r7, #8]
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	429a      	cmp	r2, r3
 8007464:	d90e      	bls.n	8007484 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	68ba      	ldr	r2, [r7, #8]
 800746a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	68fa      	ldr	r2, [r7, #12]
 8007470:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007472:	4b19      	ldr	r3, [pc, #100]	; (80074d8 <prvSwitchTimerLists+0xc0>)
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	3304      	adds	r3, #4
 800747a:	4619      	mov	r1, r3
 800747c:	4610      	mov	r0, r2
 800747e:	f7fe f8a8 	bl	80055d2 <vListInsert>
 8007482:	e016      	b.n	80074b2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007484:	2300      	movs	r3, #0
 8007486:	9300      	str	r3, [sp, #0]
 8007488:	2300      	movs	r3, #0
 800748a:	693a      	ldr	r2, [r7, #16]
 800748c:	2100      	movs	r1, #0
 800748e:	68f8      	ldr	r0, [r7, #12]
 8007490:	f7ff fd60 	bl	8006f54 <xTimerGenericCommand>
 8007494:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d10a      	bne.n	80074b2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800749c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a0:	f383 8811 	msr	BASEPRI, r3
 80074a4:	f3bf 8f6f 	isb	sy
 80074a8:	f3bf 8f4f 	dsb	sy
 80074ac:	603b      	str	r3, [r7, #0]
}
 80074ae:	bf00      	nop
 80074b0:	e7fe      	b.n	80074b0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80074b2:	4b09      	ldr	r3, [pc, #36]	; (80074d8 <prvSwitchTimerLists+0xc0>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d1b1      	bne.n	8007420 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80074bc:	4b06      	ldr	r3, [pc, #24]	; (80074d8 <prvSwitchTimerLists+0xc0>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80074c2:	4b06      	ldr	r3, [pc, #24]	; (80074dc <prvSwitchTimerLists+0xc4>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a04      	ldr	r2, [pc, #16]	; (80074d8 <prvSwitchTimerLists+0xc0>)
 80074c8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80074ca:	4a04      	ldr	r2, [pc, #16]	; (80074dc <prvSwitchTimerLists+0xc4>)
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	6013      	str	r3, [r2, #0]
}
 80074d0:	bf00      	nop
 80074d2:	3718      	adds	r7, #24
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	20001090 	.word	0x20001090
 80074dc:	20001094 	.word	0x20001094

080074e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b082      	sub	sp, #8
 80074e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80074e6:	f000 f965 	bl	80077b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80074ea:	4b15      	ldr	r3, [pc, #84]	; (8007540 <prvCheckForValidListAndQueue+0x60>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d120      	bne.n	8007534 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80074f2:	4814      	ldr	r0, [pc, #80]	; (8007544 <prvCheckForValidListAndQueue+0x64>)
 80074f4:	f7fe f81c 	bl	8005530 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80074f8:	4813      	ldr	r0, [pc, #76]	; (8007548 <prvCheckForValidListAndQueue+0x68>)
 80074fa:	f7fe f819 	bl	8005530 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80074fe:	4b13      	ldr	r3, [pc, #76]	; (800754c <prvCheckForValidListAndQueue+0x6c>)
 8007500:	4a10      	ldr	r2, [pc, #64]	; (8007544 <prvCheckForValidListAndQueue+0x64>)
 8007502:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007504:	4b12      	ldr	r3, [pc, #72]	; (8007550 <prvCheckForValidListAndQueue+0x70>)
 8007506:	4a10      	ldr	r2, [pc, #64]	; (8007548 <prvCheckForValidListAndQueue+0x68>)
 8007508:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800750a:	2300      	movs	r3, #0
 800750c:	9300      	str	r3, [sp, #0]
 800750e:	4b11      	ldr	r3, [pc, #68]	; (8007554 <prvCheckForValidListAndQueue+0x74>)
 8007510:	4a11      	ldr	r2, [pc, #68]	; (8007558 <prvCheckForValidListAndQueue+0x78>)
 8007512:	2110      	movs	r1, #16
 8007514:	200a      	movs	r0, #10
 8007516:	f7fe f927 	bl	8005768 <xQueueGenericCreateStatic>
 800751a:	4603      	mov	r3, r0
 800751c:	4a08      	ldr	r2, [pc, #32]	; (8007540 <prvCheckForValidListAndQueue+0x60>)
 800751e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007520:	4b07      	ldr	r3, [pc, #28]	; (8007540 <prvCheckForValidListAndQueue+0x60>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d005      	beq.n	8007534 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007528:	4b05      	ldr	r3, [pc, #20]	; (8007540 <prvCheckForValidListAndQueue+0x60>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	490b      	ldr	r1, [pc, #44]	; (800755c <prvCheckForValidListAndQueue+0x7c>)
 800752e:	4618      	mov	r0, r3
 8007530:	f7fe fd40 	bl	8005fb4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007534:	f000 f96e 	bl	8007814 <vPortExitCritical>
}
 8007538:	bf00      	nop
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop
 8007540:	20001098 	.word	0x20001098
 8007544:	20001068 	.word	0x20001068
 8007548:	2000107c 	.word	0x2000107c
 800754c:	20001090 	.word	0x20001090
 8007550:	20001094 	.word	0x20001094
 8007554:	20001144 	.word	0x20001144
 8007558:	200010a4 	.word	0x200010a4
 800755c:	08008004 	.word	0x08008004

08007560 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007560:	b480      	push	{r7}
 8007562:	b085      	sub	sp, #20
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	3b04      	subs	r3, #4
 8007570:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007578:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	3b04      	subs	r3, #4
 800757e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	f023 0201 	bic.w	r2, r3, #1
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	3b04      	subs	r3, #4
 800758e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007590:	4a0c      	ldr	r2, [pc, #48]	; (80075c4 <pxPortInitialiseStack+0x64>)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	3b14      	subs	r3, #20
 800759a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	3b04      	subs	r3, #4
 80075a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f06f 0202 	mvn.w	r2, #2
 80075ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	3b20      	subs	r3, #32
 80075b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80075b6:	68fb      	ldr	r3, [r7, #12]
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3714      	adds	r7, #20
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr
 80075c4:	080075c9 	.word	0x080075c9

080075c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80075ce:	2300      	movs	r3, #0
 80075d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80075d2:	4b12      	ldr	r3, [pc, #72]	; (800761c <prvTaskExitError+0x54>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075da:	d00a      	beq.n	80075f2 <prvTaskExitError+0x2a>
	__asm volatile
 80075dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e0:	f383 8811 	msr	BASEPRI, r3
 80075e4:	f3bf 8f6f 	isb	sy
 80075e8:	f3bf 8f4f 	dsb	sy
 80075ec:	60fb      	str	r3, [r7, #12]
}
 80075ee:	bf00      	nop
 80075f0:	e7fe      	b.n	80075f0 <prvTaskExitError+0x28>
	__asm volatile
 80075f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f6:	f383 8811 	msr	BASEPRI, r3
 80075fa:	f3bf 8f6f 	isb	sy
 80075fe:	f3bf 8f4f 	dsb	sy
 8007602:	60bb      	str	r3, [r7, #8]
}
 8007604:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007606:	bf00      	nop
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d0fc      	beq.n	8007608 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800760e:	bf00      	nop
 8007610:	bf00      	nop
 8007612:	3714      	adds	r7, #20
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr
 800761c:	2000000c 	.word	0x2000000c

08007620 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007620:	4b07      	ldr	r3, [pc, #28]	; (8007640 <pxCurrentTCBConst2>)
 8007622:	6819      	ldr	r1, [r3, #0]
 8007624:	6808      	ldr	r0, [r1, #0]
 8007626:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800762a:	f380 8809 	msr	PSP, r0
 800762e:	f3bf 8f6f 	isb	sy
 8007632:	f04f 0000 	mov.w	r0, #0
 8007636:	f380 8811 	msr	BASEPRI, r0
 800763a:	4770      	bx	lr
 800763c:	f3af 8000 	nop.w

08007640 <pxCurrentTCBConst2>:
 8007640:	20000b68 	.word	0x20000b68
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007644:	bf00      	nop
 8007646:	bf00      	nop

08007648 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007648:	4808      	ldr	r0, [pc, #32]	; (800766c <prvPortStartFirstTask+0x24>)
 800764a:	6800      	ldr	r0, [r0, #0]
 800764c:	6800      	ldr	r0, [r0, #0]
 800764e:	f380 8808 	msr	MSP, r0
 8007652:	f04f 0000 	mov.w	r0, #0
 8007656:	f380 8814 	msr	CONTROL, r0
 800765a:	b662      	cpsie	i
 800765c:	b661      	cpsie	f
 800765e:	f3bf 8f4f 	dsb	sy
 8007662:	f3bf 8f6f 	isb	sy
 8007666:	df00      	svc	0
 8007668:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800766a:	bf00      	nop
 800766c:	e000ed08 	.word	0xe000ed08

08007670 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b086      	sub	sp, #24
 8007674:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007676:	4b46      	ldr	r3, [pc, #280]	; (8007790 <xPortStartScheduler+0x120>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a46      	ldr	r2, [pc, #280]	; (8007794 <xPortStartScheduler+0x124>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d10a      	bne.n	8007696 <xPortStartScheduler+0x26>
	__asm volatile
 8007680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007684:	f383 8811 	msr	BASEPRI, r3
 8007688:	f3bf 8f6f 	isb	sy
 800768c:	f3bf 8f4f 	dsb	sy
 8007690:	613b      	str	r3, [r7, #16]
}
 8007692:	bf00      	nop
 8007694:	e7fe      	b.n	8007694 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007696:	4b3e      	ldr	r3, [pc, #248]	; (8007790 <xPortStartScheduler+0x120>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a3f      	ldr	r2, [pc, #252]	; (8007798 <xPortStartScheduler+0x128>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d10a      	bne.n	80076b6 <xPortStartScheduler+0x46>
	__asm volatile
 80076a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a4:	f383 8811 	msr	BASEPRI, r3
 80076a8:	f3bf 8f6f 	isb	sy
 80076ac:	f3bf 8f4f 	dsb	sy
 80076b0:	60fb      	str	r3, [r7, #12]
}
 80076b2:	bf00      	nop
 80076b4:	e7fe      	b.n	80076b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80076b6:	4b39      	ldr	r3, [pc, #228]	; (800779c <xPortStartScheduler+0x12c>)
 80076b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	22ff      	movs	r2, #255	; 0xff
 80076c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80076d0:	78fb      	ldrb	r3, [r7, #3]
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80076d8:	b2da      	uxtb	r2, r3
 80076da:	4b31      	ldr	r3, [pc, #196]	; (80077a0 <xPortStartScheduler+0x130>)
 80076dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80076de:	4b31      	ldr	r3, [pc, #196]	; (80077a4 <xPortStartScheduler+0x134>)
 80076e0:	2207      	movs	r2, #7
 80076e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80076e4:	e009      	b.n	80076fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80076e6:	4b2f      	ldr	r3, [pc, #188]	; (80077a4 <xPortStartScheduler+0x134>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	3b01      	subs	r3, #1
 80076ec:	4a2d      	ldr	r2, [pc, #180]	; (80077a4 <xPortStartScheduler+0x134>)
 80076ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80076f0:	78fb      	ldrb	r3, [r7, #3]
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	005b      	lsls	r3, r3, #1
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80076fa:	78fb      	ldrb	r3, [r7, #3]
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007702:	2b80      	cmp	r3, #128	; 0x80
 8007704:	d0ef      	beq.n	80076e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007706:	4b27      	ldr	r3, [pc, #156]	; (80077a4 <xPortStartScheduler+0x134>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f1c3 0307 	rsb	r3, r3, #7
 800770e:	2b04      	cmp	r3, #4
 8007710:	d00a      	beq.n	8007728 <xPortStartScheduler+0xb8>
	__asm volatile
 8007712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007716:	f383 8811 	msr	BASEPRI, r3
 800771a:	f3bf 8f6f 	isb	sy
 800771e:	f3bf 8f4f 	dsb	sy
 8007722:	60bb      	str	r3, [r7, #8]
}
 8007724:	bf00      	nop
 8007726:	e7fe      	b.n	8007726 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007728:	4b1e      	ldr	r3, [pc, #120]	; (80077a4 <xPortStartScheduler+0x134>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	021b      	lsls	r3, r3, #8
 800772e:	4a1d      	ldr	r2, [pc, #116]	; (80077a4 <xPortStartScheduler+0x134>)
 8007730:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007732:	4b1c      	ldr	r3, [pc, #112]	; (80077a4 <xPortStartScheduler+0x134>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800773a:	4a1a      	ldr	r2, [pc, #104]	; (80077a4 <xPortStartScheduler+0x134>)
 800773c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	b2da      	uxtb	r2, r3
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007746:	4b18      	ldr	r3, [pc, #96]	; (80077a8 <xPortStartScheduler+0x138>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a17      	ldr	r2, [pc, #92]	; (80077a8 <xPortStartScheduler+0x138>)
 800774c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007750:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007752:	4b15      	ldr	r3, [pc, #84]	; (80077a8 <xPortStartScheduler+0x138>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a14      	ldr	r2, [pc, #80]	; (80077a8 <xPortStartScheduler+0x138>)
 8007758:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800775c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800775e:	f000 f8dd 	bl	800791c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007762:	4b12      	ldr	r3, [pc, #72]	; (80077ac <xPortStartScheduler+0x13c>)
 8007764:	2200      	movs	r2, #0
 8007766:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007768:	f000 f8fc 	bl	8007964 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800776c:	4b10      	ldr	r3, [pc, #64]	; (80077b0 <xPortStartScheduler+0x140>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a0f      	ldr	r2, [pc, #60]	; (80077b0 <xPortStartScheduler+0x140>)
 8007772:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007776:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007778:	f7ff ff66 	bl	8007648 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800777c:	f7ff f84a 	bl	8006814 <vTaskSwitchContext>
	prvTaskExitError();
 8007780:	f7ff ff22 	bl	80075c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3718      	adds	r7, #24
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	e000ed00 	.word	0xe000ed00
 8007794:	410fc271 	.word	0x410fc271
 8007798:	410fc270 	.word	0x410fc270
 800779c:	e000e400 	.word	0xe000e400
 80077a0:	20001194 	.word	0x20001194
 80077a4:	20001198 	.word	0x20001198
 80077a8:	e000ed20 	.word	0xe000ed20
 80077ac:	2000000c 	.word	0x2000000c
 80077b0:	e000ef34 	.word	0xe000ef34

080077b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
	__asm volatile
 80077ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077be:	f383 8811 	msr	BASEPRI, r3
 80077c2:	f3bf 8f6f 	isb	sy
 80077c6:	f3bf 8f4f 	dsb	sy
 80077ca:	607b      	str	r3, [r7, #4]
}
 80077cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80077ce:	4b0f      	ldr	r3, [pc, #60]	; (800780c <vPortEnterCritical+0x58>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	3301      	adds	r3, #1
 80077d4:	4a0d      	ldr	r2, [pc, #52]	; (800780c <vPortEnterCritical+0x58>)
 80077d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80077d8:	4b0c      	ldr	r3, [pc, #48]	; (800780c <vPortEnterCritical+0x58>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d10f      	bne.n	8007800 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80077e0:	4b0b      	ldr	r3, [pc, #44]	; (8007810 <vPortEnterCritical+0x5c>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00a      	beq.n	8007800 <vPortEnterCritical+0x4c>
	__asm volatile
 80077ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ee:	f383 8811 	msr	BASEPRI, r3
 80077f2:	f3bf 8f6f 	isb	sy
 80077f6:	f3bf 8f4f 	dsb	sy
 80077fa:	603b      	str	r3, [r7, #0]
}
 80077fc:	bf00      	nop
 80077fe:	e7fe      	b.n	80077fe <vPortEnterCritical+0x4a>
	}
}
 8007800:	bf00      	nop
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr
 800780c:	2000000c 	.word	0x2000000c
 8007810:	e000ed04 	.word	0xe000ed04

08007814 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800781a:	4b12      	ldr	r3, [pc, #72]	; (8007864 <vPortExitCritical+0x50>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d10a      	bne.n	8007838 <vPortExitCritical+0x24>
	__asm volatile
 8007822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007826:	f383 8811 	msr	BASEPRI, r3
 800782a:	f3bf 8f6f 	isb	sy
 800782e:	f3bf 8f4f 	dsb	sy
 8007832:	607b      	str	r3, [r7, #4]
}
 8007834:	bf00      	nop
 8007836:	e7fe      	b.n	8007836 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007838:	4b0a      	ldr	r3, [pc, #40]	; (8007864 <vPortExitCritical+0x50>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	3b01      	subs	r3, #1
 800783e:	4a09      	ldr	r2, [pc, #36]	; (8007864 <vPortExitCritical+0x50>)
 8007840:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007842:	4b08      	ldr	r3, [pc, #32]	; (8007864 <vPortExitCritical+0x50>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d105      	bne.n	8007856 <vPortExitCritical+0x42>
 800784a:	2300      	movs	r3, #0
 800784c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	f383 8811 	msr	BASEPRI, r3
}
 8007854:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007856:	bf00      	nop
 8007858:	370c      	adds	r7, #12
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr
 8007862:	bf00      	nop
 8007864:	2000000c 	.word	0x2000000c
	...

08007870 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007870:	f3ef 8009 	mrs	r0, PSP
 8007874:	f3bf 8f6f 	isb	sy
 8007878:	4b15      	ldr	r3, [pc, #84]	; (80078d0 <pxCurrentTCBConst>)
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	f01e 0f10 	tst.w	lr, #16
 8007880:	bf08      	it	eq
 8007882:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007886:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800788a:	6010      	str	r0, [r2, #0]
 800788c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007890:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007894:	f380 8811 	msr	BASEPRI, r0
 8007898:	f3bf 8f4f 	dsb	sy
 800789c:	f3bf 8f6f 	isb	sy
 80078a0:	f7fe ffb8 	bl	8006814 <vTaskSwitchContext>
 80078a4:	f04f 0000 	mov.w	r0, #0
 80078a8:	f380 8811 	msr	BASEPRI, r0
 80078ac:	bc09      	pop	{r0, r3}
 80078ae:	6819      	ldr	r1, [r3, #0]
 80078b0:	6808      	ldr	r0, [r1, #0]
 80078b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078b6:	f01e 0f10 	tst.w	lr, #16
 80078ba:	bf08      	it	eq
 80078bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80078c0:	f380 8809 	msr	PSP, r0
 80078c4:	f3bf 8f6f 	isb	sy
 80078c8:	4770      	bx	lr
 80078ca:	bf00      	nop
 80078cc:	f3af 8000 	nop.w

080078d0 <pxCurrentTCBConst>:
 80078d0:	20000b68 	.word	0x20000b68
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80078d4:	bf00      	nop
 80078d6:	bf00      	nop

080078d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
	__asm volatile
 80078de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e2:	f383 8811 	msr	BASEPRI, r3
 80078e6:	f3bf 8f6f 	isb	sy
 80078ea:	f3bf 8f4f 	dsb	sy
 80078ee:	607b      	str	r3, [r7, #4]
}
 80078f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80078f2:	f7fe fed5 	bl	80066a0 <xTaskIncrementTick>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d003      	beq.n	8007904 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80078fc:	4b06      	ldr	r3, [pc, #24]	; (8007918 <xPortSysTickHandler+0x40>)
 80078fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007902:	601a      	str	r2, [r3, #0]
 8007904:	2300      	movs	r3, #0
 8007906:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	f383 8811 	msr	BASEPRI, r3
}
 800790e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007910:	bf00      	nop
 8007912:	3708      	adds	r7, #8
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}
 8007918:	e000ed04 	.word	0xe000ed04

0800791c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800791c:	b480      	push	{r7}
 800791e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007920:	4b0b      	ldr	r3, [pc, #44]	; (8007950 <vPortSetupTimerInterrupt+0x34>)
 8007922:	2200      	movs	r2, #0
 8007924:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007926:	4b0b      	ldr	r3, [pc, #44]	; (8007954 <vPortSetupTimerInterrupt+0x38>)
 8007928:	2200      	movs	r2, #0
 800792a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800792c:	4b0a      	ldr	r3, [pc, #40]	; (8007958 <vPortSetupTimerInterrupt+0x3c>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a0a      	ldr	r2, [pc, #40]	; (800795c <vPortSetupTimerInterrupt+0x40>)
 8007932:	fba2 2303 	umull	r2, r3, r2, r3
 8007936:	099b      	lsrs	r3, r3, #6
 8007938:	4a09      	ldr	r2, [pc, #36]	; (8007960 <vPortSetupTimerInterrupt+0x44>)
 800793a:	3b01      	subs	r3, #1
 800793c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800793e:	4b04      	ldr	r3, [pc, #16]	; (8007950 <vPortSetupTimerInterrupt+0x34>)
 8007940:	2207      	movs	r2, #7
 8007942:	601a      	str	r2, [r3, #0]
}
 8007944:	bf00      	nop
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	e000e010 	.word	0xe000e010
 8007954:	e000e018 	.word	0xe000e018
 8007958:	20000000 	.word	0x20000000
 800795c:	10624dd3 	.word	0x10624dd3
 8007960:	e000e014 	.word	0xe000e014

08007964 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007964:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007974 <vPortEnableVFP+0x10>
 8007968:	6801      	ldr	r1, [r0, #0]
 800796a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800796e:	6001      	str	r1, [r0, #0]
 8007970:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007972:	bf00      	nop
 8007974:	e000ed88 	.word	0xe000ed88

08007978 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007978:	b480      	push	{r7}
 800797a:	b085      	sub	sp, #20
 800797c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800797e:	f3ef 8305 	mrs	r3, IPSR
 8007982:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2b0f      	cmp	r3, #15
 8007988:	d914      	bls.n	80079b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800798a:	4a17      	ldr	r2, [pc, #92]	; (80079e8 <vPortValidateInterruptPriority+0x70>)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	4413      	add	r3, r2
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007994:	4b15      	ldr	r3, [pc, #84]	; (80079ec <vPortValidateInterruptPriority+0x74>)
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	7afa      	ldrb	r2, [r7, #11]
 800799a:	429a      	cmp	r2, r3
 800799c:	d20a      	bcs.n	80079b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800799e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a2:	f383 8811 	msr	BASEPRI, r3
 80079a6:	f3bf 8f6f 	isb	sy
 80079aa:	f3bf 8f4f 	dsb	sy
 80079ae:	607b      	str	r3, [r7, #4]
}
 80079b0:	bf00      	nop
 80079b2:	e7fe      	b.n	80079b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80079b4:	4b0e      	ldr	r3, [pc, #56]	; (80079f0 <vPortValidateInterruptPriority+0x78>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80079bc:	4b0d      	ldr	r3, [pc, #52]	; (80079f4 <vPortValidateInterruptPriority+0x7c>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d90a      	bls.n	80079da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80079c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c8:	f383 8811 	msr	BASEPRI, r3
 80079cc:	f3bf 8f6f 	isb	sy
 80079d0:	f3bf 8f4f 	dsb	sy
 80079d4:	603b      	str	r3, [r7, #0]
}
 80079d6:	bf00      	nop
 80079d8:	e7fe      	b.n	80079d8 <vPortValidateInterruptPriority+0x60>
	}
 80079da:	bf00      	nop
 80079dc:	3714      	adds	r7, #20
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	e000e3f0 	.word	0xe000e3f0
 80079ec:	20001194 	.word	0x20001194
 80079f0:	e000ed0c 	.word	0xe000ed0c
 80079f4:	20001198 	.word	0x20001198

080079f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b08a      	sub	sp, #40	; 0x28
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007a00:	2300      	movs	r3, #0
 8007a02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007a04:	f7fe fd90 	bl	8006528 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007a08:	4b5b      	ldr	r3, [pc, #364]	; (8007b78 <pvPortMalloc+0x180>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d101      	bne.n	8007a14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007a10:	f000 f920 	bl	8007c54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007a14:	4b59      	ldr	r3, [pc, #356]	; (8007b7c <pvPortMalloc+0x184>)
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4013      	ands	r3, r2
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	f040 8093 	bne.w	8007b48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d01d      	beq.n	8007a64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007a28:	2208      	movs	r2, #8
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f003 0307 	and.w	r3, r3, #7
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d014      	beq.n	8007a64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f023 0307 	bic.w	r3, r3, #7
 8007a40:	3308      	adds	r3, #8
 8007a42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f003 0307 	and.w	r3, r3, #7
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d00a      	beq.n	8007a64 <pvPortMalloc+0x6c>
	__asm volatile
 8007a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a52:	f383 8811 	msr	BASEPRI, r3
 8007a56:	f3bf 8f6f 	isb	sy
 8007a5a:	f3bf 8f4f 	dsb	sy
 8007a5e:	617b      	str	r3, [r7, #20]
}
 8007a60:	bf00      	nop
 8007a62:	e7fe      	b.n	8007a62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d06e      	beq.n	8007b48 <pvPortMalloc+0x150>
 8007a6a:	4b45      	ldr	r3, [pc, #276]	; (8007b80 <pvPortMalloc+0x188>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d869      	bhi.n	8007b48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007a74:	4b43      	ldr	r3, [pc, #268]	; (8007b84 <pvPortMalloc+0x18c>)
 8007a76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007a78:	4b42      	ldr	r3, [pc, #264]	; (8007b84 <pvPortMalloc+0x18c>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a7e:	e004      	b.n	8007a8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d903      	bls.n	8007a9c <pvPortMalloc+0xa4>
 8007a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d1f1      	bne.n	8007a80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007a9c:	4b36      	ldr	r3, [pc, #216]	; (8007b78 <pvPortMalloc+0x180>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d050      	beq.n	8007b48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007aa6:	6a3b      	ldr	r3, [r7, #32]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	2208      	movs	r2, #8
 8007aac:	4413      	add	r3, r2
 8007aae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	6a3b      	ldr	r3, [r7, #32]
 8007ab6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aba:	685a      	ldr	r2, [r3, #4]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	1ad2      	subs	r2, r2, r3
 8007ac0:	2308      	movs	r3, #8
 8007ac2:	005b      	lsls	r3, r3, #1
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d91f      	bls.n	8007b08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4413      	add	r3, r2
 8007ace:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ad0:	69bb      	ldr	r3, [r7, #24]
 8007ad2:	f003 0307 	and.w	r3, r3, #7
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d00a      	beq.n	8007af0 <pvPortMalloc+0xf8>
	__asm volatile
 8007ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ade:	f383 8811 	msr	BASEPRI, r3
 8007ae2:	f3bf 8f6f 	isb	sy
 8007ae6:	f3bf 8f4f 	dsb	sy
 8007aea:	613b      	str	r3, [r7, #16]
}
 8007aec:	bf00      	nop
 8007aee:	e7fe      	b.n	8007aee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af2:	685a      	ldr	r2, [r3, #4]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	1ad2      	subs	r2, r2, r3
 8007af8:	69bb      	ldr	r3, [r7, #24]
 8007afa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007b02:	69b8      	ldr	r0, [r7, #24]
 8007b04:	f000 f908 	bl	8007d18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b08:	4b1d      	ldr	r3, [pc, #116]	; (8007b80 <pvPortMalloc+0x188>)
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	1ad3      	subs	r3, r2, r3
 8007b12:	4a1b      	ldr	r2, [pc, #108]	; (8007b80 <pvPortMalloc+0x188>)
 8007b14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b16:	4b1a      	ldr	r3, [pc, #104]	; (8007b80 <pvPortMalloc+0x188>)
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	4b1b      	ldr	r3, [pc, #108]	; (8007b88 <pvPortMalloc+0x190>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d203      	bcs.n	8007b2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007b22:	4b17      	ldr	r3, [pc, #92]	; (8007b80 <pvPortMalloc+0x188>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a18      	ldr	r2, [pc, #96]	; (8007b88 <pvPortMalloc+0x190>)
 8007b28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2c:	685a      	ldr	r2, [r3, #4]
 8007b2e:	4b13      	ldr	r3, [pc, #76]	; (8007b7c <pvPortMalloc+0x184>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	431a      	orrs	r2, r3
 8007b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007b3e:	4b13      	ldr	r3, [pc, #76]	; (8007b8c <pvPortMalloc+0x194>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	3301      	adds	r3, #1
 8007b44:	4a11      	ldr	r2, [pc, #68]	; (8007b8c <pvPortMalloc+0x194>)
 8007b46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007b48:	f7fe fcfc 	bl	8006544 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b4c:	69fb      	ldr	r3, [r7, #28]
 8007b4e:	f003 0307 	and.w	r3, r3, #7
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d00a      	beq.n	8007b6c <pvPortMalloc+0x174>
	__asm volatile
 8007b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5a:	f383 8811 	msr	BASEPRI, r3
 8007b5e:	f3bf 8f6f 	isb	sy
 8007b62:	f3bf 8f4f 	dsb	sy
 8007b66:	60fb      	str	r3, [r7, #12]
}
 8007b68:	bf00      	nop
 8007b6a:	e7fe      	b.n	8007b6a <pvPortMalloc+0x172>
	return pvReturn;
 8007b6c:	69fb      	ldr	r3, [r7, #28]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3728      	adds	r7, #40	; 0x28
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	20001d5c 	.word	0x20001d5c
 8007b7c:	20001d70 	.word	0x20001d70
 8007b80:	20001d60 	.word	0x20001d60
 8007b84:	20001d54 	.word	0x20001d54
 8007b88:	20001d64 	.word	0x20001d64
 8007b8c:	20001d68 	.word	0x20001d68

08007b90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b086      	sub	sp, #24
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d04d      	beq.n	8007c3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007ba2:	2308      	movs	r3, #8
 8007ba4:	425b      	negs	r3, r3
 8007ba6:	697a      	ldr	r2, [r7, #20]
 8007ba8:	4413      	add	r3, r2
 8007baa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	685a      	ldr	r2, [r3, #4]
 8007bb4:	4b24      	ldr	r3, [pc, #144]	; (8007c48 <vPortFree+0xb8>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4013      	ands	r3, r2
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d10a      	bne.n	8007bd4 <vPortFree+0x44>
	__asm volatile
 8007bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc2:	f383 8811 	msr	BASEPRI, r3
 8007bc6:	f3bf 8f6f 	isb	sy
 8007bca:	f3bf 8f4f 	dsb	sy
 8007bce:	60fb      	str	r3, [r7, #12]
}
 8007bd0:	bf00      	nop
 8007bd2:	e7fe      	b.n	8007bd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d00a      	beq.n	8007bf2 <vPortFree+0x62>
	__asm volatile
 8007bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be0:	f383 8811 	msr	BASEPRI, r3
 8007be4:	f3bf 8f6f 	isb	sy
 8007be8:	f3bf 8f4f 	dsb	sy
 8007bec:	60bb      	str	r3, [r7, #8]
}
 8007bee:	bf00      	nop
 8007bf0:	e7fe      	b.n	8007bf0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	685a      	ldr	r2, [r3, #4]
 8007bf6:	4b14      	ldr	r3, [pc, #80]	; (8007c48 <vPortFree+0xb8>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4013      	ands	r3, r2
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d01e      	beq.n	8007c3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d11a      	bne.n	8007c3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	685a      	ldr	r2, [r3, #4]
 8007c0c:	4b0e      	ldr	r3, [pc, #56]	; (8007c48 <vPortFree+0xb8>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	43db      	mvns	r3, r3
 8007c12:	401a      	ands	r2, r3
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007c18:	f7fe fc86 	bl	8006528 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	685a      	ldr	r2, [r3, #4]
 8007c20:	4b0a      	ldr	r3, [pc, #40]	; (8007c4c <vPortFree+0xbc>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4413      	add	r3, r2
 8007c26:	4a09      	ldr	r2, [pc, #36]	; (8007c4c <vPortFree+0xbc>)
 8007c28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007c2a:	6938      	ldr	r0, [r7, #16]
 8007c2c:	f000 f874 	bl	8007d18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007c30:	4b07      	ldr	r3, [pc, #28]	; (8007c50 <vPortFree+0xc0>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	3301      	adds	r3, #1
 8007c36:	4a06      	ldr	r2, [pc, #24]	; (8007c50 <vPortFree+0xc0>)
 8007c38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007c3a:	f7fe fc83 	bl	8006544 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007c3e:	bf00      	nop
 8007c40:	3718      	adds	r7, #24
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	20001d70 	.word	0x20001d70
 8007c4c:	20001d60 	.word	0x20001d60
 8007c50:	20001d6c 	.word	0x20001d6c

08007c54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007c54:	b480      	push	{r7}
 8007c56:	b085      	sub	sp, #20
 8007c58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007c5a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007c5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007c60:	4b27      	ldr	r3, [pc, #156]	; (8007d00 <prvHeapInit+0xac>)
 8007c62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f003 0307 	and.w	r3, r3, #7
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d00c      	beq.n	8007c88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	3307      	adds	r3, #7
 8007c72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f023 0307 	bic.w	r3, r3, #7
 8007c7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007c7c:	68ba      	ldr	r2, [r7, #8]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	1ad3      	subs	r3, r2, r3
 8007c82:	4a1f      	ldr	r2, [pc, #124]	; (8007d00 <prvHeapInit+0xac>)
 8007c84:	4413      	add	r3, r2
 8007c86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007c8c:	4a1d      	ldr	r2, [pc, #116]	; (8007d04 <prvHeapInit+0xb0>)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007c92:	4b1c      	ldr	r3, [pc, #112]	; (8007d04 <prvHeapInit+0xb0>)
 8007c94:	2200      	movs	r2, #0
 8007c96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	68ba      	ldr	r2, [r7, #8]
 8007c9c:	4413      	add	r3, r2
 8007c9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ca0:	2208      	movs	r2, #8
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	1a9b      	subs	r3, r3, r2
 8007ca6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f023 0307 	bic.w	r3, r3, #7
 8007cae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	4a15      	ldr	r2, [pc, #84]	; (8007d08 <prvHeapInit+0xb4>)
 8007cb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007cb6:	4b14      	ldr	r3, [pc, #80]	; (8007d08 <prvHeapInit+0xb4>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007cbe:	4b12      	ldr	r3, [pc, #72]	; (8007d08 <prvHeapInit+0xb4>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	68fa      	ldr	r2, [r7, #12]
 8007cce:	1ad2      	subs	r2, r2, r3
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007cd4:	4b0c      	ldr	r3, [pc, #48]	; (8007d08 <prvHeapInit+0xb4>)
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	4a0a      	ldr	r2, [pc, #40]	; (8007d0c <prvHeapInit+0xb8>)
 8007ce2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	4a09      	ldr	r2, [pc, #36]	; (8007d10 <prvHeapInit+0xbc>)
 8007cea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007cec:	4b09      	ldr	r3, [pc, #36]	; (8007d14 <prvHeapInit+0xc0>)
 8007cee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007cf2:	601a      	str	r2, [r3, #0]
}
 8007cf4:	bf00      	nop
 8007cf6:	3714      	adds	r7, #20
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr
 8007d00:	2000119c 	.word	0x2000119c
 8007d04:	20001d54 	.word	0x20001d54
 8007d08:	20001d5c 	.word	0x20001d5c
 8007d0c:	20001d64 	.word	0x20001d64
 8007d10:	20001d60 	.word	0x20001d60
 8007d14:	20001d70 	.word	0x20001d70

08007d18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b085      	sub	sp, #20
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007d20:	4b28      	ldr	r3, [pc, #160]	; (8007dc4 <prvInsertBlockIntoFreeList+0xac>)
 8007d22:	60fb      	str	r3, [r7, #12]
 8007d24:	e002      	b.n	8007d2c <prvInsertBlockIntoFreeList+0x14>
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	60fb      	str	r3, [r7, #12]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d8f7      	bhi.n	8007d26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	68ba      	ldr	r2, [r7, #8]
 8007d40:	4413      	add	r3, r2
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d108      	bne.n	8007d5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	685a      	ldr	r2, [r3, #4]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	441a      	add	r2, r3
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	68ba      	ldr	r2, [r7, #8]
 8007d64:	441a      	add	r2, r3
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d118      	bne.n	8007da0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	4b15      	ldr	r3, [pc, #84]	; (8007dc8 <prvInsertBlockIntoFreeList+0xb0>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d00d      	beq.n	8007d96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	685a      	ldr	r2, [r3, #4]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	441a      	add	r2, r3
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	601a      	str	r2, [r3, #0]
 8007d94:	e008      	b.n	8007da8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007d96:	4b0c      	ldr	r3, [pc, #48]	; (8007dc8 <prvInsertBlockIntoFreeList+0xb0>)
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	601a      	str	r2, [r3, #0]
 8007d9e:	e003      	b.n	8007da8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d002      	beq.n	8007db6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007db6:	bf00      	nop
 8007db8:	3714      	adds	r7, #20
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr
 8007dc2:	bf00      	nop
 8007dc4:	20001d54 	.word	0x20001d54
 8007dc8:	20001d5c 	.word	0x20001d5c

08007dcc <__libc_init_array>:
 8007dcc:	b570      	push	{r4, r5, r6, lr}
 8007dce:	4d0d      	ldr	r5, [pc, #52]	; (8007e04 <__libc_init_array+0x38>)
 8007dd0:	4c0d      	ldr	r4, [pc, #52]	; (8007e08 <__libc_init_array+0x3c>)
 8007dd2:	1b64      	subs	r4, r4, r5
 8007dd4:	10a4      	asrs	r4, r4, #2
 8007dd6:	2600      	movs	r6, #0
 8007dd8:	42a6      	cmp	r6, r4
 8007dda:	d109      	bne.n	8007df0 <__libc_init_array+0x24>
 8007ddc:	4d0b      	ldr	r5, [pc, #44]	; (8007e0c <__libc_init_array+0x40>)
 8007dde:	4c0c      	ldr	r4, [pc, #48]	; (8007e10 <__libc_init_array+0x44>)
 8007de0:	f000 f8f2 	bl	8007fc8 <_init>
 8007de4:	1b64      	subs	r4, r4, r5
 8007de6:	10a4      	asrs	r4, r4, #2
 8007de8:	2600      	movs	r6, #0
 8007dea:	42a6      	cmp	r6, r4
 8007dec:	d105      	bne.n	8007dfa <__libc_init_array+0x2e>
 8007dee:	bd70      	pop	{r4, r5, r6, pc}
 8007df0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007df4:	4798      	blx	r3
 8007df6:	3601      	adds	r6, #1
 8007df8:	e7ee      	b.n	8007dd8 <__libc_init_array+0xc>
 8007dfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dfe:	4798      	blx	r3
 8007e00:	3601      	adds	r6, #1
 8007e02:	e7f2      	b.n	8007dea <__libc_init_array+0x1e>
 8007e04:	08008104 	.word	0x08008104
 8007e08:	08008104 	.word	0x08008104
 8007e0c:	08008104 	.word	0x08008104
 8007e10:	08008108 	.word	0x08008108

08007e14 <__retarget_lock_acquire_recursive>:
 8007e14:	4770      	bx	lr

08007e16 <__retarget_lock_release_recursive>:
 8007e16:	4770      	bx	lr

08007e18 <memcpy>:
 8007e18:	440a      	add	r2, r1
 8007e1a:	4291      	cmp	r1, r2
 8007e1c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007e20:	d100      	bne.n	8007e24 <memcpy+0xc>
 8007e22:	4770      	bx	lr
 8007e24:	b510      	push	{r4, lr}
 8007e26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e2e:	4291      	cmp	r1, r2
 8007e30:	d1f9      	bne.n	8007e26 <memcpy+0xe>
 8007e32:	bd10      	pop	{r4, pc}

08007e34 <memset>:
 8007e34:	4402      	add	r2, r0
 8007e36:	4603      	mov	r3, r0
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d100      	bne.n	8007e3e <memset+0xa>
 8007e3c:	4770      	bx	lr
 8007e3e:	f803 1b01 	strb.w	r1, [r3], #1
 8007e42:	e7f9      	b.n	8007e38 <memset+0x4>

08007e44 <cleanup_glue>:
 8007e44:	b538      	push	{r3, r4, r5, lr}
 8007e46:	460c      	mov	r4, r1
 8007e48:	6809      	ldr	r1, [r1, #0]
 8007e4a:	4605      	mov	r5, r0
 8007e4c:	b109      	cbz	r1, 8007e52 <cleanup_glue+0xe>
 8007e4e:	f7ff fff9 	bl	8007e44 <cleanup_glue>
 8007e52:	4621      	mov	r1, r4
 8007e54:	4628      	mov	r0, r5
 8007e56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e5a:	f000 b869 	b.w	8007f30 <_free_r>
	...

08007e60 <_reclaim_reent>:
 8007e60:	4b2c      	ldr	r3, [pc, #176]	; (8007f14 <_reclaim_reent+0xb4>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4283      	cmp	r3, r0
 8007e66:	b570      	push	{r4, r5, r6, lr}
 8007e68:	4604      	mov	r4, r0
 8007e6a:	d051      	beq.n	8007f10 <_reclaim_reent+0xb0>
 8007e6c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007e6e:	b143      	cbz	r3, 8007e82 <_reclaim_reent+0x22>
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d14a      	bne.n	8007f0c <_reclaim_reent+0xac>
 8007e76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e78:	6819      	ldr	r1, [r3, #0]
 8007e7a:	b111      	cbz	r1, 8007e82 <_reclaim_reent+0x22>
 8007e7c:	4620      	mov	r0, r4
 8007e7e:	f000 f857 	bl	8007f30 <_free_r>
 8007e82:	6961      	ldr	r1, [r4, #20]
 8007e84:	b111      	cbz	r1, 8007e8c <_reclaim_reent+0x2c>
 8007e86:	4620      	mov	r0, r4
 8007e88:	f000 f852 	bl	8007f30 <_free_r>
 8007e8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007e8e:	b111      	cbz	r1, 8007e96 <_reclaim_reent+0x36>
 8007e90:	4620      	mov	r0, r4
 8007e92:	f000 f84d 	bl	8007f30 <_free_r>
 8007e96:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007e98:	b111      	cbz	r1, 8007ea0 <_reclaim_reent+0x40>
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	f000 f848 	bl	8007f30 <_free_r>
 8007ea0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007ea2:	b111      	cbz	r1, 8007eaa <_reclaim_reent+0x4a>
 8007ea4:	4620      	mov	r0, r4
 8007ea6:	f000 f843 	bl	8007f30 <_free_r>
 8007eaa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007eac:	b111      	cbz	r1, 8007eb4 <_reclaim_reent+0x54>
 8007eae:	4620      	mov	r0, r4
 8007eb0:	f000 f83e 	bl	8007f30 <_free_r>
 8007eb4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007eb6:	b111      	cbz	r1, 8007ebe <_reclaim_reent+0x5e>
 8007eb8:	4620      	mov	r0, r4
 8007eba:	f000 f839 	bl	8007f30 <_free_r>
 8007ebe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007ec0:	b111      	cbz	r1, 8007ec8 <_reclaim_reent+0x68>
 8007ec2:	4620      	mov	r0, r4
 8007ec4:	f000 f834 	bl	8007f30 <_free_r>
 8007ec8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007eca:	b111      	cbz	r1, 8007ed2 <_reclaim_reent+0x72>
 8007ecc:	4620      	mov	r0, r4
 8007ece:	f000 f82f 	bl	8007f30 <_free_r>
 8007ed2:	69a3      	ldr	r3, [r4, #24]
 8007ed4:	b1e3      	cbz	r3, 8007f10 <_reclaim_reent+0xb0>
 8007ed6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007ed8:	4620      	mov	r0, r4
 8007eda:	4798      	blx	r3
 8007edc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007ede:	b1b9      	cbz	r1, 8007f10 <_reclaim_reent+0xb0>
 8007ee0:	4620      	mov	r0, r4
 8007ee2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007ee6:	f7ff bfad 	b.w	8007e44 <cleanup_glue>
 8007eea:	5949      	ldr	r1, [r1, r5]
 8007eec:	b941      	cbnz	r1, 8007f00 <_reclaim_reent+0xa0>
 8007eee:	3504      	adds	r5, #4
 8007ef0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ef2:	2d80      	cmp	r5, #128	; 0x80
 8007ef4:	68d9      	ldr	r1, [r3, #12]
 8007ef6:	d1f8      	bne.n	8007eea <_reclaim_reent+0x8a>
 8007ef8:	4620      	mov	r0, r4
 8007efa:	f000 f819 	bl	8007f30 <_free_r>
 8007efe:	e7ba      	b.n	8007e76 <_reclaim_reent+0x16>
 8007f00:	680e      	ldr	r6, [r1, #0]
 8007f02:	4620      	mov	r0, r4
 8007f04:	f000 f814 	bl	8007f30 <_free_r>
 8007f08:	4631      	mov	r1, r6
 8007f0a:	e7ef      	b.n	8007eec <_reclaim_reent+0x8c>
 8007f0c:	2500      	movs	r5, #0
 8007f0e:	e7ef      	b.n	8007ef0 <_reclaim_reent+0x90>
 8007f10:	bd70      	pop	{r4, r5, r6, pc}
 8007f12:	bf00      	nop
 8007f14:	20000010 	.word	0x20000010

08007f18 <__malloc_lock>:
 8007f18:	4801      	ldr	r0, [pc, #4]	; (8007f20 <__malloc_lock+0x8>)
 8007f1a:	f7ff bf7b 	b.w	8007e14 <__retarget_lock_acquire_recursive>
 8007f1e:	bf00      	nop
 8007f20:	20001d74 	.word	0x20001d74

08007f24 <__malloc_unlock>:
 8007f24:	4801      	ldr	r0, [pc, #4]	; (8007f2c <__malloc_unlock+0x8>)
 8007f26:	f7ff bf76 	b.w	8007e16 <__retarget_lock_release_recursive>
 8007f2a:	bf00      	nop
 8007f2c:	20001d74 	.word	0x20001d74

08007f30 <_free_r>:
 8007f30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f32:	2900      	cmp	r1, #0
 8007f34:	d044      	beq.n	8007fc0 <_free_r+0x90>
 8007f36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f3a:	9001      	str	r0, [sp, #4]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	f1a1 0404 	sub.w	r4, r1, #4
 8007f42:	bfb8      	it	lt
 8007f44:	18e4      	addlt	r4, r4, r3
 8007f46:	f7ff ffe7 	bl	8007f18 <__malloc_lock>
 8007f4a:	4a1e      	ldr	r2, [pc, #120]	; (8007fc4 <_free_r+0x94>)
 8007f4c:	9801      	ldr	r0, [sp, #4]
 8007f4e:	6813      	ldr	r3, [r2, #0]
 8007f50:	b933      	cbnz	r3, 8007f60 <_free_r+0x30>
 8007f52:	6063      	str	r3, [r4, #4]
 8007f54:	6014      	str	r4, [r2, #0]
 8007f56:	b003      	add	sp, #12
 8007f58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f5c:	f7ff bfe2 	b.w	8007f24 <__malloc_unlock>
 8007f60:	42a3      	cmp	r3, r4
 8007f62:	d908      	bls.n	8007f76 <_free_r+0x46>
 8007f64:	6825      	ldr	r5, [r4, #0]
 8007f66:	1961      	adds	r1, r4, r5
 8007f68:	428b      	cmp	r3, r1
 8007f6a:	bf01      	itttt	eq
 8007f6c:	6819      	ldreq	r1, [r3, #0]
 8007f6e:	685b      	ldreq	r3, [r3, #4]
 8007f70:	1949      	addeq	r1, r1, r5
 8007f72:	6021      	streq	r1, [r4, #0]
 8007f74:	e7ed      	b.n	8007f52 <_free_r+0x22>
 8007f76:	461a      	mov	r2, r3
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	b10b      	cbz	r3, 8007f80 <_free_r+0x50>
 8007f7c:	42a3      	cmp	r3, r4
 8007f7e:	d9fa      	bls.n	8007f76 <_free_r+0x46>
 8007f80:	6811      	ldr	r1, [r2, #0]
 8007f82:	1855      	adds	r5, r2, r1
 8007f84:	42a5      	cmp	r5, r4
 8007f86:	d10b      	bne.n	8007fa0 <_free_r+0x70>
 8007f88:	6824      	ldr	r4, [r4, #0]
 8007f8a:	4421      	add	r1, r4
 8007f8c:	1854      	adds	r4, r2, r1
 8007f8e:	42a3      	cmp	r3, r4
 8007f90:	6011      	str	r1, [r2, #0]
 8007f92:	d1e0      	bne.n	8007f56 <_free_r+0x26>
 8007f94:	681c      	ldr	r4, [r3, #0]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	6053      	str	r3, [r2, #4]
 8007f9a:	4421      	add	r1, r4
 8007f9c:	6011      	str	r1, [r2, #0]
 8007f9e:	e7da      	b.n	8007f56 <_free_r+0x26>
 8007fa0:	d902      	bls.n	8007fa8 <_free_r+0x78>
 8007fa2:	230c      	movs	r3, #12
 8007fa4:	6003      	str	r3, [r0, #0]
 8007fa6:	e7d6      	b.n	8007f56 <_free_r+0x26>
 8007fa8:	6825      	ldr	r5, [r4, #0]
 8007faa:	1961      	adds	r1, r4, r5
 8007fac:	428b      	cmp	r3, r1
 8007fae:	bf04      	itt	eq
 8007fb0:	6819      	ldreq	r1, [r3, #0]
 8007fb2:	685b      	ldreq	r3, [r3, #4]
 8007fb4:	6063      	str	r3, [r4, #4]
 8007fb6:	bf04      	itt	eq
 8007fb8:	1949      	addeq	r1, r1, r5
 8007fba:	6021      	streq	r1, [r4, #0]
 8007fbc:	6054      	str	r4, [r2, #4]
 8007fbe:	e7ca      	b.n	8007f56 <_free_r+0x26>
 8007fc0:	b003      	add	sp, #12
 8007fc2:	bd30      	pop	{r4, r5, pc}
 8007fc4:	20001d78 	.word	0x20001d78

08007fc8 <_init>:
 8007fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fca:	bf00      	nop
 8007fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fce:	bc08      	pop	{r3}
 8007fd0:	469e      	mov	lr, r3
 8007fd2:	4770      	bx	lr

08007fd4 <_fini>:
 8007fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fd6:	bf00      	nop
 8007fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fda:	bc08      	pop	{r3}
 8007fdc:	469e      	mov	lr, r3
 8007fde:	4770      	bx	lr
