/**
 ******************************************************************************
 * @file    LTC4168.c
 * @author  Carlos Martinez Mora (carmamo.95@gmail.com)
 * @date	 Sep 25, 2023
 * @brief   short description of the file
 *			...
 *
 ******************************************************************************
 * @attention
 *
 *
 *
 ******************************************************************************
 */

#include "LTC4162.h"
#include "LTC4162-LAD_reg_defs.h"
#include "LTC4162-LAD_formats.h"
#include "stm32l4xx_hal.h"
#include "main.h"


#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

/**
  @defgroup LTC4162 LTC4162 Driver

 */

/**
  @addtogroup LTC4162
  @{
 */


static LTC4162_t dev;


static inline uint8_t get_size(uint16_t registerinfo)
{
  return ((registerinfo >> 8) & 0x0F) + 1;
}
static inline uint16_t get_command_code(uint16_t registerinfo)
{
  return (registerinfo) & 0xFF;
}
static inline uint8_t get_offset(uint16_t registerinfo)
{
  return (registerinfo >> 12) & 0x0F;
}
static inline uint16_t get_mask(uint16_t registerinfo)
{
  uint8_t size = get_size(registerinfo);
  if (size == LTC4162_WORD_SIZE)
  {
    return UINT16_MAX;
  }
  return (uint16_t)(((1 << size) - 1) << get_offset(registerinfo));
}


void LTC4162_Init(I2C_HandleTypeDef *i2c)
{
	static uint16_t cell_count;

	dev.i2cHandle = i2c;

	LTC4162_SetReg(LTC4162_FORCE_TELEMETRY_ON, true);

	LTC4162_SetReg(LTC4162_MPPT_EN, true);

	LTC4162_SetReg(LTC4162_TELEMETRY_SPEED, LTC4162_TELEMETRY_SPEED_ENUM_TEL_HIGH_SPEED);

	LTC4162_GetReg(LTC4162_CELL_COUNT, &cell_count);
	for(int i = 0; i<cell_count;i++)
	{
		HAL_GPIO_WritePin(LED_YL_GPIO_Port, LED_YL_Pin, GPIO_PIN_RESET);
		osDelay(500);
		HAL_GPIO_WritePin(LED_YL_GPIO_Port, LED_YL_Pin, GPIO_PIN_SET);
		osDelay(500);
	}
}


HAL_StatusTypeDef LTC4162_SetReg(uint16_t reg, uint16_t data)
{
	HAL_StatusTypeDef status;
	uint16_t command_code = get_command_code(reg);

	if (get_size(reg) != LTC4162_WORD_SIZE)
	  {
	    uint8_t offset = get_offset(reg);
	    uint16_t mask = get_mask(reg);
	    static uint16_t read_data;
	    status = HAL_I2C_Mem_Read(dev.i2cHandle, LTC4162_ADDR_68, command_code, 1, (uint8_t *)&read_data, 2, 100);
	    if (status != HAL_OK) return status;
	    data = (read_data & ~mask) | (data << offset);
	  }
	status = HAL_I2C_Mem_Write(dev.i2cHandle, LTC4162_ADDR_68, command_code, 1, (uint8_t *)&data, 2, 100);
	return status;
}

HAL_StatusTypeDef LTC4162_GetReg(uint16_t reg, uint16_t *rxdata)
{
	HAL_StatusTypeDef status;
	uint16_t command_code = get_command_code(reg);

	status = HAL_I2C_Mem_Read(dev.i2cHandle, LTC4162_ADDR_68, command_code, 1, (uint8_t *)rxdata, 2, 100);

	if(get_size(reg) == LTC4162_WORD_SIZE) return status;

	*rxdata &= get_mask(reg);
	*rxdata = *rxdata >> get_offset(reg);
	return status;
}


/**
  @} end of LTC4162 group
 */

